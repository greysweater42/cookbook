body,comms_num,score,title
,113,397,[ANNOUNCE] Emacs 26.1 released
,27,359,When Emacs users open a donut shop
,48,337,Magit kickstarter is funded!
,55,324,emacs theater
,14,289,M-x upvote-net-neutrality
"I have just launched the Magit fundraising campaign [on Kickstarter](https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client?ref=8o67af).  Hurray!

Please consider becoming a backer and to inform others about the campaign. If the campaign succeeds, then I can work full-time on Magit for a whole year.  I am still overflowing with ideas, and depend on your support to realize them, and to address the remaining long-standing issues.  It is great that many users already consider Magit to be one of Emacs' killer applications, but it is still far from fulfilling its true potential.  Only with your help can I get it there.

Thanks so much!
Jonas",55,270,Magit fundraising campaign on Kickstarter
,21,249,Found an old version of the GNU/Emacs manual at work
,24,239,"Every Emacs'er fiddling with their config, will recognize this."
"I am a grad student. I sought help for my mental illness last year.  I go to one of those 'top 10' universities in the US. Grad life is hard, I do not have a lot of support from my family, and I am socially awkward.  As far as coursework and work was concerned, I was struggling to organize my work and time. I used to be a huge fan of services like Trello, RescueTime, Evernote, all those technologies out there for managing and organizing. I used notepad or MS Word for documentation and writing reports. I wrote code in Visual Studio and Anaconda's Spyder (no offense to Anaconda). That's what my friends were doing, but I guess it was not enough for me, because I tend to get very nervous when there is a lot of work, and the smallest things can push me off the edge.  I need everything to be organized and neat.

I discovered Emacs in May 2018. I was in a terrible place then. I thought I was never going to recover. I was just trying out different text editors to optimize my workflow when I found Emacs. The first thing that completely amazed me was org-mode:  agenda, the tree structure, org-babel, everything! Then I started writing all my code in Emacs, for all my coursework and work in machine learning, game development, etc. I learned how to store links to particular lines in huge code files, so that I can access them quickly, and continue work where I had left off. I also journal, I have been journaling for 4 years, that is how I deal with my problems. I have tried many software packages for journaling, and none of them come close to what I can do in Emacs. Now I can also write lisp scripts for doing simple routine processes that would make my workflow much simpler, so that I don't have to worry about small details and concentrate on more important things.

I have recovered significantly from my depression. I still feel terrible, but I can handle things with more ease because Emacs reduces a lot of unnecessary cognitive load. I wonder what I would have been if I had decided not to explore Emacs. It's true what they say, any text editor can save your files, only Emacs can save your soul.

&#x200B;

Edit: I did not know M-x doctor existed! It would be perfect if the doctor could prescribe medication too",58,229,Emacs helped me recover from depression
,37,220,My coffee tastes much better now.
"The upcoming Emacs 25 include a real web browse based on Webkit, thanks to the addition of xwidget. You can now have a real web browser inside Emacs, and it renders fast, too! Here are some demos:
 
- [Browsing Youtube in Emacs](http://i.imgur.com/T5efpL0.gifv)

- [Watching Youtube in Emacs](http://i.imgur.com/KsLQxNC.gifv) (due to GIF recording, the quality degraded but in reality, it's the same as other browsers).

- [Open Github in Emacs](http://i.imgur.com/QhVYPkp.png)

- [Open Google in Emac](http://i.imgur.com/fIItEpu.png)

- [Open both](http://i.imgur.com/ku1dFuS.png)

Aside from watching youtube, these are some of prime use cases:

- [Combine with `helm-dash`. Instant look up HTML document for symbol at cursor](http://i.imgur.com/IcIo6af.gif)

- [Combine with `helm-google-suggeste`](http://i.imgur.com/2rTQeiG.gifv))

Just to show how useful this feature is, consider this demo of using `helm-dash` with EWW, previous web browser in Emacs 24:

[Eww](http://i.imgur.com/G7pzDZN.gifv)

But, that does not mean Eww is useless. It's still useful for web browsing within a terminal.

My config to make the experience nicer:

    ;; make these keys behave like normal browser
    (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd ""<up>"") 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd ""<down>"") 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd ""M-w"") 'xwidget-webkit-copy-selection-as-kill)
    (define-key xwidget-webkit-mode-map (kbd ""C-c"") 'xwidget-webkit-copy-selection-as-kill)
    
    ;; adapt webkit according to window configuration chagne automatically
    ;; without this hook, every time you change your window configuration,
    ;; you must press 'a' to adapt webkit content to new window size
    (add-hook 'window-configuration-change-hook (lambda ()
    			   (when (equal major-mode 'xwidget-webkit-mode)
    			     (xwidget-webkit-adjust-size-dispatch))))
    
    ;; by default, xwidget reuses previous xwidget window,
    ;; thus overriding your current website, unless a prefix argument
    ;; is supplied
    ;;
    ;; This function always opens a new website in a new window
    (defun xwidget-browse-url-no-reuse (url &optional sessoin)
      (interactive (progn
                     (require 'browse-url)
                     (browse-url-interactive-arg ""xwidget-webkit URL: ""
                                                 )))
      (xwidget-webkit-browse-url url t))
    
    ;; make xwidget default browser
    (setq browse-url-browser-function (lambda (url session)
    				    (other-window 1)
    				    (xwidget-browse-url-no-reuse url)))

You can copy text from the browser, but before that you have to switch to browser buffer first. That's quite inconvenient, hopefully it will be fixed in the future, when you click the mouse and Emacs focuses on browser buffer.

**EDIT**: [It even works on Windows, with Emacs compiled under Cygwin](http://i.imgur.com/Qf1gabu.jpg).",110,218,Watching youtube inside Emacs 25!
"I am excited to announce the release of Magit version 2.12, consisting of 610 commits since the last feature release six months ago.

More information can be found on my [blog](https://emacsair.me/2018/03/29/magit-2.12) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.12.0.txt).",14,219,Magit v2.12 released
,79,217,Emacs 25.1 released
"I am excited to announce the release of Magit version 2.5, consisting of 78 commits since the last feature release two weeks ago.

More information can be found in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.5.0.txt).

[I'll take a break now](http://magit.vc/stats/authors.html#commits_per_author). I'll continue to fix bugs and such, but won't  implement many new features over the next two months or so. I might blog about that at some later time, but I am on a break, so it might be a while until I get to it :-)
",32,212,Magit v2.5 released
"I am excited to announce the release of Magit version 2.90, consisting of 395 commits since the last feature release five months ago.

More information can be found on my [blog](https://emacsair.me/2018/11/08/magit-2.90) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.90.0.org).

**UPDATE** I am **not** going to drop support for Emacs 25 any time soon.",73,199,Magit v2.90 released
"_UPDATE: I've [revised this article](https://ambrevar.bitbucket.io/emacs-eshell) by taking the awesome community feedback into account. Thank you all!_

----

Since its inception, Eshell has suffered from an arguably low popularity.
See what the community says:

- https://www.reddit.com/r/emacs/comments/492edz/is_anybody_using_eshell_as_the_default_shell_any/
- https://www.reddit.com/r/emacs/comments/48opk1/eshell_and_why_cant_i_convert_to_you/

Hell, even the official manual gives a fair warning against its use:

- https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Introduction

I'm not arguing that those arguments are not valid. (To most extent, they are.)

I want to argue that the issue is not so much that Eshell is not a
proper _Unix shell_ (in the sense of POSIX sh and derivatives), but rather
perhaps we do not need a _Unix shell_ and all its historical limitations.

In other words: the non-Unix-ness of Eshell is more of a step forward than a
hindrance.  Let's review the situation.


# ""State of the art""

Take this typical scenario: I've got a long running process which finally
outputs pages of relevant information.  Only then I realize that it would have
been smart saving that somewhere.  Now I want to copy it to the clipboard.  How
do I do that?

_By clumsily mouse-selecting pages of terminal output, assuming my terminal can
handle it._

> Why can't I (fuzzy-)search the shell output?

> Why can't I browse the different prompts of my shell session?

> Why can't I copy/paste without a mouse?

Back in the days, VT-like terminals were our main mean of communicating with a
machine.  Decades went by, our desktop computers can now handle gigabytes of
buffering and display in 24-bit colors, and yet we still stick terminal
_emulators_, that is, programs that emulate the _restrictions_ of those ancient
machines.

- Cannot move the cursor around.

- Limited colors.

- Terminal capabilities are neither simple nor portable.  See termcap(5).

- Formatting (e.g. colors) needs ugly escape codes that are not even portable.

- More hacks than computer science history would have ever hoped for.

Say I run this command:

	$ cat file-list.txt
	/path/to/foo
	/other/path/to/bar

Now I want to see what's in _foo_.  How do I do that?

1. Either I mouse-select the file, hoping I'll not be off-by-one on one side.
Then I paste to the prompt.

2. Or I type the path myself, with a bit of luck completion will bring me there
soon enough.

All this is terribly backwards and it is high time we moved on.


# Terminals vs. shells

It's important to understand that shells are not (or should not be) semantically
bound to terminal emulator restrictions.  Shells are a textual interface to the
machine.  They just need _input, evaluation, execution, output_.
GTK/Qt/Tk/etc. are absolutely capable of handling such a task.  Not mentioning
Emacs...

So why do shells _de facto_ need a terminal?  One thing: curses-like interfaces.
Those libraries need terminal capabilities to render.  Do we still really need that?

- It's most limited in terms of UX.  Mouse selection simply won't do.

- It's not beautiful.

- It cannot render anything beside text.

- ""It works on low-end systems"": there is not much hardware out there that
cannot take Wayland or X.  Anyways, my case is about desktop computers.

- It's not even fast: in fact terminals can be pretty slow at rendering.
(Emulators also emulate the baud-rate.)

- Since it's character-based, it cannot render big fonts nor thin lines.

- ""Efficiency on remote systems"": that's almost a fair statement. But then...
  TRAMP! ;)


# Enter Eshell

Back to my initial example of the long-running process: want to copy that output
somewhere?  3 key-strokes with Eshell.  And better: could be even 1 if you want
to program it your way.  The _interface_ is extensible.  (Terminals usually
aren't, URxvt and its Perl scripts are not a proud example of _extensibility_.)

Eshell breaks up with the ""terminal-interface"" paradigm: the UI of the Eshell
_commandline-interface_ is Emacs itself.  The pager is the Emacs buffer.  The
input is Emacs keystrokes.  The extension language is Elisp.  Consequences:

- No need for pagers like less.  You won't ever re-run a long-output command by
  appending `| less` to it.

- Little need for output filtering (the `sed`, `grep`, `awk` black-magic):
output the result to an Emacs buffer, use some Lisp functions, use Evil ex
commands, iedit, helm-moccur or multiple-cursors...

- Eshell supports TRAMP!  Which means you don't have to put aside your powerful
environment when switching to root or connecting to a remote host: all the power
of _your_ Emacs can be used anywhere, the shell included.

- Find file/URL at point.  Or list them all with Ivy/Helm and fuzzy-search them!

- No need for [fzf](http://github.com/junegunn/fzf).  ""Hey! `fzf` is awesome!""  I know, but even `fzf` cannot compete
with Emacs.

- At last, done with the clumsy bash and sh-inspired shell languages!  No more
nasty word-splitting, no more unexpected expansion.  You don't even need `calc`
or `bc` when you have Elisp or Emacs calc at hand.

- No need for half-implemented vi-bindings when you can have Evil to edit your
command-line.  (Some shells like [fish](http://fishshell.com) can call an editor to edit the
commandline.  Well, with Eshell it's one step less.)

- You can even edit the output directly!

- You can redirect output to several buffers(!), they don't even need to be
existing files.

- Eshell has loads of [fancy
features](https://www.masteringemacs.org/article/complete-guide-mastering-eshell)
for globbing, filtering, and editing.

- Programmable completion with `pcomplete`, which is arguably easier and yet
more powerful than its bash/zsh/fish counterparts.


# There is more to come

It's undeniable however that, as of Emacs 25.2, Eshell has numerous rough edges.
Quite a few bug reports have been sent on debbugs and it's getting better.

Eshell's parser has some bugs here and there.  It will most notably fail at
parsing some `sed` expressions.  Which does not matter so much because you don't
need `sed` when you have Emacs Lisp with all regexps functions you can think of,
coupled to fuzzy-matching.

(EDIT: This issue got fixed in Emacs 26: https://debbugs.gnu.org/db/29/29157.)

Eshell does not support input redirection, but again, it is far less relevant
when you have Emacs directly at hand.

Native completion is limited considering very little work was made.  The
community can help changing that.  In the meantime, I've implemented [a fallback to bash completion
as well as fish
completion](https://github.com/Ambrevar/emacs-fish-completion)
so that I can keep completing just as much as I could with bash or fish.

Need that curses-based program?  Get a (much more) powerful Emacs alternative:

- git (CLI), gitk, tig, etc. -> magit

- htop -> symon, proced, helm-top...

- abook -> org-contacts

- mutt -> mu4e, gnus

- ncdu -> dired-du

- cmus/moc -> EMMS

- newsbeuter -> Elfeed, gnus

- weechat, irssi -> ERC, etc.

- rtorrent, transmission-cli -> transmission.el

As opposed to their curses counterparts, Emacs alternatives share all those
features:

- Configure/extend in Lisp.

- (Fuzzy-)search the buffer.  Copy anything to the clipboard.

- No need to change the color theme, it's already using your Emacs theme.  No
need for dircolors, lesspipe, Xresources...

- Emacs bindings (Evil?).  All configurable.  No more painful context-switch
between Emacs-based and vi-based bindings.


# An open door to Emacs-Everywhere

Switching to Eshell marked a milestone for me: from then on I dropped all my
crufty curses-based programs and switched to much more powerful Emacs
alternatives.  To the point that I now use [Emacs as my window
manager](https://github.com/ch11ng/exwm).  Having a consistent environment well
glued together really empowers you.

Ironically, the environment is so powerful that I ended up not using any shell
so much anymore, only for a few commands here and there.  For which I use
Eshell, obviously.



Eshell might not be perfect (yet), a little beta perhaps, but this can only be
helped by a growing community: the more people join, the more feedback
developers get, the better it will become.  Hopefully this pamphlet will
help raise your curiosity, if not more esteem for this brilliant project.



## EDIT: Some more Eshell niceties with Helm

- `helm-find-files` has `M-e` to switch to Eshell in the currently browsed folder.  Bye bye, `cd`, hello fuzzy-browsing!

- The previous technique makes it very convenient to go up the hierarchy to some parent folder (`C-l` by default).  Seriously, bye bye, annoying little `cd ..`.

- Still with `helm-find-files`, `M-p` will trigger the ""cd history"", so you can fuzzy-find the history of your shell paths.
Make it persistent with `(add-to-list 'desktop-globals-to-save 'helm-ff-history))`.

- Use Helm as a menu for completion.  Awesome for completing big file names or packages!

- `helm-find-files` has `C-c i` (and `C-u C-c i`, etc.) to insert the selected relative/absolute file names at point, that is, in the commandline.  This sometimes proves more convenient than file completion.
",89,195,"Yes, Eshell is my main shell"
"I am excited to announce the release of Magit version 2.13, consisting of 166 commits since the last feature release two months ago.

More information can be found on my [blog](https://emacsair.me/2018/06/02/magit-2.13/) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.13.0.txt).

**Update:** For users who cannot update to Emacs 25 or 26, I have [added instructions](https://github.com/magit/magit/wiki/Pinning-Magit-to-Melpa-Stable) on how to pin Magit to Melpa-Stable.",21,191,Magit v2.13 released
"The year of Magit is over if we count the days since the crowdfunding campaign ended, but the year 2018 is not. I have gotten a lot done in the last 365 days, but many features outlined in the roadmap remain unfinished. [...]  I have therefore decided to extend the year of Magit until the end of 2018.

The full update is available [here](https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client/posts/2304233).",21,184,Extending the Year of Magit
"_UPDATE: I've [revised this article](https://ambrevar.bitbucket.io/emacs-everywhere) by taking the awesome community feedback into account.  Thank you all!_

----

For many years I refrained from using Emacs everywhere because I clung to the
following Unix philosophical principle: ""Make each program do one thing well.""
It did not make sense to me then to use a text editor as an e-mail client or a
music library manager.  I used to favour well-established ncurses programs like
Mutt and cmus respectively.

When I started using Eshell as my main shell, the benefits of the Emacs
_interface_ became increasingly obvious.  Maybe my initial reasoning was not
well founded after all.  Since then I successfully moved on to using this
user-interface-on-steroids everywhere.  Looking back, it feels like I had been
missing out and wasted my time for that many years.

This realization is what leads me to write a pamphlet on the matter as it seems
that many Emacs users follow the same reasoning and might miss out on the full
extent of Emacs power.
When I recently posted an argumentation over using [Eshell as a main
shell](https://www.reddit.com/r/emacs/duplicates/6y3q4k/yes_eshell_is_my_main_shell/),
I faced some skepticism when I deemed curses-like interfaces as backwards as
opposed to Emacs.  More generally, it seems that the popular stance is well
summed up in the following famous joke:

> Emacs is a great operating system, lacking only a decent editor.

While obviously sarcastic, it might be worth point out that no, Emacs' intent is
not to be an operating system.  That being said, it is true that Emacs is not
_only_ an editor.  From a broader perspective, it would be best described as
a _programmable, text-oriented user-interface_ (containing, among others, an
editor).

As such it is erroneous to discard Emacs special modes for the sole reason that
an editor should not do anything but editing text.  If you think of Emacs as a
user interface, then it covers the same ground as Qt, GTK, Tk or _curses_ and
the Unix-philosophical argument falls flat.

Emacs might not suit everybody's needs everywhere, although I believe that more
often than not it will.  Hopefully the insights of this pamphlet will add enough
fuel to the fire to help nuance the various views held by the community.



## Emacs vs. the others

The power features Emacs offers and that are lacking in other ""common""
interfaces (GTK, Qt, Tk, EFL, cocoa, curses, etc.) include:

- Everything is text, everything is searchable and copy-able.  Even better, you
can fuzzy-search anything.  Enter Helm, Ivy and others.

- It can be fully keyboard-controlled (not very common with GTK and friends),
while mouse controls are supported too (which sucks in ncurses).

- It works both in graphical and textual environments, mostly out-of-the-box.
Nevertheless you should prefer the less limited graphical Emacs: all keyboard
modifiers are supported, various font sizes can be displayed, and... pictures!

- Configuration is done in Emacs Lisp.  Which is the best language ever, as [we
all know](http://www.paulgraham.com/avg.html).  At least when it comes to
[extensibility](https://www.gnu.org/software/emacs/emacs-paper.html).  And even
if you don't agree with that, it sucks less than most of its competitors.

- Configuration, as a consequence of being Lisp, can be tracked by version
control systems.



## What Emacs really does

Now let's move on to the core of the question: Is it wise to have _everything_
run from within Emacs?

A common misconception when thinking of ""Emacs as an OS"" is to assume that Emacs
special modes are re-inventing the wheel.  They are not (for most of them),
Emacs and its modes focus on the _user interface_ side of things.  The backends
are almost always separate programs.  This is precisely where the Unix
philosophy still stand strong.  Using Emacs as an interface for everything is
merely equivalent to using GTK-only applications.  (Only much better,
obviously.)

As opposed to other user interfaces Emacs is a _programmable_ environment: any
structure, interface element and even code can be passed around and combined
between the different interfaces to various programs.  Consider those canonical
features:

- Buffers

- The kill-ring

- The ""undo"" command (or better: undo-tree)

- Bookmarks

- Windows

- Abbreviations if that's your thing

- Snippets if that's your thing

- Completion

- Spell checking

All of them can be applied to (when it makes sense):

- Magit

- Gnus, mu4e, whatever e-mail client you prefer

- Dired, Helm-find-files

- Elfeed, Gnus again

- EMMS

- Org-mode (notes, agenda, contacts, publishing...)

And many more.

Emacs does not lure developers into reinventing the wheel, quite the opposite:
it shines at reusing and combining features in the most unexpected ways.



## The perks of Emacs as a user interface

There is more to it:

- Since Emacs can display pictures: EMMS can display album covers, e-mails can
display inline attachments.

- Configuration consistency: Bindings, color themes and other interface elements
are consistently shared across the various special modes.  No need to waste time
_syncing the different configuration files of your different programs_ (in
different configuration languages).

- Configure, extend, fix: With Emacs, everything is configurable, even what was
not foreseen by its developers.  All the Lisp source code is available at hand.
Want to add a feature?  It's usually as simple as adding a few Elisp lines to
the configuration.  Something is broken?  After reporting it upstream, you don't
have to wait for the next release, you can hot-patch the bug from your
configuration.

- Universality.  Emacs is somewhat easy to compile.  It runs on virtually all
desktop platforms you could think of.  As such, running everything from Emacs
effectively abstracts away the OS user interface, which makes it possible to use
your personal configuration on any system.  This is especially useful when you
are forced to a famous crappy OS.

- OS-independent package manager: This provides the user with cutting-edge
packages even on (rusty) conservative distributions or when the user has no
privileges.

- Flatter learning-curve of new programs: Emacs documentation system is (more or
less) consistently used among all Emacs modes, which makes the learning process
of a new mode somewhat easier.  No need to figure out where the static
documentation is (HTML page? man page?), Emacs lets you (fuzzy-)search the
configuration variables and the bindings.

- Lightweight, efficient: When I replaced all my super-lightweight _curses_
programs with their Emacs counterparts, I did not notice a significant change in
disk usage.  With the difference that ELPA packages have both the source code
and the byte-compiled files installed.  For programmers and tinkerers, having
source code at hand is a boon.  In terms of performance, graphical Emacs is not
limited by the restrictions born by terminal emulators and inflicted upon
_curses_ programs.



## Side effects and other niceties

- If you use Eshell, you don't need that lengthy, clunky bash/zsh/fish
configuration anymore.

- Other cumbersome configurations can go: `dircolors`, `lesspipe`,
`Xresources`... Even `fzf` can be disposed of.

- No need to duplicate your dotfiles for the root user or on remote machines:
use TRAMP!



## EXWM to rule them all

EXWM was for me the last milestone in the course of The Big Shift to a fully
Emacs-based environment.

I've been an avid user of AwesomeWM for years, but with time I grew tired of
""losing windows"" among the excess of tags or screens.  I wish I could have just
fuzzy-searched them with `fzf` or something similar.  I never managed to
implement the idea.  Until I discovered EXWM.

EXWM has all the benefits of being Emacs-based.  Which includes the ability to
fuzzy-select windows with Helm!  ""Lost windows"" belong to the past.  When
opening several windows at once, you can configure how to display them.  (This
is a [recent addition to
Helm](https://github.com/emacs-helm/helm/commit/a66849bfc008bc0082b0a97caa3ac75652f0a8ad).)
A nice use-case is to first narrow down some windows using Helm patterns,
display them all in an Exposé fashion, and finally select your desired windows
visually.

Since the window management is extensible, you can write your own
`helm-window-show-buffers-function` to fine-tune your needs: always display the
compile buffer at the same spot, behave differently depending on the number of
buffers or depending on the content or the modes, etc.  It is so convenient to
bring up windows all at once with EXWM+Helm that I've quit using workspaces
(a.k.a. tags) altogether in favour of a more global approach.

Maybe one the most noticeable benefit on a daily basis is that it lifts up some
weight off the _cognitive burden_ of having to manage windows both from Emacs
and from an external window manager.  With EXWM, there is no more need to
remember two sets of bindings and windowing rules, the windowing being
effectively fully centralized.  For instance I used to reserve the `super` key
for all windowing bindings with AwesomeWM; now I reserve it to all Emacs
windowing operations, and there is no need for other bindings.

Adepts of the suckless philosophy would argue that Emacs should leave all
windowing, including its own, to an external specialized program, the window
manager.  But from the perspective that Emacs is a user interface, it is not
that much of a heresy to consider that Emacs is precisely _that window manager_.

Having Emacs as a window manager has some additional benefits, namely that it is
fully aware of the content of the Emacs buffer, which allows for specializing
windowing actions depending of the different buffers.  This is much harder to do
with any other window manager.



## From rusty programs to Emacs

Here follows the list of applications I've personally transited from.

- Abook: Org-contacts (and maybe BBDBv3 when it's done)

- Ranger, vifm, fzf: dired, helm-find-files

- fzf: Helm, Ivy

- Xterm, URxvt: `M-x shell`, `M-x term`

- Bash, Zsh, Fish: Eshell

- Mutt: Gnus, mu4e, many more.

- cmus, moc: EMMS

- Zathura, apvlv: PDF-tools

- AwesomeWM, i3, etc.: EXWM

- rtorrent, transmission: transmission.el

- xclip, xsel: Emacs (graphical)

- ncdu: dired-du

- dhex, etc.: nhexl-mode

- bc, calc: `M-x calc`, Elisp

- newsbeuter: Elfeed, Gnus

- trash-cli: `(setq delete-by-moving-to-trash t)`

- ncftp, curlftpfs: TRAMP

- taskwarrior, etc.: Org-mode

- Spreadsheet software: Org-mode (!)

- gitk, etc.: Magit

- w3m, lynx, elinks: Eww


Hell, Emacs even replaces my web browser for some of the websites I use most:

- Emacs bugs: debbugs

- MediaWiki-based pages: mediawiki-mode

- StackExchange pages: sx

And reddit is still missing... :)


### EDIT

Another perk of using Emacs as everything is the ""global state"" of all Emacs special modes.  Say you want to switch transmission to turtle mode, there is no need to switch to transmission first, you can invoke the command or its associated binding directly, regardless of the buffers curretly under focus.  Same goes for music with EMMS, or anything else running in the background.",110,188,Emacs Everywhere
"I am excited to announce the release of Magit version 2.11, consisting of 303 commits since the last feature release six months ago.

More information can be found on my [blog](https://emacsair.me/2017/09/13/magit-2.11) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.11.0.txt).

---

I am currently running a fundraising [campaign on Kickstarter](https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client?ref=cbb3sz). If it succeeds, then I can work on Magit full-time for a whole year. I am still overflowing with ideas, and depend on your support to realize them.

I would love to work on Magit for at least another year and think that its users would miss out on a lot of significant improvements if I were unable to do so. Magit and I are at a crossroad — either I can intensive my efforts or I have to give up bringing the long time goals to completion that I have been working toward for the past few years.

Magit is still far from fulfilling its potential and now I need your help to get it there. If you haven't done so yet, then please [visit the campaign](https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client?ref=cbb3sz) to learn more about the planned improvements and please consider to make a contribution.

Thanks for your support!
Jonas Bernoulli

",23,187,Magit v2.11 released
,30,187,Why You Should Buy Into the Emacs Platform
"I am excited that I can finally announce the first beta release of Forge!

* https://emacsair.me/2018/12/19/forge-0.1/
* https://github.com/magit/forge",50,183,Work with Git forges from the comfort of Magit
,20,179,Today was my last day at work. My coworkers got me a cake
,35,174,"Had a great time playing with Emacs Lisp, building a sidebar to manage org notes"
,63,176,"Finally, a decent method outline for my Emacs (ECB)"
,7,170,Magit's maintainer is running a crowdfunding campaign
,44,169,"I'm pleased to announce that my ebook, Mastering Emacs, is now out!"
,29,171,"I must have Emacs on everything, even my smartwatch"
,31,167,nov.el - Major mode for reading EPUBs in Emacs
,9,167,M-Ret Compulsive behaviours M-Ret M-Right
,1,165,A walk through the Magit interface
"I am excited to announce the release of Magit version 2.10, consisting of 85 commits since the last feature release one month ago.

More information can be found on my [blog](https://emacsair.me/2017/01/04/magit-2.10) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.10.0.txt).",26,165,Magit v2.10 released
,10,165,Happy holidays! Not sure if the naming of my offspring was serendipity or some kind of subconscious homage to my favorite piece of software of all time... 🤔
"I am excited to announce the release of Magit version 2.9, consisting of 250 commits since the last feature release 15 weeks ago.

More information can be found on my [blog](https://emacsair.me/2016/12/07/magit-2.9) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.9.0.txt).",22,163,Magit v2.9 released
"I am excited to announce the release of Magit version 2.8, consisting of 124 commits since the last feature release three months ago.

More information can be found on my [blog](https://emacsair.me/2016/08/21/magit-2.8) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.8.0.txt).",17,164,Magit v2.8 released
"I was trying to make a table of quiz bowl question distribution from [this page](https://www.naqt.com/hs/distribution.jsp), specifically the table.

I Google whether there's a specific function for exporting html tables to org-mode tables, but nothing super good pops up. I just decide ""ehh, let's just do it"" and copy the plain text, hoping to perhaps use some keyboard macros or something to format it correctly. That would probably have taken me 10 minutes.

I copy-paste [this text](https://pastebin.com/pWNn3BzF) into Emacs. Here's the beginning of it (it's kinda long):

    Literature 	93 	50 / 48 	4.2 / 4.0
         Religious Literature 	5 	3 / 3 	0.2 / 0.2
             Christian Literature 	1 	2 / 1 	0.2 / 0.1
             Non Christian Literature 	1 	1 / 2 	0.1 / 0.2
         English Literature 	56 	31 / 30 	2.6 / 2.5
             American Literature 	50 	16 / 15 	1.3 / 1.2
             British Literature 	50 	15 / 15 	1.2 / 1.2
         Non English Literature 	21 	12 / 11 	1.0 / 0.9
             European Literature 	16 	9 / 9 	0.8 / 0.8
             World Literature 	5 	3 / 2 	0.2 / 0.2
         Young Reader Literature 	3 	2 / 2 	0.2 / 0.2
         Any Literature 	5 	2 / 2 	0.2 / 0.2

It seems to have an interesting tab-based structure, but at this point I'm giving up hope of doing this super quick. (This is where I think other editors would about stop.)

On a complete whim, I decide to scan through the helm completions for `org` and `table`: `M-x org table`. (This is one of the reasons I use helm: it's easy to discover new things.) At the very bottom, I see an Emacs command that's new to me: `org-table-create-or-convert-from-region`. It's bound to `C-c |`, so it must be somewhat useful, right? I select the table and execute the command, and *it works perfectly.* Everything is just lined up together exactly as I wanted it, in the columns I wanted them in, no hassle, aligned, everything.

I realize no one else probably cares about this, but I thought it was super cool and it completely blew my mind. That I would just find the perfect command for a pretty obscure, rare task just completely floors me.

Does anyone else have similar experiences with something?",117,159,How has Emacs ever really blown you away?
,48,160,New emacs website concept
,32,162,"Today, the Emacs development have a new maintainer!"
,22,157,Emacs and org-mode in the New Yorker
"Ten days ago I announced the release of v2.5 [here on reddit](https://www.reddit.com/r/emacs/comments/43eh4m/magit_v25_released). I have now also written a [proper release announcement](http://emacsair.me/2016/02/10/magit-2.5) on my blog.

That announcement talks about the significance of this release, which in this case has little to do with the actual changes. Instead I explain in a bit more detail what I meant when I said that I would be ""taking a break"".

**Update**: I have added some [new donation methods](http://magit.vc/donations.html) (Payoneer, Patreon, and Bountysource).

**Update: Thanks so much to everyone for the generous contributions and kind words. This means a lot to me. Thanks! Still need a break, but I'll be back.**",40,155,"End of an era? (Magit's maintainer is taking a ""break"")"
,29,150,When an emacs user lends their computer
,8,156,"I love Emacs. I wish all the apps I used were more like Emacs. I can't make that happen, but I can make the games I'm developing be more like Emacs with this: Minibuffer Console"
,66,152,use-package.el about to be moved to Emacs core
,21,153,Orgzly is open source now!
,47,153,Buttery Smooth Emacs
"In the next few hours we will be 25k subscribers. If I remember correctly when I joined 9 months ago we were 22k. Doesn't this trend surprise anyone? Btw, I am happy that more people are now using Emacs. :)

In a couple of presentations about Emacs, I heard tales about professional diversity of the Emacs community. If you don't mind, please share your profession and how Emacs fits into it.

I am a graduate student, and Emacs has been a boon for me! I use it for absolutely everything, organising my research, my life, data, articles, and what not. Tools I use and love: org-mode, org-ref, pdf-tools, magit.

I am working on the last step of being one with Emacs, trying to use it for email. And you people have helped a lot throughout -- thanks for that! May Emacs keep flourishing, and enriching our lives.",126,155,We are (almost) 25k strong on reddit
"Goodbye to Bob Chassell 
2017-07-05
By Bradley M Kuhn.
At http://www.fsf.org/blogs/community/goodbye-to-bob-chassell 
",7,154,"author of An introduction to Programming in Emacs Lisp, Robert Chassell died"
"I am excited to announce the release of Magit version 2.6, consisting of 77 commits since the last feature release two months ago.

More information can be found on my [blog](https://emacsair.me/2016/03/29/magit-2.6) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.6.0.txt).

I should also mention that no key bindings were harmed in the making of this release ;-)",30,151,Magit v2.6 released
"TL;DR: Read Key Bindings Convention, stop worrying about complexity of
Emacs bindings, and (hopefully) consider the possibility that it might
actually be easy to remember, efficient, and requires less typing.

-------------------------------------------------------------------

There's a myth that Emacs has lengthy and incomprehensible
keybindings. There're countless jokes and comics on this. Good laughs
indeed, but at the end of day, it's *not* incomprehensible. It has
well-defined conventions listed at:

[Emacs Key Bindings
Convention](https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html)

In summary, the general rules are: 
1. `C-x` reserved for Emacs native essential keybindings: buffer,
   window, frame, file, directory, etc...
2. `C-c` reserved for user and major mode:
   - `C-c letter` reserved for user. `<F5>-<F9>` reserved for user.
   - `C-c C-letter` reserved for major mode.
3. Don't rebind `C-g`, `C-h` and `ESC`.

[Flow Chart](https://yiufung.net/ox-hugo/emacs-mindmap.png)

That's mostly it. 

While I started learning Emacs, I had this similar misconception, so without
a second thought, I chose to go with vim-bindings, which I used for 6
years, with Spacemacs. It's surely a great project, opening up all the
goodies of Emacs to a vimmer. The mnemonics system is quite effective too, at 
least at the very beginning. However, over time I found that:

1. Mnemonics requires more key presses: `SPC f f` (3) vs `C-x C-f` (2
   keys, or 2.5?), `SPC h d f` (4) vs `C-h f` (2). Most search-tools like ag, rgrep requires 4 key
   presses. This is 50%-100% difference! We didn't even count in the extra `ESC` to enter normal state. Mistype rate is higher as a
   result, and gets frustrating quickly.
2. Commands from various packages can be placed under same key prefix
   `SPC letter`, making it difficult to form an overall picture of
   what things each package does/can do, which is essential for
   customization in long term.
3. The consideration of how commands should be organized evolves over
   time, so user needs to adapt accordingly. (I personally recommend
   all Spacemacs friends to watch [Spacemacs ABC
   Series](https://www.youtube.com/watch?v`ZFV5EqpZ6_s), it's
   gorgeous, but recorded 3 years ago, many keybindings have changed
   since).

These problems gave me a headache, urging me to write my own config. I
could have tried evil-mode, but having seen too many evil-mode-related compatibility
issues in Spacemacs project, I did not think my poor Elisp skills can
support me through the extra mess added on top of writing a config
from scratch. So the dilemma in front of me is: continue with
Spacemacs mnemonics, or go with Emacs native bindings? I feel lucky
now that I chose to give Emacs binding a try.

At first it seemed difficult, but after I read the convention, I
learned how to focus on the important parts when reading Emacs
bindings. For example, in `org-mode`, the command `org-insert-link` is
bind to `C-c C-l`. At first sight it seems complex: I need to remember
to press `Control` (""not `Alt`""), and keep it pressed, and pressed `l`
again... but the idea is actually short:
1. I'm trying to call a major-mode specific command (`org-*`), so I
   should press `C-c` first.
2. Major-mode commands should use `C-letter`.
3. (Same-old) mnemonics: `l`ink!

Then the only thing I need to remember is actually just: `l`. A much
more succinct mindmap, isn't it? Longer bindings are no more
daunting. For example, in ESS (mode for statistical languages such as
R, Stata), `ess-load-library` is bound to `C-c C-e C-l`. Seems long,
but all it says is just 2 keys with mnemonic: `l(oad)` under `e(xtra)`
in major-mode!

Of course there're exceptions: in the above example, the companion
command for `org-insert-link` is `org-store-link`, which is
[suggested to bind to `C-c
l`](https://orgmode.org/manual/Activation.html#Activation), occupying
one of my customized binding space. But now at least 1) I know why
it's not bound by default, and why it suggests this binding; 2) I know
I have the freedom to bind to other keys. 

Hope these are useful for new Emacs users, or
Vimmers/Spacemacsers who had never tried Emacs native key bindings. I
like to perceive the process of learning keybindings as acquainting
oneself with the layout of a toolbox: Calling a command is like
knowing where your tool lies in the box, and a clear layout improves
productivity vastly. Native Emacs bindings is the layout designed by
the toolbox creator(s). It's actually comprehensible and
reasonable. It's mnemonic at many aspects. Its `C-c` bindings for major-mode,
isn't it just the same idea of Spacemacs major-mode leader key `,`? It's discoverable too, as all
commands come with the same prefix now, one can dig really deep
into a single package, know what's being offered, and make the most of
it. Give it a go!

One last thank you note for this subreddit. I started with Spacemacs 9
months ago, wrote my personalized init file 5 months ago, and nowadays
I'm using Emacs every day. It has completely changed my ideas about
programming/writing. Actually, I wouldn't hesitate to say that Emacs
is the best thing I learnt in 2018, and a lot of it I learn from
here. Thanks!

------------------------------------------------------------------

EDIT: Fix errors on key reservation

EDIT: Added a chart, and extended the post in my [blog](https://yiufung.net/post/emacs-key-binding-conventions-and-why-you-should-try-it/)",63,151,Emacs Key Binding Conventions (and why you should try it)
"Dear fellow Emacs users,

I'm very happy to introduce PeachMelpa.org to everyone, living at [http://peach-melpa.org/](http://peach-melpa.org/).

Peach Melpa is a showcase for all themes hosted on MELPA. I did it relatively quickly using Rails and some dreadful Lisp code (I'd never done Lisp before) but it eventually managed to do the very simple task of grabbing every theme on MELPA (with the very simple: ""does the name end with -theme?"" heuristic), screenshooting itself then uploading it to S3.

I will upload the code tomorrow on GitHub as it's a bit late here in London and I can't afford the effort to log back into my non-work account, but I'll definitely request some help tomorrow and get feedback.

It's definitely not fully ready yet, and I'll keep you posted on the progress in the roadmap, namely:

- an actual styling (not convinced about what I did);
- other languages than JS;
- other fonts;
- some gentle analytics, maybe;
- user-input code;
- some sort of download count or other popularity metric;
- a link to my [Liberapay profile](https://en.liberapay.com/freesteph/)!

I hope you all like it and I'm sorry if the servers crash overnight.

EDIT: the code is now live at: https://github.com/freesteph/peach-melpa.org! I'll do a follow up post with some of the code bits I'm struggling bit but please have a look in the meantime.",52,149,Announcing Peach-Melpa.org
,8,147,xkcd: Workflow
,15,150,Guide to config Emacs from scratch
,89,151,Making music in Emacs
,23,150,Abo-abo hasn't gone a day without committing to GitHub in over 3 years
,42,151,I'm pleased to announce the Mastering Emacs eBook :)
,71,144,"Apple finally weighs in on the Vim vs. Emacs debate. Chooses Emacs, removes the escape key."
,15,144,My custom emacs hoodie print just came!
,21,141,Three cheers for Eli!
"So yeah, Emacs has displaced Asana, Evernote, Thunderbird, ikiwiki, and Slack.  I have a whole [series of blog posts about Emacs](https://changelog.complete.org/archives/tag/emacs2018) talking about how this happened and how to move over.  They are:

* [Emacs #1: Ditching a bunch of stuff and moving to Emacs and org-mode](https://changelog.complete.org/archives/9861-emacs-1-ditching-a-bunch-of-stuff-and-moving-to-emacs-and-org-mode), talking about Carsten Dominik's excellent org-mode talk, how org-mode integrates with things, a basic emacsclient setup, etc.
* [Emacs #2: Introducing org-mode](https://changelog.complete.org/archives/9865-emacs-2-introducing-org-mode) makes an attempt at describing what org-mode is (this is surprisingly difficult to summarize), gives some basics on getting started, how capturing works, some basics on agendas and refiling, and some configuration tidbits
* [Emacs #3: More on org-mode](https://changelog.complete.org/archives/9877-emacs-3-more-on-org-mode) talks about TODO-tracking in org-mode, with more details on agendas, schedules, and deadlines; tags; etc.
* [Emacs #4: Automated emails to org-mode and org-mode syncing](https://changelog.complete.org/archives/9898-emacs-4-automated-emails-to-org-mode-and-org-mode-syncing) presents my script for letting you email things directly into org-mode, and a method of syncing your org-mode files between systems using git-remote-gcrypt with some elisp glue.
* [Emacs #5: Documents and Presentations with org-mode](https://changelog.complete.org/archives/9900-emacs-5-documents-and-presentations-with-org-mode) talks about exporting, and is itself a blog post, set of slides, and PDF document all generated from a single org-mode source (which is linked to in the article).

On my agenda yet to write about: mu4e, ERC, weechat.el, and bbdb.",90,144,"Emacs integrates all the things (almost): After a decade of vim, I'm hooked on Emacs. Here's how org-mode pulled me over"
"I like using Emacs. However, at my latest job I was stuck with having to code in Java. I attempted to use eclim to edit things, but it was incredibly slow for most operations, and support was recently removed for Windows. After having to rebuild the Eclipse workspace for the 10th time, I ended up moving to IntelliJ IDEA for productive work. But then, I wondered if there was a similar server thing for IDEA. So I looked around, and found the [intellivim](https://github.com/dhleong/intellivim) project, which was that exactly, except it only supported Vim through a custom protocol. So, itching to be able to work with my preferred editor, I decided to use the intellivim code as a base (hope the author doesn't mind) and refactor it to conform to the [Language Server Protocol](https://langserver.org/) specification. A bit later, here are the work-in-progress results.

[Code completion with snippet parameters](https://sub.god.jp/f/pbgioc.webm)

[Symbol usage highlighting](https://sub.god.jp/f/nieypg.png)

[Find usages](https://sub.god.jp/f/gcaeao.webm)

[Go to definition](https://sub.god.jp/f/burahl.webm)

[Go to implementation](https://sub.god.jp/f/piblli.webm)

Of course it breaks a lot, but it's still alpha quality. I hope to get as much of the spec working reasonably as possible, and to get to a point where every important action in IDEA can be executed remotely. Here is the repo:

https://github.com/Ruin0x11/intellij-lsp-server

The client code is included in the root as *lsp-intellij.el*. Check it out if you're interested.",32,143,intellij-lsp-server: Exposes IntelliJ IDEA features to Emacs through the Language Server Protocol
,41,144,"/u/eli-zaretskii: ""Emacs 26 is nearing its release; the stream of serious bugs (or any bugs, actually) seems to have died out. So hopefully one more pretest, and we will be ready to go."""
,43,144,Emacs 24.4 released
,11,142,My baby girl has good taste for books!
,22,139,"GNU Guile 2.2.0 released - ""Guile's Elisp implementation is now fully Emacs-compatible"""
,38,140,Org 9.0 released
,29,135,NES emulator written in ELisp
"_Update: This initiative was merged with evil-integration into a new repository, [evil-collection](https://github.com/jojojames/evil-collection).  Stay tuned there :)_

--------

The [Evil](https://github.com/emacs-evil) mode is widely considered the best Vim
emulation layer out there to the extent that ""Evil is Emacs true editor"" has
become a recurrent joke.

And yet, despite its tremendous success, many Vim users and other modal-editing
enthusiasts refrain from switching to it for the sake of one major hindrance:
that Evil bindings are not ubiquitous within Emacs and that too many special
modes will require a ""binding context switch"" that can be disconcerting, if not
a frustrating cognitive burden.

The solution is obvious: write bindings for all the modes that require it.
That is, all the Emacs vanilla modes, but also all the third-party, community
supported packages.

Facing the Herculean proportions of this task, no wonder that we haven't seen it
happening in years.  And yet this is too bad.

For too many of us, Evil users, the ""binding context switch"" is a daily pain in
the hands.  If you've felt among the brave ones, maybe you've rolled up your
sleeves and derived some approximate, mildly inconsistent bindings of your own.
For countless hours of frustration.

Writings bindings, at least consistent ones, _is hard_.

Last but not least, this might be the last milestone before many Vim
wannabe-converts actually make the final move to join the ranks of the Emacs
community :)

Enough pain.

I believe it's high time we started a community movement and joined forces to
face the current situation.  Let's review the task at hand:

- Define guidelines to enforce bindings as consistent as possible across a wide
variety of modes.

- Write bindings for the ""rest of vanilla Emacs"" that is not covered yet.  Since
Emacs, despite its huge size, features a limited number (understand ""finite"") of
special modes and that most of those are rather simple (think `package-menu`),
this is very feasible.  This would also be a good starting point as a reference
for the guidelines.

- Create Evil binding sets for all the popular third-party packages out there.
(I know that's crazy.)

I've decided to start tackling the issue of vanilla Emacs: https://github.com/Ambrevar/evil-special-modes.
Modes that are mostly covered so far:

- Calendar

- Customize

- Debugger

- Diff-mode

- Eshell

- Help

- Image-mode

- Info

- Man

- Outline

- Package

- Profiler

- Term

- Woman

- And the all-star special: the minibuffer! :)

Regarding the third-party packages, a few Evil modes are already out there, most
famously Evil-Magit, Evil-Ediff and Evil-Org / Org-Evil.  I've already drafted
some key-bindings for, among others, Debbugs, Elfeed, EMMS, Helm, Transmission.
Hopefully with the growing effort the word will spread and further encourage the
development of more and more binding sets.

I would like to call upon the help of the community to refine the Evil
guidelines.  I've started laying down a draft together with the special mode
bindings at https://github.com/Ambrevar/evil-special-modes.  You are all invited
to test the package, review the rationale and post some feedback, it would be
very much appreciated!

Thank you very much!

Evil demons, at your keyboards!",36,135,Evil Everywhere: The rest of Emacs
,29,137,Lisp Machines
,82,137,RMS supports Language Server Protocol integration into Emacs core
,15,136,"I can finally preview LaTeX in org-mode! Took me quite some while to get it because I had the wrong TeX installed, but I'm satisfied!"
,32,136,Emacs Rocks! Episode 17: Magit
"I would like to ask the Emacs' Subreddit to help me with an important problem.

But first a boring history less---feel free to skip this.  GNU Emacs has been my editor of choice all the way since 1993, when I began programming at the age of eight (I still have an O'Reily guide for GNU Emacs 19, heh).  Even though I grew up using Windows, I learned all of my fundamentals about computer programming using GNU tools ported to DOS by the great DJGPP project.  Bash was my first shell, GCC my first compiler, GNU AWK my first *""I'll surely never need this damned thing"" program, and so on.

In late 2010 I got my first professional programming job in the field of web development, primarily working on the behind-the-scenes code that users never see unless something breaks.  For a cornucopia of reasons those projects involved use the PHP language.  At the time a new version of PHP was on the horizon with some important changes.  No one had updated the exsting PHP Mode project since 2004.  So I took it upon myself to patch in some changes to facilitate more modern PHP practices and made it available on [the GitHub project page](https://github.com/ejmr/php-mode).  To my absolute surprise, my changes became the ""definitive"" version with regard to package managers and repositories like MELPA; even the original mode author Turadg Aleahmad emailed me with his person approval and handed me the password and credentials to the original SourceForge site.

For exactly six years *to the day* I have maintained PHP Mode,  although not alone.  The frequently contributor and great programmer Syohei ""syohex"" Yoshida has been a fantastic co-maintainer the past three years, helping me whenever I have been unable to give PHP Mode the full attention it needs; in fact, I use more packages by Yoshida and /u/abo-abo more than I do those of any other people.

But it is time for someone to replace me.  I believe the co-maintainer system works well, and more importantly, I do not want to suddenly ditch the project and leave Yoshida abruptly stuck with PHP Mode.  Nor do I want work on PHP Mode to grind to a halt.  However, I am suffering from serious kidney failure.  I just turned thirty-three years old in May, but even with dialysis, without a transplant and multiple surgeries I will only live two or three more years.  I may still sometimes work on PHP Mode, but I honestly doubt it.  So I am please asking anyone with any interest to consider taking my position on the project, and if you have a GitHub account I will be glad to give you full permissions for the repository instead of forcing package repositories to update their links, among other things.

Thank you for your time reading this.

`        -- ejmr`

**Edit 1:** [A place to start talking for people who'd like to take over my co-maintainership.](https://github.com/ejmr/php-mode/issues/365)

**Edit 2:** Thank you so much for all of the care and compassion and well wishes.  I know almost none of you in real life, so the outpouring of support demonstrates how truly wonderful the Emacs community is.  Despite the fact I will very likely die around age thiry-five (2020-ish), I feel like my life as a computer programmer has been more than worth it, even if it is cut short.  And a big reason for that feeling is all thanks to all of you.  This thread has motivated me to continue programming until I just physically cannot lift a finger.  And I apologize if this all sounds over-dramatic to you or if it sounds like I am seeking sympathy, because that is far, far from the truth.  I only want to make it clear that working *for* the Emacs community and *with* the Emacs community is the motivation that keeps me writing code despite all the odds.  So again, I cannot thank you all enough.  I will do my best to leave GNU Emacs in a better state than when I started using it, improving it by any means possible.  Because that is what you all deserve for the way you've treated me kindly.",38,131,Request: The Future of PHP Mode (TL;DR Near Bottom)
,2,133,Reading for Programmers
,36,133,Emacs X Window Manager
I recently bought an xps13 to replace my x220. I knew the keyboard was going to be a serious downgrade but one thing I wasn't expecting was how terrible it is to press the control key. My pinky naturally presses the fn key on the keyboard instead of the control. It was so bad I ended up changing capslock to control. This ended up being a lot more comfortable but it's definitely got a learning curve.This got me wondering. How many of us use capslock as control?,120,135,How many of us us Capslock as Control?
"I am excited to announce the release of Magit version 2.7, consisting of 116 commits since the last feature release seven weeks ago.

More information can be found on my [blog](https://emacsair.me/2016/05/19/magit-2.7) and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.7.0.txt).",14,135,Magit v2.7 released
,79,132,Emacs pretest 26.1 RC1 is out
"I saw /u/djolereject's [post](https://www.reddit.com/r/emacs/comments/a4bjtc/capture_loop/) about fitness tracking in Org, and I decided it was time to publish an old project of mine. Here is an Org fitness/food/weight tracker I put together a few years ago.

https://gist.github.com/alphapapa/982467abc1bf29f57c5cd2c408a77bd5

**Screenshots**: [1](https://i.imgur.com/8RfN6av.png), [2](https://i.imgur.com/kIdqGmR.png), [3](https://i.imgur.com/VgHsLzB.png), [food summary for day in echo area and hydra](https://i.imgur.com/S9CfNOn.png), [animation showing data entry with Helm](https://i.imgur.com/jHRPugb.gif), [animation showing navigation with Helm and a report (pressing C-j to preview sections, RET to go to them)](https://i.imgur.com/UVkRUEA.gif)

I haven't used it for a while, but it was very useful, and it really worked to help me improve fitness and control weight, and even spend less money on food.  I modified some of the data to cut it down to size and make it seem more current.  (I should start using it again!)

It's all contained in a single file, and the only dependencies are some Python packages like `pandas` and `matplotlib` that you can install with `pip` outside of Emacs.

One of the most interesting things is that the plots showed the correlations between calorie intake and weight, training and weight, and training progress.

All data is stored in Org tables.  Helm is used to make capturing repetitive data very quick easy by selecting from existing items, and capturing new food or training items is easy as well by prompting for each field.  `C-c C-f` captures food data, and `C-c C-w` captures workout data.  Weight data is captured with Org capture using a [template](https://gist.github.com/alphapapa/982467abc1bf29f57c5cd2c408a77bd5#file-weight-capture-template-el).

Plotting is done with Python that's contained in Org source blocks, which are automatically tangled and executed with `C-c C-p`, or when new data is captured.

It's not super fast to generate the new plots, especially when the tables get big, because Org has to convert to Python data structures.  But it's fast enough for me, and it's very useful, powerful, and customizable.

Some data is calculated automatically, like calorie targets, based on age, height, weight, activity level, etc.  See the `Config` section of the file.

There are also reports generated in the Org file showing optimal days, food items sorted by calorie, protein, etc.

Navigation through the file is very fast using `C-l`, which calls `helm-org-in-buffer-headings`.  Make sure to enable `helm-org-format-outline-path` for best results.

I can't provide much support for using this, but it may be useful to someone, and it may be a starting point for designing one's own system.  Ideally some of the code would be factored out into code files in a repo, but it's also a cool demonstration of a self-contained interactive Emacs ""app"" in a single Org file.

By the way, I must mention the amazing [emacs-gif-screencast](https://gitlab.com/ambrevar/emacs-gif-screencast) package.  It made recording the animations **so easy**.  /u/ambrevar did an **amazing** job on it!",14,133,"fitness.org: An Emacs food/weight/workout tracker, self-contained in a single Org file"
,8,134,Introduction to eshell by Howard Abrams (42 mins video)
"[Link to repository](https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs)

The readme is quite thourough, you'll find screenshots, both a short and a detailed feature list, all config options, the entire keymap, and near drag-and-drop installation instructions (yes, it's on MELPA).

I am also working on a spacemacs layer that will replace the default neotree, though it's not done yet. It's being discussed [here](https://github.com/syl20bnr/spacemacs/issues/9285). You can find the layer [here](https://github.com/Alexander-Miller/spacemacs/tree/treemacs-layer/layers/%2Btools/treemacs). If you want to test it adding my fork as a remote and cherry-picking the treemacs commit should do the trick.

A question that's likely going to be asked is support for multiple frames / perspectives: As of right now there's only one buffer that's shared everywhere. That'll change eventually, I'm currently engaged in retooling treemacs to make its buffers local to a frame, but it's a complex refactoring with many compatibility issues, so I cannot say when it'll be done. I've also plans to add workspaces as you know them from eclipse.

Then there's also the matter of icons: treemacs uses proper png images, so quantity is always an issue. If you have an icon I can use do let me know. I am using 22x22 px png images that must look reasonably nice with both dark and bright themes.

TL;DR GIMME FEEDBACK",45,134,Introducing Treemacs - a modern file & project explorer
,21,125,It's Magit! - John Weigley EmacsSF
,42,126,Emacs users outperform on coding interviews
"I am happy to announce that [Evil Collection](https://github.com/jojojames/evil-collection) has just been accepted on MELPA!

Evil Collection is a set of [Evil](https://github.com/emacs-evil/evil) bindings
(a Vim emulation layer for Emacs) targeting all the modes that are not covered
by default.

The incomplete coverage of Evil was the main critique that discouraged many Vim fans from using Emacs.
Hopefully this complaint now belongs to the past.

Although more than 60 modes and counting are supported, our work is not over
yet: some points in the rationale still need to be worked out, some modes are
missing.  Development is very active and lots of improvements are to be expected
in the near future.  Should you run into any issue or miss a mode in particular,
check the [issue tracker](https://github.com/jojojames/evil-collection/issues)
and let us know, all contributions are welcome!

I had announced the initiative [a little while
back](https://www.reddit.com/r/emacs/comments/7akqy3/evil_everywhere_the_rest_of_emacs/).
Special thanks go to /u/agsdot for bringing jojojames and me together on this
project.  Our efforts met good traction: hopefully the MELPA milestone
will make for a smooth experience to a wider audience.

Note that Evil Collection does not step on the territory that is already covered by independent packages, namely:

- [evil-ediff](https://github.com/emacs-evil/evil-ediff)
- [evil-magit](https://github.com/emacs-evil/evil-magit)
- [evil-mu4e](https://github.com/JorisE/evil-mu4e)
- [lispyville](https://github.com/noctuid/lispyville)
- Org-mode: https://github.com/GuiltyDolphin/org-evil or https://github.com/Somelauw/evil-org-mode

You'll have to install those separately for a complete Evil experience.
",43,131,Evil Collection has hit MELPA: Enjoy the full Vim experience!
,24,130,What's New in Emacs 25.1
"Emacs reserves C-c <letter> sequences for the end user to bind to whatever he wants to bind to.  If you're an end user and you want non-colliding space for your keybindings, this is what to use.  If you're a package author, please don't intrude into this space.

I've noticed a few pieces of software (the popular projectile package being a notable example, with `C-c p`) making use of this prefix.

Maybe the right answer is that there need to be reserved keybindings for third-party, cross-mode packages, but cutting into the few keybindings reserved for users seems to be a bad practice.

From the [emacs manual](https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html):

> Don’t define `C-c` *letter* as a key in Lisp programs. Sequences consisting of `C-c` and a letter (either upper or lower case) are reserved for users; they are the **only** sequences reserved for users, so do not block them.
>
> Changing all the Emacs major modes to respect this convention was a lot of work; abandoning this convention would make that work go to waste, and inconvenience users. Please comply with it. ",35,132,Reminder: please do not bind to C-c <letter> in emacs packages
"Hi everyone,

I have recently discovered MobileOrg but noticed it hasn't been supported for years now. So I have forked the repo https://github.com/matburt/mobileorg-android and started working on improving it. [Here is what it looks like for the time being.](http://i.imgur.com/4H2nm2p.png)  

&nbsp;


Here is the summary of the mechanics so far. The primary reason of this post is that I'd like some feedback about them. Most of them are not implemented yet but it's better having feedback before than after spending time coding it:

&nbsp;

* You can cycle-through visibility by clicking on one item: it will successively expand all descendants, expand only first-order children and fold all descendant. 
* If you click DONE, TODO or in the blank part where they should be, you'll have a popup box to change the state.  
* To insert an item from this window, I was thinking about implementing with long clicks: if you stay pressed on an item, 4 options are offered to the users. 2 options: Insert node before/after current node and at the same level + insert before at the previous node level + insert after at the next node level  
* You should also be able to move a node with a drag&drop action.  
* If you want to edit an item you need to swipe it to the left and it open a new window. I have to say, I am not a big fan of this mechanic but I can't see a better one. The newly opened window will have buttons for settings tags, TODO states, scheduled date and deadlines. There will be also textboxes to edit the title of the item and his content. And probably a button to insert sub-node. This window is still under construction but [here is my starting point](http://i.imgur.com/DjZotLv.png).

&nbsp;

That's all for the moment but I am eager to hear all the propositions that you might have for making MobileOrg great again.

PS: Oh and by the way, you can find my repo [here](https://github.com/wizmer/mobileorg-android)

PSS: Of course anyone willing to help is welcomed :D
",40,125,making MobileOrg great again
,62,127,Eric S. Raymond says “bzr is dying; Emacs needs to move”
"I just noticed that ESS recently merged a PR that added support for flymake. I thought that was kinda weird, since as far as I knew, flymake wasn't used very much since it had some pretty major limitations.

Well, to my delight, that seems to be no longer the case in Emacs 26! It got a major rewrite, here's the NEWS entry:

    Flymake has been completely redesigned
    
    Flymake now annotates arbitrary buffer regions, not just lines.  It
    supports arbitrary diagnostic types, not just errors and warnings (see
    variable 'flymake-diagnostic-types-alist').
    
    It also supports multiple simultaneous backends, meaning that you can
    check your buffer from different perspectives (see variable
    'flymake-diagnostic-functions').  Backends for Emacs Lisp mode are
    provided.
    
    The old Flymake behavior is preserved in the so-called ""legacy
    backend"", which has been updated to benefit from the new UI features.

I've been test driving it today in R-mode and it works just as well as flycheck does. Hopefully as more major modes add support, Emacs will have out-of-the box syntax checking for most languages!

Thanks very much Emacs devs! We appreciate all your hard work. Thanks especially João Távora who seems to be the person who did most of the flymake rewrite.

EDIT: This isn't meant to disparage flycheck at all, by the way. It's a great package, one that I've thoroughly enjoyed using for years. I'm just excited that we'll get this functionality out-of-the-box.",21,123,"Starting in Emacs 26, you might not need flycheck!"
,26,129,Emacs will be making the full switch to git as its version-control system on November 11th
,25,123,When the man himself hasn't finished studying his creation.
,18,121,Wooohooo Emacs Rocks! Episode 16: Dired
"A while ago I spent some time carefully figuring out how Emacs undo
works.  I decided to post this here; perhaps you might find it
interesting.

First, you should have a basic idea of how Emacs
[undo](https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html)
works.  When you edit a file, changes are placed on a undo list.  When
you undo, the state of the buffer is reverted according to the undo
list; however the undo itself is placed on the undo list, so you redo
by undoing again.  The advantage of this approach is that you will
never lose any state your buffer was in, and all states are available
via a linear undo (unlike undo-tree which requires navigating a
non-linear tree).

Unforunately, after many undos and undos of undos and undos of undos of
undos, it's quite easy to get your undo history into an interesting
mess, but once you understand exactly how it works, it's not so
bad (keep reading).

First, I will describe the rules governing undo.  Next I will walk
through an example of a complex undo change.  Finally, I will present
the state of the undo list for completeness.

If you read the manual, linked above, you will know that there are two
undo commands, `undo` and `undo-only`.  `undo-only` will only undo,
skipping undoing undos (redoing).

The rules:

- All changes, including undos, get added to the front of the undo
  chain.
- `undo` moves back one state along the undo chain.
- `undo-only` moves back one state along the temporal axis.
- `undo-only` always move backward along the temporal axis.
- `undo` moves in the opposite direction along the temporal axis as
  the change it is undoing.
  
I encourage you to follow along with the example.  Open up `*scratch*`
and bind `undo-only` to an easy to press key; you don't want to use
`M-x` for this.

First, insert some text

                A  B  C
     Insert! o--o--o--o
     
Each node represents a buffer state.  Each buffer state will be
labeled with a letter.  For convenience, type `a RET` to move to state
A.  The `RET` is an easy way to make Emacs set a break in the undo
chain; otherwise Emacs will group contiguous inserts into one ""state"".
Also, this state A is actually two states, the ""inserted a"" and
""inserted RET"" states.  In this example, each undo will actually be
two undos, one to undo the `RET` and one to undo the letter.

After following the above, your buffer should look like this:

    a
    b
    c

Next, undo twice:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 /
                o

You are now back at state A.  Note how the undo chain is presented
here.  The undos have been added to the end of the undo chain,
however, the chain is now going backward temporally.  We type some
more:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!

Still simple.  We keep going:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!
                     /
                    / F  G  H
          Insert!  o--o--o--o  Undo!
                           /
                          / I  J
                Insert!  o--o--o

It's getting complex now; we'll start calling `undo-only` now:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!
                     /
                    / F  G  H
          Insert!  o--o--o--o  Undo!
                           /
                          / I  J
                Insert!  o--o--o  undo-only
                              /
                      F  G   /
                      o--o--o
                         
Our first `undo-only` goes back one state to state I.  So far so good.
                         
Our second `undo-only` goes back one state to state G.  So far so good.
                         
Our third `undo-only` goes back three states to state F.  However, we
only went back only one state ""temporally"": we skipped all intervening
undo/redo pairs.

We keep going.

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!
                     /
                    / F  G  H
          Insert!  o--o--o--o  Undo!
                           /
                          / I  J
                Insert!  o--o--o  undo-only
                              /
                   D  F  G   /
                   o--o--o--o
                  /
                A/
                o

Now we're all the way back to state A.  With `undo`, we would have had
to traverse every single state (count them, there's a lot), but with
`undo-only`, it only took five.

Now for the final stretch.  We insert a few more fresh states:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!
                     /
                    / F  G  H
          Insert!  o--o--o--o  Undo!
                           /
                          / I  J
                Insert!  o--o--o  undo-only
                              /
                   D  F  G   /
                   o--o--o--o
                  /
                A/ K  L
       Insert!  o--o--o

And we undo a whole bunch:

                A  B  C
     Insert! o--o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  E
       Insert!  o--o--o  Undo!
                     /
                    / F  G  H
          Insert!  o--o--o--o  Undo!
                           /
                          / I  J
                Insert!  o--o--o  undo-only
                              /
                   D  F  G   /
                   o--o--o--o
                  /
                A/ K  L
       Insert!  o--o--o  Undo!
                     /
                    /
                   o
                  /
                 / D  F  G  I  J
    (continue)  o--o--o--o--o--o

Okay, what happened here?  We undid the new states we added, and those
undo actions get added going backward temporally.  After that though,
we started undoing undos.  These undo changes get added with the
reverse temporality as the original changes, so these undo changes are
going forward temporally.  If you did `undo-only` at this point, you
would undo these changes.

(But wait, aren't these changes undo changes? `undo-only` doesn't undo
undos, right?  Well, these changes are actually undos of undos, so
they're actually redos, not undos, hence why they move forward
temporally.)

That's it for the example.  Keep in mind however that this ""undo
chain"" is just a concept to help understand how undo works.  What
Emacs actually stores is `buffer-undo-list`.  You can check it out
with `describe-variable`.

If you have been following along with the example, the state of
`buffer-undo-list` should be like below.  I have annotated it with
points from the undo chain diagrams.

    '(
      nil
      (12 . 13)
      nil
      (11 . 12)                             ;Redo insert j
      nil
      (10 . 11)
      nil
      (9 . 10)                              ;Redo insert i
      nil
      (8 . 9)
      nil
      (7 . 8)                               ;Redo insert g
      nil
      (6 . 7)
      nil
      (5 . 6)                               ;Redo insert f
      nil
      (4 . 5)                               ;Redo insert newline
      nil
      (3 . 4)                               ;Redo insert d
      nil
      (""k"" . 3)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""\n"" . 4)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""l"" . 5)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""\n"" . 6)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (6 . 7)
      nil
      (5 . 6)                               ;Insert l
      nil
      (4 . 5)
      nil
      (3 . 4)                               ;Insert k
      nil
      (""d"" . 3)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 4)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""f"" . 5)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 6)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""g"" . 7)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 8)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""i"" . 9)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 10)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""j"" . 11)                            ;Undo-only insert j
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 12)
      (#<marker
       (moves after insertion)
       at 12 in tmp-undo> . 1)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (12 . 13)
      nil
      (11 . 12)                             ;Insert j
      nil
      (10 . 11)
      nil
      (9 . 10)                              ;Insert i
      nil
      (""h"" . 9)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (""\n"" . 10)
      (#<marker at 12 in tmp-undo> . -1)
      nil
      (10 . 11)
      nil
      (9 . 10)                              ;Insert h
      nil
      (8 . 9)
      nil
      (7 . 8)                               ;Insert g
      nil
      (6 . 7)
      nil
      (5 . 6)                               ;Insert f
      nil
      (""e"" . 5)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""\n"" . 6)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (6 . 7)
      nil
      (5 . 6)                               ;Insert e
      nil
      (4 . 5)
      nil
      (3 . 4)                               ;Insert d
      nil
      (""b"" . 3)                             ;Undo insert b
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""\n"" . 4)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""c"" . 5)                             ;Undo insert c
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (""\n"" . 6)
      (#<marker at 12 in tmp-undo> . -1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      (#<marker
       (moves after insertion)
       at 13 in tmp-undo> . 1)
      nil
      (6 . 7)
      nil
      (5 . 6)                               ;Insert c
      nil
      (4 . 5)
      nil
      (3 . 4)                               ;Insert b
      nil
      (2 . 3)                               ;Insert newline
      nil
      (1 . 2)                             ;Insert a
      (t . 0)                             ;Buffer before modification time
      )

Finally finally, undo records for undos (redos) are stored in
`undo-equiv-table`.  Again, feel free to check it out.

",14,123,How Emacs undo works
,17,123,M-x fireplace
,84,120,Announcing Remacs: Porting Emacs to Rust
,15,118,"An Emacs Lisp JIT Compiler: ""In some simple benchmarks, it is about 3x faster than the bytecode interpreter."""
"So I've been twiddling with Emacs 26.1's TLS settings lately to be able to send email to smtp.gmail.com, and I've discovered that I might as well be naked on the Internet.

First of all, now that GnuTLS is required* (not really, but that's the direction we are heading, since `tls.el` and `starttls.el` have just been deprecated on master), I can't switch to OpenSSL anymore. Why you may ask? This is why:

    (mapc (lambda (host) (print (ignore-errors (url-retrieve-synchronously host))))
             '(""https://expired.badssl.com/""
               ""https://wrong.host.badssl.com/""
               ""https://self-signed.badssl.com/""
               ""https://untrusted-root.badssl.com/""
               ""https://revoked.badssl.com/""                   ;; failed
               ""https://pinning-test.badssl.com/""              ;; failed
               ""https://sha1-intermediate.badssl.com/""         ;; failed
               ""https://rc4-md5.badssl.com/""
               ""https://rc4.badssl.com/""
               ""https://3des.badssl.com/""                      ;; failed
               ""https://null.badssl.com/""
               ""https://mozilla-old.badssl.com/""               ;; failed
               ""https://dh480.badssl.com/""
               ""https://dh512.badssl.com/""
               ""https://dh-small-subgroup.badssl.com/""         ;; failed
               ""https://dh-composite.badssl.com/""              ;; fail if using default `gnutls-min-prime-bits`
               ""https://invalid-expected-sct.badssl.com/""      ;; failed
               ""https://subdomain.preloaded-hsts.badssl.com/""
               ""https://superfish.badssl.com/""
               ""https://edellroot.badssl.com/""
               ""https://dsdtestprovider.badssl.com/""
               ""https://preact-cli.badssl.com/""
               ""https://webpack-dev-server.badssl.com/""
               ""https://captive-portal.badssl.com/""
               ""https://mitm-software.badssl.com/""
               ""https://sha1-2017.badssl.com/""))

This is tested with `gnutls 3.5.18`, configured with `--with-gnutls`, and `gnutls-trustfiles` set to OpenSSL's `cert.pem`.

Back in the days when I didn't link `gnutls` into Emacs, I would set `tls-program` to `openssl s_client -connect %h:%p -no_ssl3 -no_ssl2 -ign_eof -CAfile %t`, and all of the above would print `nil`. Now that `gnutls` is blessed, 7 of the above tests failed and with no recourse. The revoked, pinning and sha1 intermediate chain tests failing are especially concerning. 3des has also been disabled in OpenSSL for 2 years.

Second of all, what the fuck is up with the default settings? `tls-checktrust` is `nil` by default, `gnutls-verify-error` is `nil` by default, and `gnutls-min-prime-bits` is `256` by default for crying out loud. I know MS-DOS is still sort of supported by Emacs but security isn't something you can stay in the stone age.

This is serious people. Emacs is basically a glorified REPL with no sandboxing. Whatever you install with `package.el` is immediately activated, which means arbitrary code gets eval'ed without you even having a chance to audit it. We can't have RMS prefixing every email with 

    [[[ To any NSA and FBI agents reading my email: please consider    ]]]
    [[[ whether defending the US Constitution against all enemies,     ]]]
    [[[ foreign or domestic, requires you to follow Snowden's example. ]]]

while Emacs's default is saying NSA and Great Firewall please come fuck me.",65,120,Emacs' TLS defaults are downright dangerous
,27,121,abo-abo: Please consider supporting me on Patreon
,0,122,"/u/eli-zaretskii: ""[P]eople who track Emacs development are encouraged to track the release branch, not master. This gives the new release more testing and reveals any problems sooner, thus helping us release Emacs 26.1 sooner rather than later."""
,11,120,Blimp: A complete imagemagick interface inside emacs
,66,119,Doom: an emacs.d to espouse and surpass vim in any way possible
My favorite is when my boss was talking about this cool new way to make presentations with reveal.js. Withought missing a beat I told him there was a package in emacs for that and he just rolled his eyes at me. I'm the only one that uses emacs at my job so I have to sieze every opportunity I can haha. ,101,118,"What is your favorite ""You can do that in Emacs."" story"
"I want to thank everyone who responded to the call for proofreaders of the Emacs Manual, especially those who sent in edits and comments!  Below is the final list of contributors, along with the number of sections proofread. If your name has not been mentioned, please let me know so I can update the list.

Sections|Proof Reader
:--|:--
22|Michael Albinus
11|Will Korteland
9|Isaac Carter
9|Alex Branham
8|Alberto Sartori
6|Wojciech Politarczyk
6|Miloš Polakovič
5|oldgaro
5|Gijs Hillenius
5|Francis Wright
4|Maxime Tréca
3|Robert Pluim
3|Petteri Hintsanen
3|Justin Heyes-Jones
3|John Cummings
3|David Bonnafous
3|Clemens Radermacher
2|Toon Claes
2|R. P. Dillon
2|Martin Lüthi
2|Kayvan Kazeminejad
2|Jonathan Kyle Mitchell
2|George Xanthakis
2|Daniel Chakraborty
2|Cena Mayo
2|Alfonso Commer
2|Adam Taylor
1|Yotam Ohad
1|Wesley Ellis
1|Rasmus Sjostrom
1|Matt Grice
1|Margaret Gordon
1|Marcin Borkowski
1|Kieran Trezona
1|Kevin Li
1|Joshua Branson
1|Jerome Truong
1|James Yoo
1|James (drone)
1|Ilja Kocken
1|Iachetti Martín
1|Grant Rettke
1|Georgios Bakirtzis
1|Eric Abrahamsen
1|Eli Zaretskii
1|Eduardo Mercovich
1|Dmitry Gutov
1|Arthur Milchior
1|Anthony Brice
1|Adam Porter

Update: A special mention to Stefan Kamphausen, who applied a tool from his company [Acrolinx](https://www.acrolinx.com/publications/acrolinx-5-4-brochure/) to automatically check spelling and grammar throughout all sections of the manual.",11,119,Thanks to all who helped with proofreading the Emacs Manual!
,26,114,Emacs 25.2 released
"Hey everyone, I'm the author of Next (imagine emacs as a browser)

[https://github.com/atlas-engineer/next](https://github.com/atlas-engineer/next)

I'm trying to build better Linux support, so I've hired a C++ developer to help with some of the porting. I will front all of the costs to do so, but any help would be greatly appreciated (supporting the campaign directly or spreading the word),

[https://www.indiegogo.com/projects/next-browser-nix-support#/](https://www.indiegogo.com/projects/next-browser-nix-support#/)

thank you for your time,

&#x200B;

\-John",68,111,Next Browser Linux Port Campaign
,24,114,My emacs splash image
,33,112,Emacs in 2018: My Year in Review
,21,112,GNU Guile 2.1.1 released featuring a complete Emacs-compatible Elisp implementation
"[Emacs 25 running under GNOME 3.28 Wayland](https://i.redd.it/zodi6xuswj111.png)

[GUI Session](https://i.redd.it/py513duswj111.png)

[Terminal Session](https://i.redd.it/wp4z7rwswj111.png)

[Get ""Emacs Setup""](https://gitlab.com/fr0xk/Emacs_setup)",123,112,"How your ""emacs"" looks like?"
,44,115,A CEO's Guide to Emacs
"Mine is.....<sob>....I've looked at Org Mode...and still don't use it...tried it once. I have to fake saying its cool, just to keep up the image of my reddit username's sake. <sob>....",278,112,"The Emacs Confessional Booth. Post your sins here, and you will be forgiven."
"If you've been following magit development, you may be aware that one of the goals of ""the year of magit"" is to implement Emacs bindings for libgit2, so that magit can avoid using git as a subprocess for every little thing. (There are a lot of little things.) This is the biggest performance bottleneck in magit.

The work-in-progress library is here: https://github.com/magit/libegit2

There are about 700 functions in libgit2 ([list](https://libgit2.org/libgit2/#HEAD)), most of those are up for grabs and any help in getting these implemented would be appreciated. The readme has instructions for how to get set up and how to go about implementing them. Since it's written in C, some knowledge of C is handy, but if you're a beginner don't fret. It's pretty formulaic work and I've implemented about 50 functions already, there should be some prior art for you to follow.

* More discussion [here](https://github.com/magit/magit/issues/2959)

I think some categories should take priority, probably *branch*, *checkout*, *commit*, *diff*, *object*, *reference*, *repository*, *revparse*, *tag*. I've done most of *reference* and *repository* myself.",60,111,Call to arms: Emacs bindings for libgit2
,45,111,Magit v2.1.0 released
"Another week, another trick. For this week, I wanted to give you an overview of my organization with the `org-mode` to be in continuity with the [previous tip](https://www.reddit.com/r/emacs/comments/98nkt6/tip_how_do_i_synchronize_my_org_files_with_my/).

**NOTE:** there's no code on this post, since I don't have anything magical to present. Also, I know that a lot of posts already exist about how to be organized with `org-mode`, but I figured one more wouldn't hurt 😊

First and foremost, you need to know why nowadays it is more important than before to be organized. Well, we live in a world where everything has to go fast while limiting stress and increasing our productivity. We can say that organization is the way we can be productive by saving time, while limiting our stress.

Personally, it's been 5 years since I started being organized with `org-mode` and I must admit that it was difficult because we quickly tend to give up when the organization is screwed up for some reason. I started by wanting to be organized because I noticed that the most successful people are organized. This organization is mainly done through time and money management.

Even if I am not always satisfied with the level I have to manage my organization, when I look at the person I was 5 years ago, I am pleased to have made efforts to improve it. Remember that your time is your most valuable asset.

That being said, it is important that you know yourself before you want to start an organization that you will not respect.

The questions you should ask yourself are the following:

1. How much sleep do I need to not feel tired?
2. Am I more of a morning or evening person?
3. How much time can I concentrate on a task?
4. Why would I want to improve my organization?

Once you have those answers, then you can organize your schedule around that.

For the setup of my organization in `org-mode`, here are the people on whom I take inspiration and that I suggest you:

* Sacha Chua;
* alphapapa;
* Nicolas Petton;
* John Wiegley.

In addition to that, I tend to follow [Thomas Frank](https://www.youtube.com/user/electrickeye91)'s advices like writing 3 evening tasks to do for the next day and tidying up our workspace every night so that it is already operational.

From a file structure point of view, here is what I use:

* **agenda**: includes all files related to `org-agenda`.

These files are as follows:

1. `calendar.org`: contains events related to special days. In short, this file contains  `%%(org-calendar-holiday)` to display special event days and `%%(org-contacts-anniversaries)` to display my contacts' birthdays.
2. `contacts.org`:  contains the details of my contacts ([read more on this subject](https://www.reddit.com/r/emacs/comments/8toivy/tip_how_to_manage_your_contacts_with_orgcontacts/)). For the headers used, I use: *Business*, *Family*, *Family Friends* and *Friends*.
3. `organizer.org`: contains the entries from tasks that need to be refile. I try as much as possible that every week, this file is empty of tasks. For the headers used, I use: *Tasks* and *When...*
4. `people.org`: contains the entries from people-related tasks. For the headers used, I use: *Family*, *Family Friends*, *Friends*, *Meetups*, *Tasks*.
5. `review.org`: contains weekly and monthly reviews. My reviews mainly consist in rereading the daily entries of my journal and completing them with a report made by `org-clock-report` in order to note my productivity (*e.g.* by noting the time spent to study, personal projects, playing, watch series, *etc.*).                                                                                               **NOTE:** one of my desires, is to be able to draw a circle graph generated with `TikZ` in `LaTeX` which would take the column names present in the table and display in percentage the time spent on each task in order to have a visual aspect ([something like shown here](http://www.texample.net/media/tikz/examples/PNG/pie-chart-color.png)). If any of you have an idea to do that, I would be very interested 😊
6. `routine.org`: contains my daily tasks. For the headers used, I use: *Every day*, *Once a week*, *Once a month*, *Once a quarter*, *Once a year* and *When...*
7. `school.org`: contains the entries from school-related tasks.                                                                                                     **NOTE:** this file is temporary, since I'm still a student. It will be replaced by `work.org` once I have a permanent work.

* **archives**: includes the task archives of my `org` files. I try to archive every week to avoid polluting my `org` files with finished tasks and that I no longer intend to pay attention to it.

The archiving structure I currently use is as follows:

    - 2018
      - organizer.org_archive
      - people.org_archive
      - review.org_archive
      - school.org_archive
    ...

However, I would like to change to something more structured as follows:

    - 2018
      - january
        - week1
          - organizer.org_archive
          - people.org_archive
          - review.org_archive
          - school.org_archive
        ...
      ...
    ...

* **courses**: includes `org` files related to my courses. I tend to create one large `org` file per course. The reason why I prefer to use `org` for my classes is that I write faster with a keyboard than with a pen.
* **journal:** includes `org` files related to `org-journal` ([read more on this subject](https://www.reddit.com/r/emacs/comments/8kz8dv/tip_how_i_use_orgjournal_to_improve_my/)).
* **ledger:** includes `org` files related to `ledger` ([read more on this subject](https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/)).
* **other:** includes `org` files that couldn't find their place in the other files (*e.g.* `books.org`, `learning.org`, *etc.*)
* **summaries:** includes `org` files which includes summaries on subjects I liked and problem solving (*e.g.* crypt external hard drive, root phone, *etc.*).

**NOTE:** recently, I'm using `git` to do control management with my `org` files. Which helps, if I do a misusing manipulation with my files.

​This tip was the last of 17 previously posted. I intend to pause the time with these posts until I update myself to be able to propose more content. I want to thank you for all your support, I hope that I was able to help you in one way or another because you helped me a lot with your advices. Feel free to give your tips in the comments about your organization 🐈

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",22,107,TIP: How I organize myself with org-mode
,20,111,Just picked up this 1987 Emacs Manual for $6. Still in shrink wrap. I was the only bidder. Where were you guys?
,28,108,"magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer (now on MELPA)"
,23,105,Emacs 26 Brings Generators and Threads
,130,108,"RMS on which improvements to Emacs would be ""truly useful"""
,23,104,An Emacs package for browsing reddit (just submitted to MELPA).
,75,109,"How EXWM saved me from living a tragic, rage-fueled life"
,91,105,I'm About as Good as Dead: the End of Xah Lee
"Hi!

I just started exploring Emacs and it brought me joy, like a cool new toy (on the scale of the international space station). Being burned out and depressed lately, this ""hobby"" helped me a lot for some reason, it re-ignited a passion for tools and programming.

I decided to start a little experimental podcast to document my exploration. Hopefully, this could be interesting and/or useful for beginners and maybe even experienced users.

Two episodes are ready:

1. Episode 1: obsession with tools and how I developed a good mindset for learning Emacs. *[Listen online](http://emacscast.rakhim.org/episode/dad4f44c-901d-469b-8a8a-a4a890933ac2) / [download mp3](https://pinecast.com/listen/dad4f44c-901d-469b-8a8a-a4a890933ac2) /  [listen on YouTube](https://youtu.be/7vC8al1ZZz8).*

2. Episode 2: simple config with org-babel, some sane defaults and packages overview. *[Listen online](http://emacscast.rakhim.org/episode/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61) / [download mp3](https://pinecast.com/listen/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61) / [listen on YouTube](https://youtu.be/sbAsyQnHsGw).*

Here's the [RSS feed](https://pinecast.com/feed/emacscast) and a [github repo](https://github.com/freetonik/emacscast) with the list of all episodes, full show notes and links. .org-files, obviously :-)

[iTunes/ApplePodcasts link](https://itunes.apple.com/fi/podcast/emacscast/id1421123475).

———

Here are some topics I have in mind for future episodes:

- Org mode (huge topic!)
    - organizing life from scratch
    - migrating from ToDo apps, notes apps, etc
    - setting up an external brain
    - writing blogs (jekyll), articles and books
    - overview of mobile companion apps
- Why bother with Emacs (aside from the usual rhetoric)
- Setup for writers/non-programmers
- Setups for Rails, Clojure, JS
- Migrating from Sublime Text
- Interviews with members of the community (?)
- How to find good resources for beginners: Emacs, Org Mode, configs. 

I'm not sure if this is at all interesting to people, so I'd love to hear some feedback. Should I continue?

UPD: added iTunes link",61,111,New podcast about a beginner's journey into Emacs
"Ladies, gentlemen. My fellow Emacsen. Can I have your attention please?

My name is Ag, my Twitter handle is [@iLemming](https://twitter.com/iLemming) and I'm known there as ""M-x tips"".

I've been thinking about it lately. **We do need to hold an Emacs conference**. I have some ideas but I have no clue how to actually get it done. This is extremely arduous task but I think it can be done. And I have never, ever done anything like that before so I really need your help.

First and foremost - I need to know if it is viable at all. Can we gather enough volunteers willing to present? We need 8-10 presentations each at least 30 min long, discussing interesting things and future development of Emacs, not just: ""oh, look! This is awesome little package I wrote, Emacs is totally dope!"".

Then there are thousand other things that need to be thought, ranging from logistics to sponsorship, t-shirts and other swag, tickets, location, venue and etc. etc. I have some ideas (this is going to be the US based, 1-day conference)

But can we please discuss the possibility of this happening?",45,106,Emacs summit. Can we make it happen?
"For a while one of the biggest complaints people had about Projectile was that the alien indexing wasn't fast enough (especially on big projects). The reason for this was pretty simple - even though Projectile would normally obtain the list of project files pretty fast (e.g. by using `git ls-files`) it always did some post-processing of the results (e.g. filtering, sorting, etc), which is a very slow operation in Elisp on a big dataset. 

Today [I've added a new indexing method](https://github.com/bbatsov/projectile/commit/e3007ae0324fb6679a6b3dac5c63191ce907115e) that simply dispenses with all of the post-processing and gives you the raw power you always craved for. It's called `'turbo-alien` and it's going to be the default indexing method going forward. 

Enjoy!

P.S. I encourage all of you to help out with some of the open tickets marked with ""Help Wanted"" or ""Good First Issue"" [here](https://github.com/bbatsov/projectile/issues). I'm trying to clean-up shop after a long period of stagnation and I can certainly use some help! :-)

The recent 1.0 release was just a precursor to some bigger changes I had planned to do for quite a while. Stay tuned for more updates!",19,108,Projectile gets a turbo-alien indexing mode
,12,104,New GNU Emacs website
,17,106,Stefan Monnier steps down as head maintainer
,30,105,RMSbolt - A powerful assembly/bytecode viewer for Emacs
,27,104,Spacemacs 0.200 released
,41,105,GNU Emacs webpage gets a nice facelift
,3,104,Irregular reminder to support development of Magit!
"There's another post on this subreddit about a potential Emacs fork. This post is copied from my personal Facebook: it was more of a rant than an announcement, and it was a bit premature. (That's why I made it friends-only --- thanks, friends!) I'm not going to fork Emacs just yet (though granted, I'm tempted). I'm going to talk to my fellow Emacs developers for a while longer and hope that we can establish a consensus.",54,102,"No, I'm not forking right now"
,107,101,Richard Stallman: 25 years ago I hoped we would extend Emacs to do WYSIWG word processing…
,68,102,Continued progress porting Emacs to Rust
,16,104,The Emacs Stack Exchange is graduating from beta status
"I'm happy to announce the release of [Next](https://next.atlas.engineer) 1.1.0, the first release with good support for GNU/Linux!  It's already on the [AUR](https://aur.archlinux.org) and a [Guix](https://guix.info) package is also available.

Next is a web browser written in Common Lisp that focuses on extreme configurability.  It takes a strong point at being different:

https://next.atlas.engineer/article/the-next-thesis.org

While its design is inspired by Emacs, rest assured that VI-style bindings are coming soon :)

It's still alpha stage and thus some important features such as cookies are missing, but stay tuned, it won't be long until Next reaches full-blown maturity.

A month ago, I embarked on a journey with /u/jmercouris to rewrite Next using a new design:

https://next.atlas.engineer/article/technical-design.org

This approach should give us enough flexibility to port Next to any web renderer / GUI toolkit / OS combination.

Exciting times ahead for browsing and hacking!  Someday the community of extension writers might even make Next compete with the fame of Emacs' extensibility, who knows!",59,100,"Next, the infinitely configurable browser release 1.1.0"
,11,103,how much you type per day?
"Every now and then, we discover an emacs package that significantly enhances our workflow and it feels similar to acquiring super powers.  

One of the first packages I ever used was magit and it blew me away.  Never looked back.  Recently, I started using eyebrowse to manage my workspaces, and although simple, it has changed my workflow for the better.  Combining with projectile and sidebar, my productivity has undergone an evolution. 

 These are tools that will be on belt for life.

What elisp tools have you discovered recently that are game changers?",79,101,What emacs packages have upped your game recently?
,5,101,"Recently joined a makerspace, made a coaster with a laser cutter!"
,25,98,My First Emacs Commit
"Another week, another trick. This week, a little longer TIP where I will explain my way of using the `ledger`, this powerful double-entry accounting system that is available on the command line and with GNU Emacs.

[Overview of ledger with its budgeting](https://i.redd.it/r9s1i9pzuu811.png)

The screenshot above gives you an idea of how to manage transactions and view your monthly/annual budget.

Before going any further, here is a simple configuration that you can use for `ledger` with GNU Emacs:

      (use-package ledger-mode
        :mode (""\\.dat\\'""
               ""\\.ledger\\'"")
        :custom (ledger-clear-whole-transactions t))
           
      (use-package flycheck-ledger :after ledger-mode)

**NOTE:** in order to use `ledger`, it must be installed with your operating system.

I mainly use `ledger` to manage my budget using the [YNAB](https://www.youneedabudget.com/method/) principle. Without going into details, it allows me to create several budgets (debts, goals, main, obligations) to more easily save money and allow a better management of it. Being still a student, I use an annual budget, but it's up to you to make it monthly.

Here is what my `budgeting.dat` file looks like:

    2018-07-08 Budget Debts
        [Assets:Budget Debts:Car Loans]                0 EUR
        [Assets:Budget Debts:Student Loans]            0 EUR
    
    2018-07-08 Budget Goals
        [Assets:Budget Goals:Education]                0 EUR
        [Assets:Budget Goals:Fitness]             100.00 EUR
        [Assets:Budget Goals:Vacation]            100.00 EUR
        [Equity:Budget Goals]                    -200.00 EUR
    
    2018-07-08 Budget Main
        [Assets:Budget Main:Car Maintenance]           0 EUR
        [Assets:Budget Main:Cell Phones]               0 EUR
        [Assets:Budget Main:Clothing]             100.00 EUR
        [Assets:Budget Main:Gifts]                100.00 EUR
        [Assets:Budget Main:Giving]                    0 EUR
        [Assets:Budget Main:High-Tech]            100.00 EUR
        [Assets:Budget Main:Home Insurance]            0 EUR
        [Assets:Budget Main:Home Maintenance]          0 EUR
        [Assets:Budget Main:Medical]               20.00 EUR
        [Assets:Budget Main:Other]                     0 EUR
        [Assets:Budget Main:Outings]              100.00 EUR
        [Assets:Budget Main:Trading]              200.00 EUR
        [Equity:Budget Main]                     -620.00 EUR
    
    2018-07-08 Budget Obligations
        [Assets:Budget Obligations:Electric]           0 EUR
        [Assets:Budget Obligations:Fees]               0 EUR
        [Assets:Budget Obligations:Groceries]     200.00 EUR
        [Assets:Budget Obligations:Internet]           0 EUR
        [Assets:Budget Obligations:Rent]               0 EUR
        [Assets:Budget Obligations:Transport]     214.00 EUR
        [Assets:Budget Obligations:Water]              0 EUR
        [Equity:Budget Obligations]              -414.00 EUR

**NOTE:** certain values are at 0 like having to pay for electricity, water, *etc.* because I still live with my parents. Nevertheless I added this in my budget to facilitate its evolution. For those who might wonder, these values are of course fictitious.

To automatically crediting budget accounts when spending money,  I use 4 respective files: `auto-debts.dat`, `auto-goals.dat`, `auto-main.dat` and `auto-obligations.dat`, in an `auto-transaction` folder

Without showing you all the files, here is for example what the `auto-goals.dat` file contains:

    = /Expenses:Education/
        [Assets:Budget Goals:Education]             -1.0
        [Assets:Budget Goals:Unbudgeted]             1.0
    
    = /Expenses:Fitness/
        [Assets:Budget Goals:Fitness]               -1.0
        [Assets:Budget Goals:Unbudgeted]             1.0
    
    = /Expenses:Vacation/
        [Assets:Budget Goals:Vacation]              -1.0
        [Assets:Budget Goals:Unbudgeted]             1.0

**NOTE:** all other files have the same principle. For those who want more information, I refer you to the `ledger` documentation about [automated transactions](https://www.ledger-cli.org/3.0/doc/ledger3.html#Automated-Transactions).

For my transactions, I keep them in a `ledger-xxxx.dat` file where `xxxx` represents the current year (*e.g.* 2018).

Finally, all these `ledger` files are included in a single file named `ledger.dat`:

    ; Automatically crediting budget accounts when spending money.
    include auto-transactions/auto-debts.dat
    include auto-transactions/auto-goals.dat
    include auto-transactions/auto-main.dat
    include auto-transactions/auto-obligations.dat
    
    ; Related to the budget.
    include budgeting.dat
    
    ; Main files.
    include ledger-2018.dat

Sexy, isn't it? 😊

Using `org-capture` it is very simple to add a bank or cash transaction:

    (use-package org-capture
      :ensure nil
      :after org
      :preface
      (defvar my/org-ledger-card-template ""%(org-read-date) %^{Payee}
      Expenses:%^{Account}  €%^{Amount}
      Liabilities:CreditsCards:Belfius"" ""Template for credit card transaction with ledger."")
    
      (defvar my/org-ledger-cash-template ""%(org-read-date) * %^{Payee}
      Expenses:%^{Account}  €%^{Amount}
      Assets:Cash:Wallet"" ""Template for cash transaction with ledger."")
     :custom
      (org-capture-templates
       `((""l"" ""Ledger"")
         (""lb"" ""Bank"" plain (file ,(format ""~/.personal/ledger/ledger-%s.dat"" (format-time-string ""%Y""))),
          my/org-ledger-card-template
          :empty-lines 1
          :immediate-finish t)
         (""lc"" ""Cash"" plain (file ,(format ""~/.personal/ledger/ledger-%s.dat"" (format-time-string ""%Y""))),
          my/org-ledger-cash-template
          :empty-lines 1
          :immediate-finish t))))

To finish this TIP, I encourage you to read [Sacha Chua](http://sachachua.com/blog/tag/ledger/)'s posts on `ledger` as well as [Nicolas Petton](https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html)'s blog which uses the same principle as me.

In order to avoid prolonging this post, you can find the `hydra` menu that I use on my [GitHub](https://github.com/rememberYou/.emacs.d) repository, as well as other more complex commands for ledger.

Do not hesitate to share your suggestions and your experience with `ledger`. My wallet will thank you for that 😘

I wish you a good evening or a good day, Emacs friend!",18,99,TIP: How I use ledger to track my money
,20,98,Emacs for better understanding!
,47,99,"Eglot: ""Emacs Polyglot. An Emacs client to Language Server Protocol servers"""
,20,99,Emacs 25.3 released
,56,98,How Lisp Became God's Own Programming Language
"[photo](https://i.imgur.com/o83rGpz.jpg)

Source: https://twitter.com/illusionfoxe/status/1041219052847263745",17,96,Emacs scratch buffer text got into Mario Golf (GBC)
"About year ago I migrated my blog from Wordpress to Ghost, and for some reason, I needed to edit the exported XML file (6.3 MB) to do a search & replace across it. In that time I was using an electron-based editor, so all attempts to open the file and edit it failed.

I remembered the Linux traditional editors and how robust they are, so I determined to gave Emacs a chance. After installing it, I used the File menu to open that file and... Oh! The file opened immediately! I searched online for how to do my task and just in a few minutes everything was done.

It was a great moment; I thought ""ya, we have wonderful editors in our Linux distros repositories, they're much better than relying on a third-party product, whose company has a troubled relationship with FLOSS community,"" thus I decided to learn Emacs.

Long story short, I read ""Mastering Emacs,"" and learned to use `C-h` commands, gradually I moved to Emacs as my coding tool (for front-end development), and I'm getting more familiar with other great modes like org, dired, mu4e, elfeed, etc.

I loved how Emacs is a text-based interface to accomplish many of computing tasks. Emacs turns me into a text-oriented person. I loved the power of dealing with everything as text. BTW I switched my blog later form Ghost to a static site based on org files.

**I just want to say Big Thanks to everyone here**; I asked many questions in this subreddit, read and followed a lot of helpful discussions and personal experiences. Emacs makes doing staff much more fun and productive.

",12,95,Thanks to you. or how I moved to Emacs
,7,99,What's New in Emacs 26.1?
,28,100,beorg - Org-mode companion for iPhone and iPad
"It was an excellent book. I had been using Emacs consistently for 10 months. I felt pretty confident in my skills before reading the book but I still found a lot of valuable information in it. $40 is pretty steep in my opinion, and you will have to decide if that is worth it to you. For me it was. Some topics that were introduced have so much depth that I will need to reread them a few times to understand fully.


I really appreciate Mickey Peterson for writing the book, and those who have taken the time to make Emacs self documenting. M-x info-apropos, C-h m (One of my favorites) C-h i, C-h k, C-h f, are my best friends now. I knew most of them existed, but having someone hold my hand and show me how to use them to get the answers I needed got me using them more.

I learned a lot but now I feel overwhelmed. In the book there is a quote by Neal Stephenson from,  In the Beginning... was the Command Line.
> Emacs outshines all other editing soft-
>ware in approximately the same way that the
>noonday sun does the stars. It is not just bigger
>and brighter; it simply makes everything else
>vanish.


Without trying to start another editor war, what I get from this is ""Emacs is big"". But we all knew that. I knew that before I read the book. People make fun of Emacs for it. But when you really get down into the weeds you realize how *big* that big is. The Emacs Manual is 635 pages long, Mastering Emacs is 281 pages long, The pdf for just org mode is 303 pages long, the emacs lisp reference manual is 1165 pages long (to be fair it's an entire programming language). There are thousands of functions, a plethora of keybindings, and you can access most of them straight from the editor itself. Do you need to read all of this to get up and running in Emacs, no that's absurd. But if you take the time to learn, Emacs will reward you with a little time saving nuggets and useful features you never knew existed. 

Anyway I just wanted to share with everyone. No one I know around me uses Emacs so I don't get to talk about it with anyone at school or work. Again you have to decide if a $40 pdf on Emacs is useful to you. I can tell you that all the information in the book is in Emacs itself. Sometimes it's just nice to have someone find it an lay it out for you.",18,97,Just finished reading Mastering Emacs
"Hi all! I am mostly here to take inventory on interest, and to see if there are already similar projects out there.

For those of you who are familiar with sync thing, I am planning on making an emacs-based interface and controller for it. The interface would ideally be as complete as the gtk and web interfaces, and maybe later with some potential emacs-specific integrations.

If any of you are interested in either using or contributing to this, please give a thumbs up or a comment.

https://syncthing.net/",13,95,Syncthing.el -- Taking inventory
"At the end of October, [I am giving full control of PHP Mode to the
Emacs PHP
group](https://github.com/ejmr/php-mode/issues/365#issuecomment-332065223).
This decision comes on the heels of my own recent health announcements
and, more specifically, unexpectedly ending up in the hospital the
past week.  I was in the middle of working on addressing some
pull-requests when it happened, and it made me realize that it will be
better for the project if I bow out sooner than later, so that one or
more people with more time can give the project the care it deserves.
It is becoming increasingly clear that I can no longer do that.

Some weeks ago I posted about looking for new maintainers due to my
health problems with my failing kidneys.  Since then I have learned
that I have no serious chance of getting a transplant, so I would like
to spend my final 18--36 months doing other things; and before you get
angry at any doctors or whatever, I must disclose that I have a
history of drug addiction involving opiates and heorin.  It is
completely understandable that I would be placed very low on the
transplant list since ""they"" (i.e. the people who make those lists)
have understandable concerns that I might squander away the
opportunity given to me, and I do not blame or begrudge them over that
whatsoever.

Anyway, this post isn't really about me, despite me rambling about
myself.  I do not intend to use this subreddit as a soapbox.  I simply
wanted to post news about the future of PHP Mode.  The point of this
post is to inform everyone that *anyone* interested in PHP Mode for
GNU Emacs should:

1. Support the [Emacs PHP group](https://github.com/emacs-php) in
   general.
   
2. Support Usami Kenta in particular, because he looks to be the most
   likely future maintainer, a role I personally believe he would
   perform very well at.

3. Have an open dialog about what will be best for PHP Mode moving
   forward.  PHP is one of those programming languages so popular that
   GNU Emacs *needs* great support for it, in my opinion.  And between
   PHP Mode and [Web Mode](http://web-mode.org/), that support is
   great.  But the community can't rest of its laurels.  We have to
   always strive to think about what we can do better for the user.

Sorry for the perhaps too-personal, soapbox-ish rant, when really this
is about PHP Mode and not me.  But I simply wanted to explain why I am
turning over ownership of the project a month from now and I believed
it was important to *first* start a public discussion about it and
then see where it goes from there.

**Edit:** The recent news regarding Magit has shown that the Emacs community can do a wonderful job of rallying around in support of useful projects.  The situation is different here, but I suspect (almost) every PHP developer using Emacs is using PHP Mode and/or Web Mode.  I want to see that community---the one that so wonderfully helped Magit---step up and do something similar for PHP Mode, and I'm not talking money or donations (although I'm not saying don't consider that either).  I just know that this community is capable of great things when it can rally together behind a common cause.

**Edit 2:** [The existing GitHub discussion about this issue](https://github.com/ejmr/php-mode/issues/365).

Thank you for taking the time to read this.
",16,97,PHP Mode to Change Ownership in One Month
,11,94,Emacs 24.5 is available
,20,98,Being so productive with elisp–a silly walk
,6,94,"IMDB in Emacs; or, Honey, I Made an ORM"
,3,94,"""Emacs beta is now available on chromebooks (and in chrome)!"""
,25,95,How to Learn Emacs: A Hand-drawn One-pager for Beginners
,19,93,"Browsh, the modern text-based browser"
"What is visible is what you do in the mailing lists/debbugs and the commit messages, but as a very happy user that wants to contribute more and more to Emacs as time goes by and help keep it afloat, I really wonder how much time and effort maintainers and prevalent contributors put into maintaining and improving Emacs.",51,96,Emacs maintainers: How much time do you put into maintaining Emacs? What does it involve?
"At work we use Ubuntu desktops as a daily driver, with EC2 instances as the real development environment. Running emacs over forwarded X worked fine. Now I have a MacBook for when I work from home. Forwarded X looks blurry on the HiDPI screen. Emacs in a terminal just didn't cut it. Spent time getting vim, etc all setup in a terminal based workflow but it really wasn't cutting it for me. 

Now I'm using magit, anaconda-mode, ipython, etc etc all over tramp. With key based auth and counsel-git it's all so... seemless. I really can't believe it. I can't recommend it enough. ",35,94,Still can't get over how powerful tramp is
"Spacemacs v0.105 was just released this morning, the first major release since late September.

[Changelog](https://github.com/syl20bnr/spacemacs/releases/tag/v0.105.0)

Notable improvements are the new [website](http://spacemacs.org/) ([PR](https://github.com/syl20bnr/spacemacs/pull/3604)) and a new layouts layer integrating perspectives and eyebrowse into what I can only assume is one of the most powerful workspace tools in Emacs land ([PR](https://github.com/syl20bnr/spacemacs/pull/2845) and [PR](https://github.com/syl20bnr/spacemacs/pull/4068)).",56,92,Spacemacs 0.105 released: new website and layouts system
,11,94,So I decided to give the old Emacs theme editor a reboot (info in comments...)
,13,98,"Welcome, New Emacs Developers"
,25,92,Org-mode is the main reason I'm dabbling in Emacs (with evil mode) and I'm loving it so far (hardcore Vim user)
,17,90,JIT Compilation for Emacs
,27,93,Organize Your Life With Org-Mode
,35,89,my first emacs color theme: challenger-deep
"I am excited to announce the release of Magit version 2.4, consisting of 269 commits since the last feature release two and a half months ago.

More information can be found in the [announcement](http://emacsair.me/2016/01/18/magit-2.4) on my new blog, and in the [release notes](https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.4.0.txt).",13,93,Magit v2.4 released
,43,96,Big things to expect from Emacs 25
"[https://org-web.org](https://org-web.org)

[https://github.com/DanielDe/org-web/](https://github.com/DanielDe/org-web/)

&#x200B;

Hi everybody, org-web is a project I've been working on for a couple years that was born out of my desire to be able to view and directly edit my org files from my phone. It's a web app, so it'll work on any device with a web browser.

&#x200B;

I posted it here about a year ago, but have since rebuilt it from the ground up and [open sourced it](https://github.com/DanielDe/org-web). I've also added some new features like capture templates and native support for tables, plain lists, checkboxes, and statistics cookies (i.e. \[3/5\] and \[60%\]), and I'm continuing to actively develop it.

&#x200B;

You can view and edit a sample org file without signing in, or sign in with Dropbox (I don't store your credentials anywhere) and use org-web with your own files. You can also easily host the project yourself if you prefer - there's no backend to configure, just some static files to serve (though you'll need to set up a free Developer account on Dropbox).

&#x200B;

I really hope org-web proves as useful to you as it has been for me, and I'd love to hear any feedback you have, either here or through a [Github issue](https://github.com/DanielDe/org-web/issues)!",33,92,org-web - A project I'm working on to view and directly edit your org files from your phone
,12,92,nEXT Browser: a web browser written and extensible in Lisp
,93,91,Native display of line numbers
,5,90,Elite for EMACS
,113,89,"GNU Emacs maintainer Stefan Monnier to Richard Stallman, re. RMS's opposition to a putative GCC plugin exporting a full AST for use by Emacs: ""With all due respect, Richard, I really think here you're simply wrong, and I'd be willing to consider a fork if that's what it takes."""
,9,91,What’s New In Emacs 24.4
,10,93,Helpful: an alternative to the built-in Emacs help that provides much more contextual information
"I've recently been working a new e-mail interface for Emacs: [mu4e-conversation](https://gitlab.com/ambrevar/mu4e-conversation) (with screenshots).

It's on MELPA already.  I'll package it for Guix soon.  (UPDATE: It's in Guix.)

I've been using it for about a week: it's been a definite never-go-back
productivity booster!

The idea is to display a full thread of e-mails in one single buffer.  This
makes for a much more pleasant e-mail experience when reading through threads:
the transitions are not only smoother, all Emacs functions apply to the entire
thread instead of just one message (e.g. searching).

This idea is not completely new in the world of e-mail client interfaces: Gmail
already does something similar (but worse :p).

What is much more novel however is the dual-view system:

- The linear view: display the e-mails chronologically in a fashion similar to
  Magit's diffs (or Gmail, or your favorite messenger).

- The tree view: display the thread as an Org document where the Org nodes
  correspond to the thread nodes.  Thus the view retains the structure while
  displaying all messages at once.

## Features

- Dual-view: Seemlessly switch between ""linear"" and ""tree"".

- Highlight the text of new (unread) e-mails with a dedicated face.

- Use all Org features from the ""tree"" view: fold nodes, open links, highlight
  quotes and code, fold code, etc.

- In the ""tree"" view, the snippets produced by `message-mark-inserted-region`

        --8<---------------cut here---------------start------------->8---
        foo
        --8<---------------cut here---------------end--------------->8---

    are automatically converted to a `#+begin_src` / `#+end_src` Org block.

- Fill long lines with `M-q` (mu4e's original feature).

- Hide cited text with `#` (the ending quoted text + signature): this is much smarter
  than `mu4e-view-toggle-hide-cited` since it does not hide quoted text in
  inline answers.

- Search an entire thread at once (think `helm-occur` or the Ivy equivalent).

- View several threads at the same time (`M-x rename-buffer` to save a view).

- Use sender-specific faces, e.g. Alice is in yellow, Bob is in green, you are
  in white.

- You can color backgrounds instead of fonts if you'd rather have a more
  ""smartphone messenger"" look.

- [Evil Collection](https://github.com/emacs-evil/evil-collection) bindings coming soon.  (UPDATE: It's in Evil Collection now.)

## Development

In principle, this concept could be implemented on top of any Emacs mail client
(Gnus, notmuch...).  I've done it for mu4e since it's the client I use.
I'm curious to whether this could be easily ported to other e-mail interfaces.

Since it's still relatively new, there might some rough edges here and there
(especially missing bindings and Org syntax).
Please report! :)

Code reviews are very welcome.  I'd also need recommendation when it comes to
formatting e-mails as Org documents.  For instance, should we use `: ` for
quotes (instead of `> `)?



## A call for better e-mail interfaces

I believe the reason that e-mails are often looked down upon is mostly due to
the overwhelming presence of poorly designed user interfaces.

The ""conversation view"" feature is vital to most users.  I think it's partly
what keep users tied up so loyally to the social media platform of the moment
(Facebook, Whatsapp, <insert-the-next-popular-messenger-here>).

Gmail is possibly the most popular e-mail interface and that might be thanks to
its feature of something close to a ""conversation"" view.  That said, Gmail
thread view is not as convenient (e.g. messages folded by default, lack of
controls) and it can't display from a tree view.

Most other clients cannot display more than an e-mail at once on screen (tabs
are a poor approach to navigate a thread).

That said, `mu4e-conversation` is not completely finished yet.
Currently `mu4e-conversation` does not allow for in-buffer replies, but I would
love to add this feature at some point.  (UPDATE: see below.)

A brilliant aspect about e-mails is that it does not brandlock users: they are free
to save their e-mails anywhere and use the interface of their choice.
If we value the freedom to own and control our communication data, I think it's
important to steer away from locked-down platforms and use more open protocols.
Making e-mails more attractive would be an important step forward in that direction.

## UPDATE: In-buffer replies

I've just pushed a massive set of changes: it basically allows you to reply to the thread within the buffer itself.  Go to the end of the buffer and start writing, then press `C-c C-c` (`mu4e-conversation-send`).  It makes for a decent ""messenger"" experience and saves some more window/buffer switches.

You can also press `RET` (`mu4e-conversation-cite`) and it will append the corresponding citation to the composition area.

There are still many rough edges I'm working on (like recipient selection, keybindings and read-only areas), so please send some feedback when you've got time! :)",34,89,mu4e-conversation: Single buffer full-thread display to make e-mails great again!
,28,93,Using Emacs Episode 47 - Magit
,27,90,Evil needs a new maintainer
,14,92,Emacs Rocks!
"Hi guys

I just develop a new framework [https://github.com/manateelazycat/emacs-application-framework](https://github.com/manateelazycat/emacs-application-framework)

**Emacs Application Framework is a development framework that developers can develop any PyQt program and integrate into Emacs.**

This framework mainly implements three functions:

1. Integrate PyQt program window into Emacs Frame using Xlib Reparent technology
2. Listening to EAF buffer's keyboard event flow and controlling the keyboard input of PyQt program via DBus IPC
3. Created a window compositer to make the PyQt program window adapt Emacs's Window/Buffer design

Using this framework, you can use PyQt develop powerful graphics programs to extend Emacs

Below is some screenshot:

**Browser:**

[EAF browser](https://i.redd.it/cdfmb7czbz511.png)

**Image Viewer:**

[EAF image viewer](https://i.redd.it/z02w9m20cz511.png)

**Video Player:**

[EAF video player](https://i.redd.it/504k0jr0cz511.png)

Elisp hacker, join us to build next generate emacs! ",28,90,Run any PyQt5 program in Emacs
,26,92,"Emacs as a C# development environment (First post, feedback welcome)"
,7,91,When your friends ask for a game in your mobile
,9,88,Emacs 25.1 RC1 now available
,6,89,Making org-mode look like a word processor
,23,92,"Making Poet, an Emacs theme"
,42,87,"Emacs 25, simple"
,12,90,Emacs StackExchange is now in public beta
"About a month ago I had a discussion with a friend concerning using Emacs, I gave it a try for 3 weeks, all I have to say is Wow!

I really didn't know what I was missing, I don't think I will ever use VsCode again!",54,87,Now I get it! Emacs is the best.
,5,84,happy halloween
"Eli
John
Steve
Magnar
Bozhidar
Sacha
Tuhdo
Oleh (abo-abo) 

and ....

all those wonderful emacsers that share all their knowledge with us so that our everyday emacs is just that more delightful

(if I did not mention you the community will)

Chapeau!",6,86,Thank you to
,48,91,org-brain -- Concept mapping using org-mode
,19,86,Literate Devops with Emacs
"Yesterday I released [reformatter.el](https://github.com/purcell/reformatter.el), a library to help elisp authors (and elisp-savvy users) integrate command-line reformatter programs like `gofmt`, `prettify` etc. Lots of language major modes and packages provide code to wrap such programs, and it's hard to write that code robustly and idiomatically -- that's where I hope `reformatter.el` will help. The [README](https://github.com/purcell/reformatter.el) has more info.

I've just switched `dhall-mode` and `elm-mode` over to using `reformatter.el`, and I'd be keen for feedback from other authors. The current interface is subject to change in response to any feedback I get, and if you've got an example of a reformatter its interface can't yet handle, or if you dislike the choices I've made so far, I'd love to hear about it.",26,87,New library: reformatter.el
,39,88,Emacs OS saved my barely usable netbook
,36,88,"Jade, a new JavaScript development environment for Emacs 25"
"Lately I've seen a lot of seemingly random mode symbol prefixes, e.g. a mode called `foobar-mode` will use `fb:next-item` and elsewhere `fblatex:export-new` or perhaps `foobar/end-of-tree` etc. etc.

1. This approach grates against the Elisp coding conventions...

  > • You should choose a short word to distinguish your program from
 other Lisp programs.  The names of all global symbols in your
 program, that is the names of variables, constants, and functions,
 should begin with that chosen prefix.  Separate the prefix from the
 rest of the name with a hyphen, ‘-’.  This practice helps avoid
 name conflicts, since all global variables in Emacs Lisp share the
 same name space, and all functions share another name space(1).
 Use two hyphens to separate prefix and name if the symbol is not
 meant to be used by other packages.

  above from `(info ""(elisp) Coding Conventions"")`

2. It breaks `custom-unlispify-tag-names` which is used to display customize pages without the mode prefix.

3. It breaks autocompletion, at least in the mini-buffer, where the user expects <space> translated to hyphen to work as a universal delimiter.

4. Most importantly, it breaks user expectation long established by code that properly follows the conventions that symbols ought to take the form `PREFIX-some-symbol`.

If you are guilty of this, please consider this an intervention. You're hurting the people you love and who love you.",40,89,"PSA: devs, please stop using weird symbol prefixes"
,4,86,Org-mode examples and cookbook
,13,89,Getting started with Magit (Or what I hope I could've read when I first tried out Magit)
,28,88,Emacs + Nine fingers
"I mentioned this back in May 2014 so it felt time for another request.  I am the maintainer of [PHP Mode](https://github.com/ejmr/php-mode) and have been so since 2011.  These days I no longer write PHP as part of my job, and as a result I do not give PHP Mode the attention I once did.  So this is a public request to see if anyone is interested in replacing me as the maintainer.  Or at the very least I would greatly appreciate anyone who would mind helping me review the pull requests and patches I recieve.

Thanks in advanced for reading this and happy hacking!
",25,87,[Wanted] PHP Mode Maintainer
,32,84,Ivy 0.9.0 is Out
,35,86,CppCon 2015: Emacs as a C++ IDE
,14,88,Emacs - A Stack Exchange Proposal
"https://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life

In case you don't have slideshare account. [PDF](https://ia601500.us.archive.org/8/items/HowEmacsChangedMyLifeMatz/How%20Emacs%20changed%20my%20life%20-%20libreplanet-matz-120326052231-phpapp02.pdf)",16,87,How Emacs changed my life by yukihiro_matz
,27,84,Custom MacBook Pro touchbar buttons with emacs is wicked awesome
,14,85,The Emacs Operating System
"Hi all,

I'm a statistician, and I rely on Emacs for my everyday coding in ESS and org mode. Yes, I'm that weird guy that doesn't use Rstudio.... I just wanted to share that I finally have a job that just lets me work the way I want to work. They still exist! .... 

I think it's pretty hard to find a job that is flexible about how you get your work done these days (esp stats folks ... maybe not for CS folks?) Luckily, I have found a job that embraces open source software, and lets me use Emacs to do basically all of my work related activity. I can even link my github account to all of my projects and we intend to open source everything that we do. 

This is such a game changer for me. I'm so used to stats jobs that basically say you have to use SAS and some crap editor to do your work that won't ever benefit other people outside my company ... so frustrating for a Free Software advocate.

Very happy... Just wanted to share.

",19,85,Just happy that I can use Emacs at work now
,31,87,org-brain now on Melpa
,30,84,I guess i'm learning emacs now
,23,85,Nice improvements to use-package today!
"Last I heard (a year or two ago) it was pretty far along, and even worked, though it had some bugs and was slow.

Has there been any news since then?  Is anyone still working it and making progress, or has it been abandoned?",16,80,Guile Emacs: Is anyone still working on it?
,24,83,"Work in progress, svg modeline... (using Sabof's SVG Modeline theme toolkit)"
"Just recently found out about [Spacemacs](https://github.com/syl20bnr/spacemacs), and wow, that is a comprehensive piece of software! It's laid out so well and intuitively.
I have never craved for vim shortcuts and never gave evil-mode a go, but damn, those controls are so much better for navigating (even on Dvorak).

I really love putting bits and pieces of my .emacs.d configuration, but this thing just makes me want to throw it out of the window.

It does feel a bit bloated, but out-of-the-box configuration is insanely good.

Have you tried it, what are your thoughts?",94,84,"Did anyone else go ""wow!"" after trying Spacemacs?"
,26,82,"Emacs as my <Leader>, 1 Year Later"
,3,81,Org 9.2 released!
"It's been a while since we had one of these posts and was looking for some inspiration to further improve my own config.

[My config](https://imgur.com/t87db7D)

* [doom dashboard (heavily modified)](https://github.com/hlissner/doom-emacs)
* [gruvbox](https://github.com/greduan/emacs-theme-gruvbox)
* org-agenda",73,85,Screenshot Showcase 2018!
,7,84,A Simple Guide to Writing & Publishing Emacs Packages -- put your little mode out there
,50,85,nEXT Browser: A Powerful Extensible Lisp Browser - GTK Linux Alpha
"A call for help here:

I want to use emacs as my mail client, there are what, 8 [major clients available](https://www.emacswiki.org/emacs/CategoryMail).

I've also heard of people using mutt and having emacs as the composer.

I'm asking for some help to get me off the ground. Why did you choose the one you have, what links have you used to get going? I'm the typical ""Gmail"" user, I have a work and home email and would love to go completely through emacs.

I do _recieve_ HTML email off and on, so if I could get formatting done via *eww* or *w3m* like Wanderlust does, that would be amazing.

I have this feeling that as soon as you pick a client, you stick with it, so /r/emacs community, which one should I pick and why?",65,83,"Email in emacs, I want to, but wow, it's overwhelming"
,12,84,Magit v2.2.0 released
,23,82,"#Emacs, naked"
,15,78,"Magit Sticker ! Thanks, /u/tarsius_ !!"
,70,77,"Emacs lite™: ""just the essentials"" config in < 200 lines."
,18,81,org-brain: Concept mapping in Emacs - Introduction
,67,82,"""Does Emacs violate the UNIX philosophy of doing one thing very well? Yes, gleefully. It’s all the better for it."""
,24,81,Get yourself organized with OrgMode
,30,81,XWidget Branch has been merged into Emacs 25.1
,26,80,New update of the Emacs website (was Re: First draft of the Emacs websit
,9,82,Sacha Chua is thinking of organizing a virtual Emacs conference in August
,27,77,"GitHub - alphapapa/yequake: Drop-down Emacs frames, like Yakuake"
,14,80,"Installing Arch Linux, Emacs, XOrg and Exwm"
"I have managed to procure a copy of Dan Weinreb's thesis: A Real-Time Display-Oriented Editor for the Lisp Machine.  It has less information of the type I had hoped for, but I still found it worth reading.  Given the expense, I can't recommend it to any others than to people especially interested in the history of Emacs and Lisp Machines.  Below are some of my notes on parts I found interesting.  I've provided some manually transcribed quotations, and have used ellipses and such to indicate omissions of bits I thought unnecessary for my purposes, and paraphrased a few omitted bits indicated with square brackets.  I could easily have made typos though.

First, a few general words about the paper.  I procured it from MIT Document Services.  It is unlisted in their catalogue, but you can still request it by writing to them and specifically requesting it.  I believe the delay in their cataloguing of it is due to questions of the legality of listing it without the (now unobtainable) permission of the author (deceased), though that is just my speculation.  It is 34 pages long, including all front and back matter.  It is missing a diagram, which I believe was lost in the microfilming process.  Each page bears the date 31-JAN-79.

To forestall requests for me to provide copies to people: I am not going to do that, in part because MIT Document Services really exerted themselves to get this for me. Multiple people on their staff searched for it after I pestered them, and it was eventually found in an uncatalogued reel of microfilm.  I certainly cannot justify denying them the paltry income that their existence must be in part justified by to distribute it in that way.  However, if someone has a question they think might be answered by the thesis but which I have not talked about here, comment or send me a message and I will answer as best I can.

Here's the abstract:

> ZWEI is a real-time display-oriented editor, written for the Lisp Machine.  It is display-oriented in that the text being edited is displayed on the screen at all times; it is real-time in that commands are executed as soon as they are given.  The result is an extremely interactive and efficient kind of editing.  This kind of editor has become very popular in widespread parts of the MIT computer community, and has been found to be easy to use yet extremely powerful.  This thesis describes the user interface presented by ZWEI, and explains how ZWEI was implemented.  An emphasis is placed on the way the nature of the Lisp Machine system affected ZWEI's design.


The thesis consists of four chapters:

1. Introduction, Explanation of what the Lisp Machine System is
2. Description of ZWEI's user interface, rationale, how the nature of the Lisp Machine affects the interface
3. Explanation of the implementation strategies used, emphasis on engineering trade-offs
4. Discussion of the future of the system


Here are my notes on the thesis.  Some familiarity with the Emacs of today, and of Lisp, is presumed:


**1)  Introduction**

Note that when the Lisp Machine software was being built, they had written a similar editor called EINE (a recursive acronym: EINE Is Not Emacs), and that they were in the middle of writing a new version called ZWEI (ZWEI Was EINE Initially).
> This thesis is written in anticipation of the completion of the conversion effort, and describes ZWEI as it will be when the rest of EINE is converted over.

Some paragraphs are devoted to what must have been a novel concept at the time for such a system: that the Lisp Machine was a personal system, not time-shared, and this gave rise to features not viable on time-sharing systems, due to the fact that the user was not contending with other users for resources.

> The Lisp Machine terminal consists of two input devices, called the keyboard and the mouse, and one output device called the TV.

It was noted that the keyboard had control and meta keys, and that those two as well as shift could be used in conjunction with regular keys to form chords.  The mouse got a whole paragraph, since mice were relatively new at the time.  The mouse had three buttons.  The TV was a raster-scan device of approximately one million black/white pixels.  Emphasis was made of the (for the time) particularly good resolution, so many more characters could be displayed, compared to other contemporary terminals.


**2) The User Interface**

The users of the system at the time were researchers at the MIT AI Lab.  They had two principal uses for a text editor: 1) producing and debugging Lisp code, and 2) writing English text in the form of academic papers, email, and such.  It was predicted that most users would spend half their time working with the editor.

One of the most important considerations of ZWEI's user interface were compatibility with the PDP-10's interactive editors, so with ITS EMACS.

ZWEI is display-oriented: the text the user is editing is actually displayed (this is relevant because many editors of the time often showed out-of-date text due to efficiency and bandwidth restrictions, putting the burden on the user to imagine what their text looks like currently).
ZWEI is real-time: each command takes effect immediately, and the displayed text is updated immediately.  The update is called redisplay.

As with modern Emacs, ZWEI had a point and a cursor.

Some explanation is given of self-insertion for typing ASCII characters, control commands being given via control characters, and notes that numeric arguments can be provided to modify commands.  He specifically calls out the feature of self-documentation, and that Control-? can be used to access describe-key, and alludes to the existence of other commands like C-h a.  There are some other features and modes he describes, but they are commonplace things any current Emacs user will either know of or find easily.

> Since ZWEI is written in Lisp and lives in the Lisp environment of the Lisp machine, it is in a very good position to interface closely with other elements of that environment.

He does not specifically mention this, but this would not be elisp, it would be the native Lisp which would be MacLisp, and later generations would be Zetalisp and even Common Lisp.

He also mentions that the graphical capabilities of the display allowed the use of different typefaces or fonts, specifically italic and bold, as well as varying sizes and styles, and that these can all be mixed in a buffer.

Regions could be marked with the mouse, as well as through the keyboard-based methods, by holding the left mouse button down whilst moving from one end of the region to the other.  The middle mouse button could mark words or lists at a time, and the right button was reserved for the system.

> The use of the mouse is still considered experimental.  We know of several editors which depend highly on the use of a mouse for input, but we are not convinced that it is better than a keyboard; after more people start using ZWEI, it will be interesting to see how many of them make heavy use of the mouse and how many hardly use it at all.


**3) The Implementation**

> The Lisp Machine's unusual nature played a pervasive role in the design of ZWEI.  The first question, in what language should ZWEI be written, was instantly answered: Lisp.  Since everything in the Lisp Machine is written in the Lisp language, the choice was clear.  The only question was whether some intermediate language should be written in Lisp, and ZWEI written in the intermediate language.
>
>However, it seemed that Lisp Machine Lisp was a sufficiently powerful and comfortable environment for writing a text editor that no intermediate language would be needed.

A pervasive theme throughout this section was that because the Lisp Machine was a dedicated single-user machine, many constraints that influenced the design of previous editors running on terminals connected to time-sharing machines were not an issue.

A lot of this section is devoted to the nuts-and-bolts of the representation and handling of text, but not much about the relations between the various conceptual objects like buffers and modes.

> Text in ZWEI is represented as a doubly-linked list of lines.
The structure that represents a line has the text itself, its length, a list of buffer pointers, a tick representing the last time the line was modified, and of course previous and next line.  An associated structure is a buffer-pointer (bp), which is associated with a line, an index of a character within the line, and a status which is one of {normal, moves, temp} (more on this later).  The point and mark, for example, are represented as bps, though they are by no means the only bps.

> ZWEI provides a large number of functions for the manipulation of text, and the arguments used to designate positions in text are buffer pointers.
>
> There are also a wide variety of positioning commands, which take a bp pointing to some text and return a new bp that points some number of characters ahead of the given pointer, or words or lines or Lisp lists or sentences ahead of the given pointer.  The ZWEI user commands are all built out of these functions.
>
> Every time an insertion or deletion takes place, all buffer pointers are adjusted, or relocated, so that they continue to point at the same point relative to the text.

The status attribute of bps mentioned above is used to indicate how a bp should be updated if the insertion or deletion happens right where the bp was pointing.  The normal status means the index is unchanged by insertions before it, the moves status means that the bp is moved to the end of the inserted text.  The temporary bp is used for intermediate bps that don't live long enough to be affected by insertions or deletions.  These bps do not get put in the data structure that is searched for updatable bps upon insertions or deletions.

A third data structure is the interval, which has two components: first-bp and last-bp.  Its content is the text between the two.  The first-bp is normal, so it does not move, and the last-bp is a moves bp, so insertions and deletions in the interval cause the last-bp to move to accommodate.

Some discussion was made of the redisplay algorithm, and how it is different from those generally in use at the time, due to the Lisp Machine being a single-user machine:
> In the Lisp Machine, there tends to be lots of spare computation power lying around for interactive problems. ... Sacrifices were made ... in exchange for simplicity and elegance in the redisplay routines.

**3.5) Organization of the Code**

This section contains some of the most worthwhile bits of the whole paper, to me.  It talks more of generalities, lessons learned, design principles, and such.

> A great deal of programming experience in the past few years has pointed out a peril in the writing of large programs: complexity.  When a program gets very large, and the job done by the program is elaborate and takes some time to explain, the program can get so complex that nobody could possibly keep all of it in his head at once.  When a program is very large and complex, it becomes hard to maintain, modify, improve, or debug.

> ... we used several interesting techniques in the coding to keep ZWEI clear and simple.  Some of these techniques were only possible because of the powerful features of the Lisp macro facility.

ZWEI predates things like Flavors and LOOPS, not to mention CLOS, so structures were used, and macros and macro-defining-macros were used to decouple the instantiation and access to those structures from their representation.

> Lisp macros were also useful for the definition of new control structures, as well as new data structures.  In ZWEI, we created a new iterative control structure called **charmap**, which iterates over characters in an interval.  Intervals are stored as doubly-linked lists of arrays, and the starting point might be in the middle of one array and the ending point might be in the middle of another array.  The code to perform this iteration was not trivial, and someone reading it might easily not understand the function it was performing, even though that function was the conceptually simple one of iterating over characters.  So we created a macro called **charmap** that expands into the double-loop code to iterate over the characters.  It is simple and obvious, and is used in many places, greatly reducing the size of the code and making the functionality obvious at a glance.

> A good deal of time was devoted to considering the right way to modularize various functions, providing smooth functional interfaces that worked out well for many different tasks.  This was often difficult, and several times large pieces of code were re-written as better ways of organizing and modularizing became clear.

They thought a lot about the naming of things, when fighting the problems brought about by the proliferation of incompatible abbreviations:
> It became policy to avoid abbreviations in most cases.  In ZWEI, we made a list of several words that were used extremely often, and established 'official' abbreviations for them, and always used only those abbreviations. ... Words not on this list were always spelled out in full.

> [They were] very careful with function names in general, and to establish naming conventions and calling conventions.  For example, all functions that take some action on an interval of text end in '-interval' ... All such functions take the interval as their last required argument, and then accept an optional argument after that.  If the optional argument is not given, then the first argument is an interval.  If the optional argument is given, then the first of the two is the starting bp of the interval, and the second is the ending bp of the interval.

This allowed them to avoid the construction of intermediate aggregate values just to satisfy calling conventions.

> There are several conventions of this type used throughout ZWEI.


**4) The Future**

This section is a couple of pages, and talks about the graphics capabilities and how they allow the use of different typefaces, and also about structured text.

**4.2) Structured Text**

They describe the text editor NLS, which was a structure editor, and talked about how it was an appealing idea, but that ZWEI does not currently do this kind of thing.

**References**

[Anderson] Anderson, Owen T. ""The Design of an Editor-Writing System"", S. B. thesis, Dept of Physics, MIT, Feb. 1979

[Ciccarelli] Ciccarelli, Eugene E., ""An Introduction to the EMACS Editor"", MIT Artificial Intelligence Lab Memo 447, January 1978

[English et al] English, W. K., Engelbart, D. C., and Berman, M. L., ""Display Selection Techniques for Text Manipulation,"" *IEEE Transactions on Human Factors in Electronics*, Vol. HFE-8, No.. 1, March 1967

[Greenberg 1] Greenberg, Bernard S., ""Real-Time Editing on Multics"" Multics Technical Bulletin 373, April 1978, Honeywell, Inc., Cambridge Mass.

[Greenberg 2] Greenberg, Bernard S., ""The Multics MACLISP Compiler--The Basic Hackery.,"" Unpublished paper, December 1977. Available from author, Honeywell Inc., Cambridge, Mass.

[Reed and Kanodia] Reed, David P. and Kanodia, R., ""Synchronization with Eventcounts and Sequencers,"" CSR Request for Comments #138, Laboratory for Computer Science, MIT.

[Stallman] Stallman, Richard M., online EMACS documentation, MIT Artificial Intelligence Laboratory.

[Weinreb and Moon] Weinreb, Daniel L. and Moon, David A. ""The Lisp Machine Manual"", MIT Artificial Intelligence Laboratory, 1978.

----

**Edit**: fixed a few formatting problems and typos, made very minor phrasing and grammar changes.

**Edit 2**: have added the complete References section",16,79,A synopsis of Dan Weinreb's undergrad thesis: A Real-Time Display-oriented Editor for the LISP Machine
"[https://github.com/manateelazycat/emacs-application-framework/blob/master/screenshot/org\_previewer.gif](https://github.com/manateelazycat/emacs-application-framework/blob/master/screenshot/org_previewer.gif)

I just write new application to make org-file realtime in emacs.",11,80,Org file realtime preview in Emacs
,4,77,Emacs as a musical instrument
,10,80,RMS: Please help proofreading the Emacs manual
"Part of the beauty of Emacs is its extensibility, but part of it is how capable it is out-of-the-box. What're some of your favorite lesser-known built-in Emacs commands? 

Two of mine are:

`C-u C-x r N` which is a prefixed `rectangle-number-lines`. With the prefix argument, you get some really nice control over what kind of numbered list you want to insert. 

Not sure if this one is well-known or not, but I've really enjoyed the new `C-h o` `describe-symbol` command (new in Emacs 25) to get info on a symbol's variable and function. ",82,82,Favorite built-in Emacs command(s)?
,24,79,First Emacs 25 pretest is out
,85,79,"Eli Zaretskii: ""One of the gravest problems I see for the future of Emacs development is that we slowly but steadily lose old-timers who know a lot about the Emacs internals ... If this tendency continues, we will soon lose the ability to make deep infrastructure changes"""
"1: Add `(set gc-cons-threshold 100000000)` to the beginning of your init file.

`gc-cons-threshold` is the number of bytes of consing before a garbage collection is invoked. It's normally set at 800,000 bytes, but for me that invokes the GC 39 times!!! during startup (`gcs-done`), and the GC is sloooow. I've set it to ~100MB above, because I have 16 GB of RAM. And now no GC invocations during startup, and 600ms shaved off my startup time.

2: Wrap your init file inside `(let ((file-name-handler-alist nil)) <init file>)`

Normally file-name-handler-alist is set to 

    ((""\\`/[^/]*\\'"" . tramp-completion-file-name-handler)
    (""\\`/[^/|:][^/|]*:"" . tramp-file-name-handler)
    (""\\`/:"" . file-name-non-special))

Which means on every .el and .elc file loaded during start up, it has to runs those regexps against the filename.

This shaved another 200ms off my startup time.

3: Bonus step if you're willing to recompile Emacs

Apply this [diff](https://gist.github.com/bsuh/e7cba8a61f482b8d8687)

Emacs uses `getc` to get characters from a `FILE` handle, when loading .el (and maybe .elc) files. `getc` is thread-safe by using locking mechanisms. Well when you are calling `getc` a lot in a loop and you have a single-threaded process, it doesn't make sense to pay the overhead of locking for thread safety. I replaced `getc` with `getc_unlocked`, and was rewarded with another 200ms shaved init time.

Overall, my startup time went from 1.5 seconds to 0.5 seconds! Happy emacs'ing :)",53,80,2 easy little known steps to speed up Emacs start up time
,4,80,GNU Emacs' move to Git is basically done!
,33,81,Why I Use Emacs
"Some users who missed the Kickstarter campaign have asked whether they can still buy some stickers. Now you finally can! I don’t have that many, so better hurry. The price is the same as if you backed the crowdfunding campaign, which isn't cheap, but remember you are primarily paying for development time.

If you have donated elsewhere in the past, then you can also get some stickers for free. Again, act fast.

Please see https://magit.vc/buy/ for more information.

Cheers,
Jonas",10,76,Magit stickers are now available for everyone
,11,78,Emacs 26.1 Should Be Released Very Soon | Irreal
,14,79,Beginner's Guide to setting up a basic Emacs C++ IDE-ish environment from scratch (clang/RTags/cmake-ide/company/irony)
,6,82,On Today's New York Times crossword (x-post /r/linux)
,10,77,The Continued Existence of the Emacs IPython Notebook
,11,78,"John Wiegley: ""many of my fears at the prospect of merging this [concurrency] branch"" have been allayed"
,7,79,Fancy Rust development with Emacs
,29,80,Composable editing for Emacs
"I'm a recent CS grad. My sophomore year I discovered vi. My homework consisted of 1) Tweaking my vi configs 2) Not doing homework. I absolutely loved the efficiency and ergonomics of it. Every time I had a project partner, I felt the extreme superiority over their arrow-driven development.

Then I got a job. I expected to continue to be the hottest guy around. And as I watched the windows guys and their Notepad++/Sublimes, I wasn't proved wrong.

Yet there was that guy. You know, the one in the corner with a hand-made standup desk and a weird Linux distro. The one whose name you see in every file you open, every project you clone. The one that has an aura of mystery around him.

He was an Emacs user. ""Emacs"" I thought? Is that the editor that this old weird professor used? The one who taught an awfully boring theory class? Why?

I checked it out. And oh boy I wasn't dissapointed as he fussy helm find into multi occur to edit multiple files all over a tramp session on a remote machine. ""No way"" I thought.

So I started my Emacs journey. I became this weirdo that doesn't have Atom installed on his machine. The one whose team lead probably secretly hates as I spend too much time hacking elisp. But I've discovered it. This beautiful tree of functions that mapped to keys which you can easily explore and learn about. I've discovered the beauty of Lisp.

There was no turning back to vi, or any editor at that point. An editor junkie finally found his editor nirvana.

Few months passed, and now I'm delving deep into company-mode source code to troubleshoot why help pops up show on the wrong monitor while trying to understand the byte-code printed notation and the hacky way regexes are implemented.

So I'm asking you Emacs gurus - having many years of editors/emacs experience and all the ways it is imperfect and old, is it still the best long term editor choice? Will I regret investing time into learning Emacs well given that there are editors with(as they claim) better and more modern architecture(like NeoVim/Atom?

Would you tell 20 year old you now to choose Emacs?",83,77,Would you tell 20 year old you now to pick up and learn Emacs?
,8,80,Video demonstration of Magit includes rebasing
,18,81,Emacs Rocks Episode 15 - restclient-mode
,29,79,"An introduction to Magit, an Emacs mode for Git"
"So, you went and learned the org-mode basics and tried it out for a while. Was it worth learning, how do you personally see it? Did you manage to get some added value to your life when using it? How long did it take you to learn some basics?",61,77,"org-mode, is it worth learning?"
"Hey there! These last few days I've been rewriting my agenda from scratch and thought that I should share it here, because I have never seen it done like this before.

For contextualization, around February I created one based on [Bernt's agenda](http://doc.norang.ca/org-mode.html). As time passed, I continued adding more and more things to it, as I was adapting my workflow (first time using GTD, so I was learning GTD and org-agenda at the same time!). I have posted about it [in here](https://www.reddit.com/r/emacs/comments/8d42wu/how_do_you_use_orgmode/dxkf564/) (there's a screenshot).

It had some problems:

* It wasn't fast (not slow either, but well...). As it had lots of different commands, each one with different match strings and skip functions, it had to parse the agenda file several times, and some commands even processed multiple headings to check if one would end up there (for example, for the projects list).
* It was ""a hack"". The best example of this is the projects list, which had to check all the subheadings to know the project status of the parent (stuck, planned, next), and had to change the prefix of each subtask correctly. Also, it inserted [Zero-width spaces](https://en.wikipedia.org/wiki/Zero-width_space) on the top-level projects, in order to make them bold in a finalize hook. Which brings me to the next two points...
* A project was not a project, it was multiple independent headings being analyzed in order, not a structured thing. Which means I couldn't sort it, for example.
* Changing it was hard. Every variable set in `org-agenda-custom-commands` had a reason to be there and, many times, when I found something I didn't like, changing it would introduce unintended changes on other things.

After some time I had an idea of parsing everything myself, obtaining everything I needed in only one go!

In the description, `org-agenda-custom-commands` says that it supports user-defined functions, so that's what I did. I must say, **it wasn't easy**, I had to read lots of functions in `org-agenda` because there was *literally* no documentation in how to write a agenda that will work correctly - there are a lot of different magic text properties that must be set, for example.

I ended up implementing it with `org-element`, with a depth-first algorithm, and I must say it works very well and is faster than the previous one. I hope this serves as a reference if you also want to do it, as it is easier than reading random functions in `org.el` and `org-agenda.el` :D

[The implementation is here](https://github.com/weirdNox/dotfiles/blob/26c5c2739aff28af5ed4d6f243c7ec0e9b581821/config/.emacs.d/config.org#agenda), and here you have an example screenshot with both the Org file and the resulting agenda.

[Example agenda \(with a font like PragmataPro, the gaps in the arrows go away!\)](https://i.redd.it/n3exnnl2qe811.png)

Sorry for the wall of text, I hope this helps you if you are in the same boat as I was a few days ago! :)",8,78,"Completely custom org-agenda, with support for GTD projects"
"Seriously, nothing has improved my Emacs experience more than taking some time to learn elisp. I don't even know much of it, but I'm confident I can implement and later modify simple editor features when I want them. I can't even describe the feeling of realizing you can program Emacs to do anything.  It's incredible. 

If I need a quick fix for some weird behavior, I can implement it relatively easily.  It doesn't take but a couple hours (and you can spread that out over a few days) to learn the basics.  Best of all, it compounds.  If you have to use the help system to figure a couple things out, you'll get the hang of it and you won't spend so much time googling how to do *xyz*.",27,75,Learn some elisp
,25,78,Ivy 0.10.0 available on GNU ELPA
,7,75,Mastering Emacs ebook is 50% off for 4 days - it’s a good intro into Emacs
,22,80,Why you should use Magit: a Git porcelain inside Emacs
,23,77,Native line numbers landed on master
,12,78,How to Write Fast(er) Emacs Lisp
,5,77,"Old Glory of a Hacker: jwz, emacs, and Ann Arbor Ambassador 60 Terminal"
"Hi! I've been a Vim user for most of my programming life, but last year I decided to switch over to emacs + evil mode. I'm really happy with it, Emacs is excellent. 

As I said, I've been using evil mode for my day to day programming because Vim-style editing is second nature to me at this point, but I want to learn the ""Emacs way"" of text editing. The non-modal way. I wanna at least give it a fair shot, and if nothing else, I enjoy training my brain to become good at using tools like these. 

I've taken to switching over from evil to ""regular emacs"" for about 30 minutes a day after lunch for the few weeks, and I can, slowly, get some regular work done. I've printed out a cheat sheet and hung it next to my screen for all the keyboard stuff, but I mostly end up doing the ""simple"" motions over and over again in a way that feels clumsy. You know, C-n/C-p to find the right line, then M-b/M-f to find where I wanna change something, then some random kill commands/typing to get what I want. Sometimes in sheer desperation i just revert to the arrow keys and backspace. It feels clumsy and slow and like I'm not using Emacs like I should. 

One of the major problems is that I don't know what ""effective editing"" in Emacs looks like. What does it look like when somebody who's used Emacs for decades edits a text file in their day-to-day and all the keys are second nature\`? Whenever I try and find a video like that on YouTube, it's always either a talk, or someone teaching the basics very slowly. Which I'm not interested in so much: I want the real pros. I want to see how it SHOULD be done. Preferably in a C-like language, but I'm not picky. It would also be nice to see what keys they are using, but it would be interesting even without that. 

Any recommendations for videos like that?",41,81,"Videos demonstrating ""pro level"" use of emacs for programming?"
"Another week, another trick. For this week, I wanted to put to honor `ivy`,  a generic completion mechanism for GNU Emacs who is a true Swiss Army knife when combined with `counsel` (a collection of Ivy-enhanced versions of common GNU Emacs commands) and `swiper` (Ivy-enhanced alternative to `isearch`). Know that there are other alternatives like `ido` (provided by default with GNU Emacs) and `helm`. After experiencing these three packages, I liked `helm`, but to be honest, I wasn't using all of its features and I was looking for a lighter and faster solution. That's why, it's already a few years since I chose `ivy` and which corresponds entirely to my workflow. Please note that my choice may vary according to your criteria 😊

[Overview of ivy](https://i.redd.it/i1x3l7cpyjb11.png)

The picture above shows the user-friendly interface that `ivy` offers, which is easily customizable since there are many packages created by the community. For instance, when I have to change the buffer, I can directly know its size, the language used, the `.git` repository name and its path. I love it! 😇

A simple and elegant configuration to produce the above result, can be done as follows:

    (use-package counsel
      :after ivy
      :config (counsel-mode))
    
    (use-package ivy
      :defer 0.1
      :diminish
      :bind ((""C-c C-r"" . ivy-resume)
             (""C-x B"" . ivy-switch-buffer-other-window))
      :custom
      (ivy-count-format ""(%d/%d) "")
      (ivy-use-virtual-buffers t)
      :config (ivy-mode))
    
    (use-package ivy-rich
      :after ivy
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))
    
    (use-package swiper
      :after ivy
      :bind ((""C-s"" . swiper)
             (""C-r"" . swiper)))

Without going into details, this allows you to fully integrate `ivy` with GNU Emacs and already be ready for everyday use.

**NOTE:** `ivy` is always my first interaction when starting GNU Emacs. Using `defer 0.1` avoids waiting a while to launch GNU Emacs before you can interact with it.

Here are some packages you will find useful with `ivy`:

* [all-the-icons-ivy](https://github.com/asok/all-the-icons-ivy): ivy integration for [all-the-icons.el](https://github.com/domtronn/all-the-icons.el);
* [ivy-bibtex](https://github.com/tmalsburg/helm-bibtex/blob/master/ivy-bibtex.el): search and manage bibliographies in Emacs;
* [ivy-gitlab](https://github.com/nlamirault/emacs-gitlab/blob/master/ivy-gitlab.el): `ivy` interface to [GitLab](https://about.gitlab.com/);
* [ivy-hydra](https://github.com/abo-abo/swiper/blob/master/ivy-hydra.el): additional key bindings for `ivy`;
* [ivy-pass](https://github.com/ecraven/ivy-pass): `ivy` interface for `pass`.

**NOTE:** You can find the other packages in the list of GNU Emacs packages (`M-x package-list-packages`). Of course, don't forget to integrate the appropriate package sources.

And you, what are your tips to share with `ivy` (or other alternative)? Looking forward to learning more about your workflow with this one! 🐈

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",27,78,TIP: How to use Ivy and its utilities in your workflow
"To show off your Emacs setup monthly or how you use the Emacs. User may post various parameters along with the posts e.g.  theme, font, config, package etc. 

I would like to call it ""**Ema**gic**s**"".

Inspired from: 

[Vim screenshot showcase](https://www.reddit.com/r/vim/comments/767gfi/screenshot_showcase/)

[Unixporn](https://www.reddit.com/r/unixporn/)

[WatchPeopleVim](https://www.reddit.com/r/WatchPeopleVim/)

[emacsrocks](http://emacsrocks.com/)

Idea is also to inspire Emacs noobs like me to get inspirations from such posts and do **Ema**gic**s**.

>Suggestions are welcome. It would be great if some moderators or active users take the lead to moderate this topic.",23,76,Emacs: screenshot showcase & WatchPeopleEmacs Monthly
,2,76,Coming in Emacs 25.1: Even Better Introspection!
,8,78,/r/emacs hits 10K subscribers
,6,74,Babel and org-mode for devops-like work.
,12,78,Emacsair! Many new releases
,16,77,A blog in pure Org/Lisp
"I'm not sure how I am going to survive right now. Melpa is down. Have riots started in the streets yet? My bug-out bag is all set and I'm about to drive away in my Deuce and a Half.

EDIT: [Proof](https://imgur.com/HopiV2v) for the historians/survivors that look back at this point in history.

EDIT2: It's back up. I only went through 1/2 of my food supply - stay prepared people! Looking forward to hearing more about this crisis on the news.",25,76,🚨This is not a drill!🚨 Melpa is down right now!
,15,73,2017-11-06 Emacs news
,12,76,A Complete Guide to Email in Emacs using Mu and Mu4e
,6,74,orgzly/orgzly-android: Orgzly for Android is now opensouce
,17,80,Emacs and Elisp programming by Examples
,51,77,Orgzly 1.0 is out - org-mode on mobile
,13,76,"TIL that each release of GNU Emacs comes with an 'Antinews' section in the manual, which describes functionality lost by using an earlier Emacs version."
,30,73,Robin Templeton on the state of Guile-Emacs
,4,75,Evolution of Emacs Lisp (PDF)
,43,74,Why emacs is a great text editor
"/edit: The multiroot feature are merged into master now.

Hello /r/emacs,

you might remember [treemacs](https://github.com/Alexander-Miller/treemacs/tree/multiroot) which I've advertised here a while ago (there's a [changelog](https://github.com/Alexander-Miller/treemacs/blob/multiroot/Changelog.org) now if you're curious what's happened since). 

Now I want to tell you about and get feedback on the Next Big Feature. Long story short treemacs will be moving away from the one-filetree-to-rule-them-all approach and will instead learn to dispay multiple filetrees - projects as I call it - at the same time. Instead of being a better neotree it's now moving in the direction of something like the project explorer of eclipse. The new design will provide much improved flexibility as you will no longer need to rely on creating more frames to have filetrees for multiple disjoint projects at once.

It also opens up the potential for displaying a tree view for something other than the filesystem, like your buffer list, split by major-mode/project/perspective/whatever else.
 
The work for multiple project display, at least a first basic version, is mostly done. What I am hoping to get out of this thread is for you guys to do me the favor is to read the [docs](https://github.com/Alexander-Miller/treemacs/tree/multiroot#projects-and-workspaces) or [design discussion](https://github.com/syl20bnr/spacemacs/issues/10432) or better yet [try the feature branch directly](https://github.com/Alexander-Miller/treemacs/tree/multiroot) and tell me what you think, what's missing, what's buggy etc. The more feedback I get on what people want to see and what they expect before I make the push to master the smoother and less surprising the change to the new version will be, and I'm expecting to break a lot of habits as it is.

If you want to give it a go: the [use-package code](https://github.com/Alexander-Miller/treemacs/tree/multiroot#installation) should work for a local installation, just provide the appropriate `:load-path` (not the package root, but root/src/elisp). Calling `treemacs` for the first time will ask you for the first project's location and name, as it will for all new projects. So far projects can be added, removed and renamed. The keybinds for it start with `C-p`. For everything else there's the helpful hydra bound to `?`.",19,79,Treemacs News
,30,78,Check out my emacs color theme
,14,75,MELPA has stopped distributing insecure Emacswiki packages
,51,73,Multiple-cursors rocks!
,8,75,You know it's bad when the first keyboard suggestion before even typing anything.... Is Emacs :-)
,46,75,Concurrency has landed
,11,74,Best Girlfriend Ever!!!
,11,78,Church of Emacs Editorfather
"
    alias magit='emacsclient -n -e \(magit-status\)'

Now from my terminal I can type `magit` and load up my status buffer directly. I should have done this years ago",18,73,Emacs+shell protip: 'alias magit=...'
,4,73,"That occurred to me too, Owen Wilson"
,8,74,Org 8.3 Released
,15,72,Perfect Emacs Setup
,13,75,Magit 1.4.0 is out!
,5,71,What the .emacs.d!? - A blog about emacs settings from Magnars the Emacs Rocks guy
"[https://github.com/nyyManni/ejira](https://github.com/nyyManni/ejira)

I am sharing a library that I have been working with for a while now. It is still in beta phase, and has some rough edges here and there, but it is mostly usable for me already.

I tried org-jira-mode a few years back, but it never quite suited my use case, for a couple of reasons: the clock marker was always destroyed while syncing the data from the server, as the plugin always overwrote the whole ticket subtree. The performance was also really poor because of the limitation of \~1 requests per second when using the basic auth. Also, all the text content would be in JIRA markup format which does not have good editing capabilities in Emacs.

Ejira resolves the previous issues by doing the synchronization by only updating the body of a block, not the properties or headings. It also uses cookie-based authentication to go around the request frequency limit. The JIRA markup is parsed by a custom parser (JIRA markup, unlike HTML, seems to be somewhat parseable with regular expressions... ;) ), and the outgoing data is exported using ox-jira -library.

The library is not yet on melpa, so manual installation only. Documentation is probably insufficient, but I try to improve it as issues are found.

I have only been able to test with my employer's JIRA server, and our company's workflow, so most likely new issues will arise when someone tries to use the module in their own work.

This is basically my first-ever larger-scale Emacs-package, so all feedback is welcome!",8,73,Emacs JIRA integration with Ejira
,13,76,Play Emacs like an instrument
"... at my place that is.

If you haven't done so yet, then please fill out the backer survey by Sunday evening. You can change the shipping address until then. On Monday morning I will print the addresses and then spend the rest of the day licking stamps.

Cheers,

Jonas

Ps: A few people who did not back the campaign asked if they could still buy some stickers. I did order some extra stickers, so yes, but since I am behind shipping out the already payed for stickers I will complete that task first.",7,75,The Magit stickers have arrived
,5,73,Literate Devops with org-mode
,22,73,"Steven Pinker mentions Emacs in his ""The Language Instinct"""
"Greetings r/emacs, [iOS MobileOrg](https://github.com/MobileOrg/mobileorg) maintainer here.

I know it's been far too long since any updates and for some time the app has been back in the app store but stagnant. That is changing now due to renewed interest in providing updates and releasing a new version.

A version is already in process with TestFlight and we're looking to get an updated app and documentation site released asap.

If you're an org-mode and iOS user your input would be 
much appreciated on this [usage survey](https://github.com/MobileOrg/mobileorg/issues/100). We're hoping that understanding common mobile usage patterns will make it easier to prioritize improvements and feature development.

Feel free to take a look at the other issues and add your input.

If you're interested in contributing at all with either feature development, documentation, bug fixes or even issue gardening let me know.

",16,73,Resurrecting and refreshing MobileOrg for iOS
,33,71,"John Wiegley: ""I'd much rather we re-examine the goals we want to achieve with concurrency, an[d] then ask if there are other ways to get there besides, well, concurrency."""
,4,74,Introduction to org-ref (a beautiful citation management tool integrated with org-mode)
,10,74,SciFi author Tony Ballantyne on emacs
,25,71,Emacs: Down The Rabbit Hole
,9,74,Emacs 23.2 released! Lots of changes. CEDET is now part of Emacs.
"TL;DR:

1. Elisp script to install all packages very fast with parallel processes. \[[gif](https://imgur.com/a/pWWZqwK)\]

2. Work with use-package.

&#x200B;

[https://github.com/tttuuu888/.emacs.d/blob/master/install.el](https://github.com/tttuuu888/.emacs.d/blob/master/install.el)

&#x200B;

This is simple elisp script to install all packages very fast with parallel processes. The main ideas are first, making package list with modified `use-package` macro. Second, installing packages with multiple `async-shell-command`.

&#x200B;

This works with 3 conditions.

1. All packages are maintained by 'use-package'

2. `(setq use-package-always-ensure t)` is included in config so that `use-package` for external package does not have `:ensure t` keyword.

ex) 

        (use-package company
            :init
            (global-company-mode 1))   

3. `use-package` with `:ensure` keyword will not be tried to install.(regarded as internal package)

ex) 

        (use-package paren
            :ensure nil
            :init
            (show-paren-mode t))

&#x200B;

You can start this with below command:

    emacs -l ~/.emacs.d/install.el -batch -init

(This will remove \~/.emacs.d/elpa directory and start from scratch. To test, backup the directory beforehand.)

&#x200B;

I have been looking for a way to install all packages faster with minimal dependencies when setting new computer. Then I came up with this idea and wrote this script. Maybe this is not new or there may be a better solution but anyway I wanted share this since I have learned a lot from here.

&#x200B;

I wrote this for personal use at first and updated it for general use, but there may be other conditions that make this script not work properly.

&#x200B;

I hope that this script and ideas are useful somewhere so that others, including myself, will be able to take advantage of it again. Thanks!

&#x200B;",10,73,Elisp script to install all packages very fast with parallel processes
,28,75,A mythical editor so powerful and infinite in its capabilities that people were afraid to approach it
,10,75,Emacs: How to record and save your own macros for future use
,21,71,Helm development in bug-fix-only mode for now
,4,72,"An Org query language, or Prototype code for a next-generation Org Agenda"
"Another week, another trick. This week, I will present you my way of using `erc`, following the recommendation of several people. I apologize in advance for the relatively long post, I just like to be complete so that anyone can understand this post. First, for those who don't know IRC, it's roughly, which allows you to communicate with other people in real time on different channels. IRC is the best way for me to get a quick answer to a simple question and to learn from more competent people than me on a subject. For example, what I like to do when I learn a new language is to join their IRC channel, scan the logs at the end of each day and try to understand the questions with their answers asked. At first, it's confusing, but little by little I am familiar with the vocabulary used.

Before going any further, here is what my `erc` looks like:

[After ERC configuration](https://i.redd.it/0rk9stel5h011.png)

If you're still interested in knowing more, then let's keep going!

The question you need to ask yourself is how to use IRC so that it saves you more time than waste, because we quickly tend to spend our days sailing between the different channels, a bit like on Reddit. For my part, I wanted a configuration that was pleasant to read, targeting only what is necessary to be read and that informs me when someone has answered my question.

Without going into details, here is the beginning of the configuration that I use:

    (use-package erc
      :custom
      (erc-autojoin-channels-alist '((""freenode.net"" ""#archlinux"" ""#bash"" ""#bitcoin""
                                      ""#emacs"" ""#gentoo"" ""#i3"" ""#latex"" ""#org-mode"" ""#python"")))
      (erc-autojoin-timing 'ident)
      (erc-fill-function 'erc-fill-static)
      (erc-fill-static-center 22)
      (erc-hide-list '(""JOIN"" ""PART"" ""QUIT""))
      (erc-lurker-hide-list '(""JOIN"" ""PART"" ""QUIT""))
      (erc-lurker-threshold-time 43200)
      (erc-prompt-for-nickserv-password nil)
      (erc-server-reconnect-attempts 5)
      (erc-server-reconnect-timeout 3)
      (erc-track-exclude-types '(""JOIN"" ""MODE"" ""NICK"" ""PART"" ""QUIT""
                                 ""324"" ""329"" ""332"" ""333"" ""353"" ""477""))
      :config
      (add-to-list 'erc-modules 'notifications)
      (add-to-list 'erc-modules 'spelling)
      (erc-services-mode 1)
      (erc-update-modules))

Roughly, this makes it possible to make a nice margin for the display, allow a connection using the password from my `authinfo.gpg` file, avoid warning me when a user joins and leaves a channel, enable notifications and the spell checking on the fly.

Besides, for people like me, who want to store your password in a *GPG* file, you just need to specify a file priority list, to tell `erc` where to start looking for your password first:

    (setq auth-sources '(""~/Sync/shared/.authinfo.gpg""
                         ""~/.authinfo.gpg""
                         ""~/.authinfo""
                         ""~/.netrc""))

and of course, don't forget to add this line in your `.authinfo.gpg` file, where *\<nickname\>* and *\<password\>* match your real information:

    machine irc.freenode.net login <nickname> password <password>

**NOTE:** replace `auth-sources` with the one that suits you best.

If you are still with me, I will list you some functions that I use, which allow to complete the configuration presented above.

– In order to avoid opening several `erc` instances, I use a function that will ensure that only one connection instance exists:

    (defun my/erc-start-or-switch ()
      ""Connects to ERC, or switch to last active buffer.""
      (interactive)
      (if (get-buffer ""irc.freenode.net:6667"")
          (erc-track-switch-buffer 1)
        (when (y-or-n-p ""Start ERC? "")
          (erc :server ""irc.freenode.net"" :port 6667 :nick ""rememberYou""))))

– Another thing that I like, is to automatically receive a notification when I get a private message, or when my nickname is quoted on a channel so I can respond quickly. This notification includes as title the pseudonym of the person as well as his message as content:​​

    (defun my/erc-notify (nickname message)
      ""Displays a notification message for ERC.""
      (let* ((channel (buffer-name))
             (nick (erc-hl-nicks-trim-irc-nick nickname))
             (title (if (string-match-p (concat ""^"" nickname) channel)
                        nick
                      (concat nick "" ("" channel "")"")))
             (msg (s-trim (s-collapse-whitespace message))))
        (alert (concat nick "": "" msg) :title title)))

– One thing that bothered me about `erc` was that I liked to know how many people were on the channel so I could get an idea if I was going to get a quick answer or not. This is done with the following code:

    (defun my/erc-count-users ()
      ""Displays the number of users connected on the current channel.""
      (interactive)
      (if (get-buffer ""irc.freenode.net:6667"")
          (let ((channel (erc-default-target)))
            (if (and channel (erc-channel-p channel))
                (message ""%d users are online on %s""
                         (hash-table-count erc-channel-users)
                         channel)
              (user-error ""The current buffer is not a channel"")))
        (user-error ""You must first start ERC"")))

– From time to time I wanted to copy and paste a source on a channel, and get myself kicked for spam after sending this message several times in a short time. To avoid these problems, this function comes to your rescue:​

    (defun my/erc-preprocess (string)
      ""Avoids channel flooding.""
      (setq str
            (string-trim
             (replace-regexp-in-string ""\n+"" "" "" str))))

– Two other packages I like to use. The first package is `erc-hl-nicks`, which allows me to associate a color with a pseudonym. I find it convenient because it gives me a first visual impression if a person answered. Finally, the second package is `erc-image`, which automatically displays images as links, on a channel. This allows me to avoid having to click on the link to see the image:

    (use-package erc-hl-nicks
      :after erc)
    
    (use-package erc-image
      :after erc)

In order to not overload this post, you can find my complete configuration on [GitHub](https://github.com/rememberYou/.emacs.d).

Feel free to complete this post by sharing a few points of your configuration that you want to share, as well as various packages that you use.

See you soon on IRC! I wish you a good evening or a good day, Emacs friend!",12,70,TIP: How to make ERC fun to use
,10,72,GitHub - alphapapa/org-sidebar: A helpful sidebar for Org mode
,10,69,Working with log files in Emacs
,17,70,When Your Enemy is Also Your Secret Santa
"Hi folks! I've been putting together a [weekly summary of Emacs-related links](http://sachachua.com/blog/category/emacs-news/), which is mostly just shamelessly taking advantage of the awesome sharing y'all do on /r/emacs, /r/orgmode, and /r/spacemacs (also Planet Emacsen, Hacker News,  Youtube, the NEWS file, and the emacs-devel mailing list). It's available on Planet Emacsen and the [emacs-tangents mailing list](https://lists.gnu.org/mailman/listinfo/emacs-tangents), plus as an RSS feed (of course). Managed to keep it going for more than a year, yay! People find it handy as a categorized list of highlights.

Any thoughts on how to make this more useful for y'all? 

* Sidebar link on /r/emacs? 
* Posting weekly entries to Reddit? Link post? Text entry with lots of links?
* Fewer entries? More entries?
* More description?
* Other categories? Beginner/Intermediate/Advanced sorting, whatever that means?
* Monthly highlights?
* Put it on a separate site?
* Go back to posting randomized entries on Twitter through [@emacs](https://twitter.com/emacs)?
* ...

Nothing super time-consuming (so no elaborate videos demonstrating new packages, unless someone wants to volunteer!), but I'll see what I can squeeze in during my midnight writing session while the baby is asleep. =) 

Thanks for all your contributions!",32,74,What would make Emacs News better?
,27,73,Emacs Chat: John Wiegley on maintaining Emacs and how you can help
"it's been quite a while since there has been any new discussion of emacs themes. so, here we go: which emacs theme do you use ?",113,72,2015 emacs theme thread
just wanted to let you guys know. this should be a bit easier to remember.,31,70,melpa.milkbox.net is now melpa.org
,26,76,Guile Emacs accepted to Google Summer of Code
,47,73,"Since there's vim.sexy, I created emacs.sexy with the goal of being a good starting point for Emacs enthusiasts"
,17,71,The WikEmacs experiment is over! Long live EmacsWiki!
,54,73,"/r/emacs: Tell us about the obscure, but useful features of Emacs that you know about."
,9,69,"EmacsCast 6: less software and back to defaults and basics, as much as possible"
,3,70,Elsa: Emacs Lisp Static Analyzer
,18,69,The Emacs Guru Guide to Key Bindings
,31,71,These Weeks in Remacs III
,12,67,Emacs 23.1 released!
,12,73,(with-emacs · White Christmas in Emacs
,30,69,The Emacs Guru Guide to Key Bindings | wilfred.me.uk
,54,67,My weapon against Emacs Pinky
,14,71,Andrew Hyatt’s emacs calc tutorials
,12,68,Video from EmacsBoston: Getting Started with Org-mode
,12,68,Magit v2.3.0 released
,4,70,"Emacs for Writers (Presentation by Jay Dixit, mostly about org-mode)"
,18,69,How to write a book in Emacs
,0,67,The GNU Manifesto Turns Thirty
,0,69,What the .emacs.d
,25,68,Plans for Emacs 24
"I'm happy to announce that we've just released [Next](https://next.atlas.engineer/) browser version 1.2.0!  While some important features are still missing in this alpha (e.g. Download support and VI-style bindings), it's now much more mature and usable.

It is also significantly more hackable than before, with some examples of interactivity with external process (here Emacs) put on display in the following article:

https://next.atlas.engineer/article/emacs-hacks.org

News from the change log:

- Add RELOAD-CURRENT-BUFFER command and bind it to C-r
- Add NEXT-VERSION command

It reports the commit hash if it was not built on a tag version.

- Add cookie support

GTK implementation has per-buffer cookie support.

- Report page load status to echo area
- Add COPY-TITLE command and bind it to M-w
- Add COPY-ANCHOR-URL command and bind it to C-x C-w
- Add COPY-URL command and bind it to C-w
- Add PASTE command to minibuffer and bind it to C-v and C-y
- Add common movement commands to minibuffer

For instance `cursor-forwards-word` is bound to `M-f` by default.

- Add ""echo area"" to display status messaages
- Set window title dynamically
- Embed/Replace build dependencies in the Cocoa port

It now builds out of the box, with no need for external libraries.'

- Add commandline arguments to the Cocoa platform port
- Report user configuration errors
- Save platform logs to /tmp/next-$USER/

Get it from your package manager or from https://next.atlas.engineer/download!  Feel free to register on the download page if you'd like to fill in the survey and participate into steering the future development directions of Next!
",30,69,Next browser 1.2.0 is out!
,13,66,"Discussion about removing all EmacsWiki packages from MELPA: ""Emacswiki packages should be removed because they pose a huge security risk"""
,2,71,Emacs Rocks! Episode 16: dired
"After reading a number of Guile-Emacs threads, [Guile Emacs: Is anyone still working on it?](https://www.reddit.com/r/emacs/comments/6zavn8/guile_emacs_is_anyone_still_working_on_it/), [Guile Emacs Status? : emacs](https://www.reddit.com/r/emacs/comments/3gpb7u/guile_emacs_status/) I have come to the opinion that the real issue is that as far as being Lisp goes, the Emacs/elisp combo is considered a dead end technology.

The questions that come up are:

1. Based on its underlying design is there a future for Elisp as a LISP outside Emacs and the utilities like Org, Gnus, Magit which have developed around it?

2. Does an Elisp based on the Guile VM offer a better foundation for both Emacs as editor, and for any other Elisp related development than the current system?

3. If the purpose of moving to Guile-based Elisp is mainly to provide an improved editor will it be worthwhile to port all the accumulated code or at least the most important parts to the Guile based system?

4. When the newer features like FFI, dynamic modules, become more popular and people start to push Emacs further and further in its role as an editor and other things besides will they become frustrated with Emacs lisp limitations sooner rather later, and feel they would have better up developing around Guile or some other LISP alternative?

When it comes to being an editor, it is those with a good knowledge of emacs internals who can judge these issues. They could argue that with all the new features arriving in Emacs it will be an interesting and exciting place for a long time, ie good enough to see most of the current users to retirement or to meet their forseeable needs for the near future. Or, they could argue that the pain points will arrive sooner rather than later, and thus it would be a good idea for others to start piling into Guile Emacs or some other alternative whilst they (emacs-devel) focus their efforts on taking the current system as far as it can.


I get the impression that there is a desire to create a new LISP development experience,  something akin to Pharo for Smalltalk, Eclipse and Netbeans for Java, or Lazarus for ObjectPascal and that despite a lot of Lisp work being done with Emacs,  the Guile VM by means of porting Emacs to it is considered to be a better path forward, a foundation for a future GNU or GPL'd Lisp IDE and ecosystem, which goes beyond simply being an editor.

Xah Lee raised some similar points on [RMS supports Language Server Protocol integration into Emacs core](https://www.reddit.com/r/emacs/comments/696pv1/rms_supports_language_server_protocol_integration/dh4mhzi/)

My view is that it is better to develop a brand new Lisp based IDE, and use the knowledge gained from developing and using Emacs to build its editor especially if its editor is to be standalone editor as well. The benefit of developing Guile/Emacs is that it draws in a community and leads to greater exploration of ideas, techniques and concepts that will help that ideal along.

But folks should realize that /u/eli-zaretskii, /u/wasamasa, u/jwiegley et al  are **developers of an editor** and **their focus is on emacs as an editor**, not as a **gateway to THE 21st century Lisp experience**.

I think /u/wasamasa shouldn't get or sound so irate when the topic comes up again and again.

But I think in all these arguments the deeper underlying issue has been ignored. Which is that over the past 25 years most of the effort which should have gone into bringing the development environments like Smalltalk, LISP, Prolog (the opensource/free/libre variants) into the 21th centry etc has been channelled into dead-end Javascript. Java and browser-based/Javascript's UI frameworks (an entirely separate category with unending variations and iterations, eg [Atom](https://www.reddit.com/r/programming/comments/6zomuq/atom_github_announces_atomide/)). The hacker itch has been channelled into those systems and as such the environments like LISP, Smaltalk etc which were seen as the most productive in the 90s, have lost their impetus and their personnel, and need some new blood to pick them up now that the now older developers are looking to move on to other things at that stage in their lives.

Those areas need to be re-explored and rebooted by a new generation, and help for that won't be coming from the Big 4 and Mozilla who are focused on developing around subsystems whose purpose is to keep consumer's eyes [glued to their phones](https://www.youtube.com/watch?v=FHJzTtWBT7A).",79,70,"Guile needs a community, Elisp/Emacs needs a technology"
,10,69,Emacs 25 is out! What are the new features and what were my predictions
"So I am new to emacs and I have to tell you, I am quite the monkey on shrooms looking out at the starry nights. I am sure I am trying to do much more than I should. Was wondering if you guys could share your learning experience.",150,68,"If you were to learn Emacs all over again, what would you do differently?"
,25,67,Writing A Spotify Client in Emacs in 16 Minutes
,4,66,What’s New in Emacs 24 (part 2)
,38,67,Emacs text shaping using Harfbuzz
,10,67,The new Indium
,21,65,Nuage v0.1: M+aking+x org-mode awesome on the web
,31,65,Org-Chef: manage and extract recipes with org-mode
"mistakes were made, packages were deleted. rebuild is in progress.

cause was server maintenance to avoid this very problem. follow [@melpa_emacs](https://twitter.com/melpa_emacs) for more up-to-date news. sorry for the inconvenience.


",16,68,MELPA full rebuild in progress.
"Hi everyone !

I just wrote a simple package that allows you to write Anki notes in Org-mode and save them to Anki. Check [this link](https://github.com/louietan/anki-editor) out to give it a shot. Not a perfect one, but it works good for me so far, and hope it may be helpful to you :)
",11,65,Create Anki cards in Org-mode
,28,67,Magithub Nov 2017 Update - View issues! Write comments!
,45,67,How do I do this in Emacs?
"I try to keep my computer as secure as possible. One rule I try to stick to is to only use software from the repository of my distribution. I accepted some other package managers too though (gem, pip).

As I realized that emacs ships with it's own package manager, I happily started using it. It only a text editor, I may have thought.

But when I thought about it recently the package manager of emacs seemed to me like a huge security risk.

It:

* is provided with my sudo-enabled user-password (`sudo:`)

* is provided with the decryption passphrase to my PGP key

* can read all my data 


this is pretty much all you can wish for.

The packages that are allowed to operate in that environment are:

* not all transmitted through a SSL connection `http://marmalade-repo.org/packages/` (I had that in my `.emacs` they provide SSL connection now, maybe only my fault)

* are from a repository to that more or less everybody can upload

* …with conflicting and poor versioning

* not signed

* not trusted by a trustworthy party 

* not checked and audited by a trustworthy party

* have unlimited access to all of the privileges emacs enjoys (I know I ask for much here)


The points made here are only what I understand is the case. And I'm not sure I if really did.

Do I misunderstand or miss something?

I guess there are a lot of security concerned emacs users out there. What do you think, what do you do to make your emacs more secure? Is it a good idea to use the distribution provided packages from my linux distribution or would that be only window dressing since the would be as bad audited as the ones out in the wild?

Appreciate any thought and advices. 

**EDIT:** *Markdown*
",43,69,Are emacs package repositories a security risk?
,19,64,The Emacs dumper dispute
"Hello everyone,

TLDR: 
SyncOrg (aka MobileOrg 2.0) [on the play store](https://play.google.com/store/apps/details?id=com.coste.syncorg)

Real version:
I have finally release MobileOrg 2.0, now known as SyncOrg, on the play store. 

As you may know, MobileOrg was an org file parser. SyncOrg is a fork of this project with a more modern UI and a larger focus on file synchronization. With this first release that uses Git to synchronize files, you no longer need to use the application in conjunction with Emacs to synchronize. I plan to add at least DropBox synchronization and Google Drive in the future.

Thanks to redditers who gave me feedback last month, I have corrected a few bugs and the application should be more stable now.


Description of the app:
You create files, in which you creates notes and everything can be stored on your Git repo.
You toggle visibiility by touching the notes and you enter edit mode by swiping a note.

There are 2 read-only files: Agenda and TODO.

* Agenda is an agenda of all your timestamped notes.

* TODO is the list of all your todo items.




You can follow the project on my [GitHub](https://github.com/wizmer/syncorg) and open issues on the [GitHub issues page](https://github.com/wizmer/syncorg/issues).

PS: The reason for the change in name was that I had no answer from the previous maintainer to get access to his PlayStore account so I had to create mine and release under a different name.",25,69,MobileOrg 2.0 renamed to SyncOrg on PlayStore
"Hi all - 

I was wondering if there is a blog post somewhere comparing helm with ivy? I've been using helm for a while, but ivy looks neat and I was hoping to see how they compare without going through the hassle of setting ivy...

Or what's your own experience with them?",105,70,Helm or ivy?
"From http://lists.gnu.org/archive/html/emacs-orgmode/2008-04/msg00009.html 

Carsten says:

> Don't try to set up the ""final"" task managing system from the start. Because you have no idea yet what your system should look like. Don't set up many TODO states and logging initially, before you actually have a feeling for what you working flow is. Don't define a context tag ""@computer"" just because David Allen has one, even though you are sitting at a computer all the time anyway! Start by creating and managing a small TODO list and then develop your own system as the needs arises.",7,66,What people miss when they are new to Org-mode is this ...
,17,65,Emacs IDE functionality
"Since there seemed to be [interest](https://www.reddit.com/r/emacs/comments/3lt3c6/using_spacemacs_modeline_in_vanilla_emacs/) I went ahead and extracted the Spacemacs mode-line as an independent package. There's a [pull request](https://github.com/syl20bnr/spacemacs/pull/3164) open to use it in Spacemacs, so if it's not official enough for you yet, it will be soon.

It's installable from MELPA (unstable) as `spaceline`. The github repository is [here](https://github.com/TheBB/spaceline/tree/master). Detailed instructions are in the readme, but I might have missed something so don't hesitate to ask. It's pretty fresh so there could be bugs. I'm using it myself in Spacemacs with no issues, however. There's still a bit of work in Spacemacs that I chose not to port, so have a look at [this section of the README](https://github.com/TheBB/spaceline/tree/master#why-does-it-look-different) if results are not up to expectations.

This package is also a decently modular mode-line configuration library, so if you're up to it you can use it to build your own mode-lines, so long as you don't mind the general 'look and feel' of Spacemacs. The readme explains how to go about it. Please do not hesitate to contribute themes and segments back.",42,69,Spaceline: Spacemacs mode-line extracted as a package
,12,66,"Emacs 24.4 release candidate scheduled to be released this Friday, official release the Monday after that"
,0,70,The Definitive Guide To Syntax Highlighting
"So I was watching a high quality version of *Tron: Legacy* and I was pausing to look at the computer screens, looking for anything interesting. That's when I noticed there's an Emacs buffer,

[First Emacs sighting](http://i.imgur.com/KW4Di.png)

The young Dillinger is using eshell to kill some processes to stop the young Flynn. 30k lines, he's been busy.

[eshell screenshot](http://i.imgur.com/TKx7R.png)

Apparently he was also goofing off a bit at the meeting.

[Tetris and hanoi buffers open](http://i.imgur.com/AynwU.png) (you can use this screenshot to determine the exact second this scene was filmed)

So, along with *The Social Network* where Emacs appeared all over the place, Emacs played a role in two big movies last year.

Edit: [here's another screenshot](http://i.imgur.com/62WPf.jpg), though not one with Emacs. This system is supposed to be from the 80's, and, while it looks like an authentic session, a number of anachronisms show that they messed up a little bit.
",19,68,Emacs in Tron: Legacy (three images)
,45,69,The Emacs Year in Review · Emacs Redux
,7,68,GitHub - oflatt/esonify: An emacs extension that sonifies your code.
,2,67,Using Emacs 51 - Day to day work with org-mode
,53,67,The Emacs Calculator « null program
,28,64,My emacs.d in literate format and minimalistic with third-party packages (18 of them)
,19,69,The Road to Emacs - Notes of An Evil user
,38,69,org-brain v. 0.4: Major changes to concept map package
,17,63,Vim vs Emacs
,20,70,There are now 3000 packages available from Melpa
,24,66,#ilovefs: Why GNU Emacs?
,9,66,Projectile 0.12 released
,23,68,Using Emacs as an X Window Manager
,24,63,What's new in Emacs 24.4?
,6,63,elisp: it's all Greek to Google Chrome
,44,68,Top quality post
,3,67,Open Source Your Digital Life with Emacs - Linuxing in London - John Stevenson
,24,67,Doing useful things with Emacs Lisp: A beginner's (or lurker's) guide to extending Emacs
"[doom-modeline](https://github.com/seagle0128/doom-modeline) v0.8.1 is released. It's at least 5x faster and deserved to try!

3 new styles are added as well: `truncate-with-project`, `truncate-from-project' and `truncate-except-project'. `truncate-upto-project` is the default style.

```elisp
Given ~/Projects/FOSS/emacs/lisp/comint.el
  truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  truncate-with-project => emacs/l/comint.el
  truncate-except-project => ~/P/F/emacs/l/comint.el
```

The DOOM modeline was designed for minimalism, and offers:

- A match count panel (for `anzu`, `iedit`, `multi-cusor`, `evil-search` and `evil-substitute`)
- An indicator for recording a macro
- Local `python`/`ruby`/`perl`/`go`/`elixir` version in the major-mode
- A customizable mode-line height (see `doom-modeline-height`)
- An error/warning count segment for `flycheck`
- A workspace number segment for `eyebrowse`
- A window number segment for `ace-window`, `winum` and `window-numbering`
- An indicator for `evil` state
- An indicator for current input method
- Highlight project name in buffer information if `projectile` or `project` is available.

More details on https://www.reddit.com/r/emacs/comments/8szdkg/new_fancy_modeline_from_doom/.
",47,63,"Doom-modeline 0.8.1 released, 5x faster!!!"
,25,66,I got inspired to post how I'm taking notes in LaTeX on emacs. suggestions are welcome!
"Another week, another trick. For this week, I will show you how I synchronize my `org` files with several devices, including my mobile phone and my laptop. You should know that I use `org-mode` for almost everything (*e.g.* appointments, project analysis, managing my contacts, personal organization, *etc.*) and one of the concerns I had was that I couldn't see my schedule with `org-agenda` when I was away. For instance, I like to use `org-agenda` to structure the trips I make, and it's convenient to be able to see it at a glance with your phone.

The issue of synchronizing `org` files often arises and it is true that it can be annoying to wait to be in front of your computer to see, add, edit and delete one or more tasks belonging to your `org` files, because we might forget to do so. Fortunately for us, this frustration will no longer exist after this post 😊

To achieve that, here are the two tools I use:

1. [Syncthing](https://syncthing.net/): free and open-source service that allows you to synchronize your files with multiple devices.
2. [orgzly](https://github.com/orgzly/orgzly-android): Android application to manage notes and TODO lists provided by `org` files.

Let's take a closer look at these tools:

1. `syncthing`

It is good to know that I have been synchronizing my `org` files with [Dropbox](https://www.dropbox.com/?landing=dbv2) for a few years. The advantage of `dropbox` and `google-drive`, is that my data are on a cloud service and available when I wanted it. However, `dropbox` is not open-source and I like using open-source applications, that's why I use `syncthing`.

[Overview of syncthing](https://i.redd.it/y8wti8x984h11.png)

In the picture above, we see that I have two folders:

* Agenda: which is used to synchronize the `org` files of my `org-agenda`.
* Phone: which is used to synchronize the files on my phone (*e.g.* backups, music, pictures, *etc.*) with my laptop.

It is important to note that with `syncthing`, your data is not centralized, this implies that your data synchronizes when your devices simultaneously connected with an Internet connection, are registered in your management space to be able to synchronize. This can be a disadvantage if you want to synchronize at any time. Personally, I synchronize my files when I'm at home and I don't need to do that right now.

Finally, here is the command I use with `i3`/`sway` to automatically run `syncthing` when starting my windows manager:

    exec --no-startup-id syncthing -no-browser

**Summary:** if you do not care that your data are stored on a proprietary cloud, then `dropbox` (or `google-drive`) is the best solution since your data will be accessible at any time. If like me, you care about your data, fan of open-source and does not need to synchronize at any time, then `syncthing` will be your best choice.

2.  `orgzly`

This application is just awesome which is regularly updated, I thank every day the contributors for their exceptional work.

However, I must confess that I couldn't yet managed to allow automatic synchronization from my phone to my laptop and it can be frustrating to always do manual synchronization.

[Overview of orgzly](https://i.redd.it/i7wueryb44h11.png)

The picture above gives you a quick overview of the representation of your tasks with `orgzly`. What makes this application great is that you can change a lot of preferences, which will be specific to your personality 😊

**NOTE:** for iOS users, you can use [beorg](https://itunes.apple.com/us/app/beorg/id1238649962) or [MobileOrg](https://github.com/MobileOrg/mobileorg).

That's all for this week, I hope it will improve your daily organization. Feel free in the comments to share your tips regarding your `org` file synchronization (*e.g.* structure set up, useful features, *etc.*) 🐈

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",29,68,TIP: How do I synchronize my org files with my devices
"Another week, another trick. For this week, I wanted to highlight some packages, often put in the shade and that I daily use. As you noticed in the title, this post marks the first of a series of other posts in this style. I hope you will enjoy it 😊

Let's get started!

1. [wiki-summary](https://github.com/jozefg/wiki-summary.el)

How many times a day do you have to do a search to find the definition of a specific term? Pretty boring, I'll give you that. That's why, `wiki-summary` is here to help you. It allows you to get the Wikipedia summary for a term and display the result in a buffer.

[Preview of wiki-summary.](https://i.redd.it/388063k7oae11.png)

Its configuration can be done as below:

    (use-package wiki-summary
      :defer 1
      :bind (""C-c W"" . wiki-summary))

**NOTE:** the default I reapproach to this package is that I have to `switch-window` (`C-x o`), do a `kill-buffer` (`C-x k`) and `delete-other-windows` (`C-x 1`) every time I look for a term. So, I must admit that I would have preferred the focus to be directly done on the buffer that contains the summary after a search and that I could simply leave it with the `q` key. If you have an idea how to do that, I am a taker, knowing that I doubt that this package will still suffer contributions since the last contribution dates back more than 3 years 🐈

**UPDATE:** a big thank you to [oantolin](https://www.reddit.com/user/oantolin) for his solution. This is the updated configuration:

    (use-package wiki-summary
      :defer 1
      :bind (""C-c W"" . wiki-summary)
      :preface
      (defun my/format-summary-in-buffer (summary)
        ""Given a summary, stick it in the *wiki-summary* buffer and display the buffer""
        (let ((buf (generate-new-buffer ""*wiki-summary*"")))
          (with-current-buffer buf
            (princ summary buf)
            (fill-paragraph)
            (goto-char (point-min))
            (text-mode)
            (view-mode))
          (pop-to-buffer buf))))
    
    (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer) 

2. [which-key](https://github.com/justbur/emacs-which-key)

Some people tell me that GNU Emacs is too complicated to use with all those crazy keyboard shortcuts. I often laugh whenI hear that, because I don't know either all the keys and that's why I use `which-key`. On the basis of the executed of a series of key, it will displays you available keybindings in popup after a certain delay. Even the octopus (often representative of GNU Emacs users) sometimes needs a reminder 😊

[Overview of which-key.](https://i.redd.it/2jeiwxjkrae11.png)

**NOTE:** I used [guide-key](https://github.com/kai2nenobu/guide-key) in my past days, but there's no reason to use it anymore with `which-key`.

Here's how to configure this package:

    (use-package which-key
      :defer 0.2
      :diminish
      :config (which-key-mode))

3. [paradox](https://github.com/Malabarba/paradox)

This package is great,  it gives you a lot of information about packages in the mode-line. Moreover, it integrates well with `package-list-packages`. We couldn't ask for anything better 😊

[Overview of paradox.](https://i.redd.it/zmekfqfdtae11.png)

This is how to get the same configuration displayed in the image above:

    (use-package paradox
      :defer 1
      :custom
      (paradox-column-width-package 27)
      (paradox-column-width-version 13)
      (paradox-execute-asynchronously t)
      (paradox-hide-wiki-packages t)
      :config
      (paradox-enable)
      (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))

**NOTE:** my only frustration is still having to wait every time few seconds for the packets to synchronize when executing the `package-list-packages` command. I would have liked that `package-refresh-contents` runs only once when starting GNU Emacs, using a separate thread to automatically load the packages. This must be possible with [emacs-async](https://github.com/jwiegley/emacs-async), but if you already have this kind of system in place, I'd be interested to know more 😊

That's all for this week! I hope these packages will help you as long as they help me.

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",13,62,TIP: Packages to include in your workflow (Part I)
"I'm curious how many of us  use any of the native Emacs email reading programs, VM, Gnus, etc. I get the impression that a lot of people consider them obsolete. More generally, how many people use Emacs for things which can't really be considered ""text editing,"" in the traditional sense?

For myself, I have used these programs in the past, and am open to doing so in future if I start using Emacs itself more heavily. They're complex but also quite flexible.",89,68,Who Uses EMacs to read mail?
"Another week, another trick. This week, I will present you one of my favorite modes, `hydra`. Probably most of you already know this mode, but I know that some have never taken the time to get interested, and for me, `hydra` is more than a necessity to be productive. `hydra` can be roughly described as a menu generator in which each menu has a function and a binding. What better way to present the beast than with an illustration!

[Group of commands related to org-clock ](https://i.redd.it/jo33q9o9ix111.png)

Sexy isnt it? With a simple keyboard shortcut, I can display this menu and choose a function among a letter. You're gonna tell me okay, that's great, but why is it a necessity? Well, let's say we don't use all the functions of GNU Emacs, and humanly speaking, it's normal \*laughter\*. We often use the same functions and from time to time discover a new function. `hydra` allows you to group the functions you intend to use in your workflow.

About my workflow, I use `hydra` for a lot of things, like managing:

* buffers \(`C-c b`\) ;
* erc \(`C-c e`\) ;
* flycheck \(`C-c f`\) ;
* magit \(`C-c m`\) ;
* org \(`C-c o`\) ;
* org\-clock \(`C-c c`\) ;
* ...

**NOTE:**  it is important to choose keyboard shortcuts that are easy to remember.

Plus, what's great about `hydra` is that it's easy to configure! The menu above can be programmed in this way:

    (use-package hydra
      :defer 2
      :bind (""C-c c"" . hydra-clock/body))
    
    (defhydra hydra-clock (:color blue)
        ""
        ^
        ^Clock^             ^Do^
        ^─────^─────────────^──^─────────
        _q_ quit            _c_ cancel
        ^^                  _d_ display
        ^^                  _e_ effort
        ^^                  _i_ in
        ^^                  _j_ jump
        ^^                  _o_ out
        ^^                  _r_ report
        ^^                  ^^
        ""
        (""q"" nil)
        (""c"" org-clock-cancel :color pink)
        (""d"" org-clock-display)
        (""e"" org-clock-modify-effort-estimate)
        (""i"" org-clock-in)
        (""j"" org-clock-goto)
        (""o"" org-clock-out)
        (""r"" org-clock-report))

**NOTE:** I tend to use blue as the default primary color for letters, so I can use red color to highlight some more delicate function.

**UPDATE:**  thanks to [github\-alphapapa](https://www.reddit.com/user/github-alphapapa) for letting me know in the comments, that colors are mainly used for their behavior, before the aesthetic side.

In conclusion, `hydra` gives me the possibility to easily use functions I'm used to and not, with keyboard shortcuts that are easy to remember.

To finish this post, I want to thank Mathieu Marques \([angrybacon](https://github.com/angrybacon/dotemacs)\) which I was inspired from his configuration for certain functions that I use every day.

For the curious, you can find my config on [GitHub](https://github.com/rememberyou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",16,64,TIP: How to be a beast with hydra
,27,67,Peek definition with Emacs frame
,0,67,2017-11-20 Emacs news
,55,67,Org-mode as a markup language does make sense even when not using Emacs. Better than markdown or reStructuredText.
,8,65,[ANN] Evil got a new home
,21,65,Making memes with Emacs
,64,65,Why Spacemacs?
,26,66,Call for New maintainer(s)
"Here is the changelog

* mark-and-expand: new state when point is inside an html element ; a selection of the inner content is done before selecting the element.
* mark-and-expand: preserve original vertical window offset
* blade: compatibility with new blocks: {!! $x !!}
* dust: better indentation for multiline blocks
* django: improved distinction between keywords and control blocks (tags)
* jinja: compatibility with {% trans %} {% endtrans %}, and {% for %} {% else %} {% endfor %} blocks (undefined in django)
* mason: better fontification
* erb: more accurate detection of control blocks
* javascript: better lexing to avoid ambiguation between the / operator, /(a|b)/ regexp and comments (// and /* */)
* unicode: better care of multibyte characters (thx kissge)
* indentation: deal with javascript decorator syntax
* web-mode-enable-sql-detection must be set to t to enable sql fontification and indentation in strings
* fontification: improved compatibility with minor modes relying on font-locking (e.g. whitespace-mode)
* fontification: new face web-mode-filter-face (e.g. “length” in {{ mylist|length }})
* fontification: if web-mode-enable-part-face is t you can customize web-mode-script|style-face which inheritate from web-mode-part-face ; it can be used to set the default foreground/background of the part
* minor mode: basic compatibility with hide show mode
* indentation: customize string concat indentation with lineup-quotes
* other: compatibility with universal-argument ( C-u ) for web-mode-element-clone|kill|next|previous|vanish, web-mode-attribute-kill|next|previous

The next months will be dedicated to reactjs and jsx. 
I'll have to introduce the notion of element-depth to deal with the recursive side of this language. 
e.g.

    return (
        <ul>
            {
                this.props.list.map(function(element) {
                    return <li>{element}</li>;
                })
            }
        </ul>
    )

With this notion of depth, perhaps I'll be able to provide indentation of html code inside block strings (php heredocs for example)

btw, web-mode.el is available on http://web-mode.org",1,67,web-mode v12 is released
,6,66,Emacs Editor – The Complete Reference
,12,68,The Animated Guide to Paredit
,12,64,A textlint flycheck checker in Emacs
,5,66,Happy New Year and all best in 2019!
"Recently I added some features for [doom-modeline](https://github.com/seagle0128/doom-modeline).

* Major mode icons
* A minor modes segment which is compatible with `minions`
* A perspective name segment for `persp-mode`
* A window number segment for `ace-window`, `winum` and `window-numbering`
* An indicator for `god` state
* An indicator for `ryo-modal` state
* An indicator for `xah-fly-keys` state
* An indicator for debug state
* An indicator for `LSP` state
* An indicator for github notifications

## Screenshots

&#x200B;

[Major Mode Icons](https://i.redd.it/ajkm2s7av8621.png)

&#x200B;

&#x200B;

[Perspective and LSP](https://i.redd.it/5hoqrnhov8621.png)

&#x200B;

[Github Notifications](https://i.redd.it/s8fklw6sv8621.png)

&#x200B;

&#x200B;

[Minor Modes and Minions](https://i.redd.it/m2o6m6svv8621.png)

&#x200B;

&#x200B;

[Debug State](https://i.redd.it/mwmgqwsyv8621.png)",20,67,New features in doom-modeline
,3,65,It's Magit! EmacsATX October 2018 presentation by Brandon Arnold
,20,61,Writing a PhD thesis with Org Mode
,2,68,Introducing thread-safe Tramp
,13,67,Literate Programming with Org-mode
,10,65,Someone is about to open Emacs. Spotted in Kiseijuu (Parasyte -the maxim) anime.
"Hey all,

I graduated from college in December, and started working as a software engineer in January. I primarily work with Java, JavaScript/HTML/CSS.

When people find out I use Emacs, there's usually some teasing involved–""You use Emacs? *Why?*"" I usually take these opportunities to explain how Emacs is more than just a simple text editor, and explain some of what my configuration helps me do. At this point, people usually drop the topic.

My question is–do you all find that Emacs (and Emacs alone) does what you need it to do for your day-to-day work? Or do you find yourselves using IDEs regularly, for the fancy features?

Thanks! ",100,65,Using Emacs as your primary text editor
,1,64,[Video] Gource Visualization of the Emacs Git tree since inception - 1 day per second
,5,69,Welcoming a new co-maintainer: Eli Zaretskii
"With great IDE and GUI based tool available these days for lot of applications, I'm wondering is emacs used by people for the intended uses and does it really serve the purpose well?

Also. at anytime have you thought that a tool xyz does the job better than emacs and wanted to quit emacs?",93,68,"Dear emacs users of reddit, how do you use emacs in your day-to-day life?"
,9,67,Adding A New Language to Emacs
,12,62,Rant: Contributing / Emacs Community
,19,63,What Nic Ferrier will be doing this year with Emacs.
,15,65,A list of people with nice emacs config files
,8,63,EmacsCast 3 - Org mode (and a bit about Helm + Projectile + ag)
"and what you did about that itch :)

Not exactly Emacs, but projectile-mode had complicates bindings for switching buffers or visiting files related to the current project, so [I rebound those commands to `C-x b` and `C-x C-f`](https://github.com/shackra/emacs/blob/master/configuracion.org#find-file-y-switch-buffer-personalizados) and use the `C-u` prefix to call the  ""normal"" commands.",196,63,What upset you most about Emacs?
,21,64,[emacs-announce] Emacs pretest 26.0.91 is out
,16,62,"Ivy, Counsel and Swiper"
"You're undoubtedly aware of the [Magit kickstarter](https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client) and the amazing job that Jonas has done over the past several years in maintaining and enhancing this package, which has proven itself so incredibly valuable to so many of us.

What you (like me) probably weren't aware of was just [how much he was sacrificing](https://github.com/magit/magit/issues/3174#issuecomment-330091971) in order to do that.

Funding the kickstarter to its goal amount allows Jonas to keep improving the software, and the greatest benefit of that is really to Magit's users, who will be getting an even better version of the software they love.  Reaching the goal amount makes things better for **us**.

What we now have is the opportunity to give something back -- to make this about more than just improving the software in the future, and to say thank you to Jonas for the years of dedication and effort that got Magit to this point in the first place.

Anyone who has paid any attention to the development of Magit will have an appreciation for the quality of Jonas' work, and I think it's a safe bet that he could have packed this in a long time ago in favour of a decent salary and a significantly-improved standard of living.

The fact that he didn't has resulted in the Magit we have today.

Perhaps we can do something a little bit life-changing in return.
",20,64,The Magit kickstarter has reached its goal! Here's why you should increase your pledge...
,19,64,These Weeks in Remacs II
"Hey all, 
I'm a first year Comp Sci student and have recently been looking for the best editor to write python code in and discovered emacs.

When I looked into it & discovered all the cool things you can do with it, I was immediately interested to try it out (this was yesterday).

I am mind blown.

I feel like this program can change my whole view of how to interact with a computer!!

The thing is that I don't know if windows 10 offers the integration with emacs that I'm hoping to achieve - should I look into dual booting a Linux kernel on my laptop ? (MSI GS70)

What advantages would I gain in using emacs in Linux VS Windows?

Please don't hate on my ignorance lmao, my uncle is a computer engineering professor & religious Linux user who's glad I'm trying to enlighten myself :p

Thanks ",52,63,Just discovered emacs as a Windows user and I LOVE IT
,10,61,This Week in Remacs
,17,62,Please don't do this..
,11,61,"Introducing kdeconnect.el: An Emacs interface for Android devices via KDE Connect. Send files, notifications, and make them ring!"
,9,67,Emacs Gifs
,9,63,"""Emacs in space, but with a sci-fi novella in it"""
,12,65,Quick intro to produce nice html docs with Org
,45,60,Emacs may move towards Common Lisp
,0,66,"Read Lisp, Tweak Emacs [Beginner 1/4]: How to try Emacs Lisp"
"I'd been using ido for some time, but was unaware of `ido-restrict-to-matches` (`C-SPC` or `C-@`), which is quite useful.  Just in case someone else is in the same position, I thought I'd point it out; it lets you provide multiple substrings from the results that you want.

`ido` supports substring matching.  So, for example, let's say that you are trying to open a particular .c file in a directory.  You hit `C-x C-f` to run `ido-find-file`.  You think that there's only a single .c file in that directory, so you type "".c"", expecting only a single option to have that string in its name and come up.  To your surprise, there's both a foo-internals.c and a foo-externals.c file.

Well, if you deleted the "".c"" bit, and started typing ""externals.c"", that'd get you the file in question.  But that seems wasteful; you've already filtered the possible files down to just two.

You can simply hit `C-SPC` or `C-@` to save your existing set of matches, then plug in more criteria.  So `C-x C-f .c C-SPC ex RET` would get you the file that you want.

This is probably old hat to serious ido users, but I'd been completely oblivious to it, and certainly wanted it.",21,68,"If you use ido, make sure that you know about ido-restrict-to-matches"
,11,67,Emacs Rocks: multiple cursors
,23,67,Introducing: WikEmacs
,12,64,"""Guile can implement Emacs Lisp better than Emacs can."""
,23,60,I like to move it! (Emacs version)
,20,59,EmacsCast Episode 4 - Spacemacs vs. Doom vs. Vanilla Emacs
,16,63,Two Years With Emacs as a CEO (and now CTO)
,25,64,Helpful: One Year On
,34,63,"RFC: GitHub - alphapapa/magit-todos: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer"
"Hey everyone, I wrote a quick little tutorial some of you may or may not find useful: [http://john.mercouris.online/emacs\-database\-interface.html](http://john.mercouris.online/emacs-database-interface.html)

I hope you enjoy! Thanks!",15,64,EDBI (Emacs Database Interface) Tutorial
,0,61,2018-05-07 | Emacs news | sachachua.com
"Makes Emacs on Windows easy to set up as a first-class Windows program.  Add/Remove Programs, Start Menu, PATH, and Explorer integration for Emacs.  Also includes a sample .emacs file if none is installed on the system already (otherwise writes a .emacs.sample).

I've been using versions of this for the last few years on my personal Windows machines but I've never really tried to make it known to others before.  If anyone has any suggestions for improvements please let me know or submit a PR on gitlab!

https://sourceforge.net/projects/emacs-powerpack/

https://gitlab.com/vancan1ty/emacs_powerpack",24,61,Emacs Powerpack -- Emacs installer for Windows
"I've been working in emacs for over two-weeks now, doing full time development in Clojure. Prior to that, I've been using emacs for 6 month, mostly spending my time in org-mode.  For the most part, I feel I am productive and sufficiently competent to keep on using it as my main source code editor (credit goes to smartparens and good repl integrations). However, all is not perfect.  I'm constantly fighting emacs's window and buffer placement.  Why is it that managing my workspace is so hard in Emacs?
How does one go about organizing windows, one for code, one for help/docs, one for repls, shells, etc, enforce window size to prevent unexpected resizes to wreck layouts.  

To me, if feels like emacs isn't built to make good use of todays large screen areas.  The default behaviors make sense when I work in a small frame, but are inadequate when in full screen mode. I am willing to wager that window management is one of these issues that many new emacs users face and give up on, preferring the other IDEs or editors with less surprising window behaviors. 

I am really curious: how do you, the software engineer with the large monitor using emacs all day to write your code, do it?  How do manage your emacs windows efficiently?  Got a favorite package(s) that help you out? Can you share some configurations to get new users going? Maybe know of a good tutorial on the matter? Please share! ",51,67,How do you manage your emacs windows and stay sane?
,16,63,My first Emacs package: circadian - Theme-switching for Emacs based on daytime
,12,64,ANN: org-super-agenda
,27,64,Mathematical Notation in Emacs
,5,67,The diminish.el code should be elected as most poetic elisp ever.
,26,66,Emac’s Org Mode will improve your software engineering
,30,61,Working on the Emacs logo
"**THIS ISN'T AN APRIL FOOLS JOKE**

Now that the NaCl build patches have been accepted into the Emacs master branch, emacs can be built for Chrome's Native Client platform (albeit with some patches). To see it in action, go to:
https://commondatastorage.googleapis.com/naclports/builds/pepper_41/trunk-253-g089940f/publish/emacs/glibc/emacs/emacs.html

PS: You would need to enable the ""Native Client"" option on your Chrome installation from about:flags",36,66,Emacs runs natively on Chrome!
,12,62,"How Emacs changed my life - Yukihiro ""Matz"" Matsumoto"
,13,65,Emacs color-theme creator
"One of Emacs strengths is that you can make your own functions to do
pretty much whatever you want. I am curious if anyone has any
interesting functions they have made and want to share.

If you do have something to share — please make sure to explain what it
does and how it works properly. It does not matter if you have made it
yourself or if its something you found on the internet, that you found
useful.",100,61,Show me your functions!
"Since about 3 months I put all my tasks and todos into an org-mode file. Scheduling them, setting deadlines and using agenda view to filter them by current date.

And now I'm at the point, where I do **not** look at my agenda view, because all those tasks are accumulating always at 'today'. It would be more motivating to pick 3 tasks in the morning and only show them in the agenda view for whole today.

How do you manage this, or have you a complete different approach?

&#x200B;

**Update**: I didn't expect that many answers and good ideas. I will evaluate every one of them, even if I have not (yet) answered to all comments. Thank you!",27,64,How do you organize your daily tasks with org-mode?
"I am wanting to make my editor look a bit more modern and was hoping for some inspiration.

Have you configured your emacs to look modern and awesome? Please post a screenshot and link your config!",68,65,Share your Modern Emacs
"[magit-todos](https://github.com/alphapapa/magit-todos) 1.1 is released.  The main new features are:

* Dedicated to-do list buffer with the command `magit-todos-list` (*which now also works outside git repos*).
* Option `magit-todos-exclude-globs`, a list of glob patterns to ignore when searching for to-do items.  Can be used to ignore directories and/or files (e.g. in dir-local variables).
* Running scans are killed when the Magit status buffer is closed. (I'd like more testing on this feature, but I haven't heard any complaints yet, so I guess it's all right.)

Of course, most users don't use MELPA Stable, but lacking a way to announce these new features from within Emacs, they may not be aware of them, so making a formal release helps with tracking changes.",9,62,magit-todos 1.1
"I'm interesting in finding more about specialized workflows that people have created.

What do you use daily at work?

How do you use it?",58,61,Whats your Job? Whats your daily emacs workflow?
,19,63,A GitHub repo for historical Emacs software preservation
,11,62,Share my first light theme: `doom-nord-light-theme`
"This is the main public release of GNU Hyperbole for 2017 and it is
bursting with new features and further quality improvements.  New
capabilities, including Git and Github object links, are summarized
here:

  https://git.savannah.gnu.org/cgit/hyperbole.git/plain/HY-NEWS

A short explanation of Hyperbole is included below.  For more
detail or how to obtain and install it, see:

  https://www.gnu.org/s/hyperbole

For a list of use cases, see:

  https://www.gnu.org/s/hyperbole/HY-WHY.html

For what users think about Hyperbole, see:

  https://www.gnu.org/s/hyperbole/hyperbole.html#user-quotes

----

GNU Hyperbole (pronounced Ga-new Hi-per-bo-lee), or just Hyperbole,
is an amazing, programmable hypertextual information management
system implemented as a GNU Emacs package and extensively
documented.  Hyperbole has been greatly expanded and updated for
use with the latest Emacs 26 releases; it supports GNU Emacs 24.4
or above.

Hyperbole can boost your day-to-day productivity with Emacs and
your ability to manage information stored across many different
machines on the internet.  People who get used to Hyperbole often
find they prefer never to use Emacs without it.

Hyperbole includes its own easy-to-use hypertextual buttons and
links that can be created without the need for any markup language.

It also comes out-of-the-box with:

  - a hierarchical, record-based contact manager

  - a rapid window and frame control system

  - a powerful multi-level auto-numbered outliner

  - and two very smart context-dependent mouse and keyboard keys
    that simplify operations in many editing and browsing modes.
    All features are aimed at making textual information management
    and display fast and easy.

Bob Weiner designed and programmed GNU Hyperbole.  He and Mats
Lidell maintain it with the Free Software Foundation.  It includes
an interactive demo to introduce you to its features as well as a
detailed reference manual, as explained here:

  https://www.gnu.org/s/hyperbole/hyperbole.html#invocation-and-doc

----

Please give Hyperbole a try.  It's free, man.  It adapts to your
needs. It connects everything.  It rewires your brain.  It speeds
your web searches for `carpal tunnel syndrome'.  It makes you feel
like the sun is out on a gray winter day :-)

But wait, there's more and this part is serious.  For a limited
time, to encourage use and feedback, the first 30 people who try
out the Hyperbole DEMO or read the Hyperbole Manual and send a few
thoughtful sentences to <rsw at gnu dot org> will receive either of
their choice of the following as yet unpublished single file Emacs
Lisp libraries:

    ;;  rsw-linecol.el: User-editable mode-line col/line number formats
    ;;
    ;;  GNU Emacs buries the formatting of mode-line line and column
    ;;  numbers in a way that makes it virtually impossible for a user
    ;;  to change this formatting.  This library fixes that with a new
    ;;  variable which may be modified to instantly alter the mode-line
    ;;  column and line number display.

or

    ;;  rsw-chrome-macos.el: Open a URL in Google Chrome and reuse an
    ;;     existing tab/window if already displayed.
    ;;
    ;;  This library resolves the many problems of sending URLs to
    ;;  Google Chrome on MacOS.  It properly sends # hash in-file links
    ;;  (these are typically stripped when Chrome is called as a MacOS
    ;;  application).  It reuses any tab already displaying any
    ;;  matching URL that is sent and it does this even if the
    ;;  ultimately displayed URL goes through several redirects before
    ;;  display.

Enjoy,

Bob Weiner and Mats Lidell
",23,62,"ANNOUNCE: GNU Hyperbole 7, a.k.a the Git Ready for Action Release, is now available"
,31,62,[emacs-announce] Emacs pretest 26.0.90 is out
"I've gone through the internal tutorial, but I feel like there's a ton of stuff I don't know that could improve how I work. I haven't ever made my own macro. I use a few packages, but I cargo cult my .emacs file to get them going. I don't understand elisp. The craziest things I can do are M-x replace-string and C-u number thing.

If you were in my position, what comprehensive text would you read to get yourself going?

Also, I've been using emacsnox. Am I losing out on much by not using the Emacs window client? I find buffers to be sufficient.",27,61,"I've used emacs for around two years, but I feel like I could get more out of it. What text would you recommend for *really* learning Emacs?"
,8,60,"Don’t kill-buffer, kill-this-buffer instead"
,16,65,Aggressive Indent - How you never need to worry about indentation again
,26,62,Setup efficient C/C++ Development Environment for Emacs
"I will start! A few weeks ago I discovered hydra, but didn't really know what to do with it.. So recently I had the idea of having project specific hydras, which offer compilation, running or running tests at the press of a button. I did this by defining the hydra in the .dir-local.el file and bound a shortcut in my .emacs to open this specific ""context-hydra"" if it is defined in the current project, or print an error if there was no context hydra defined. 

What cool things did you do or discover lately? ",60,61,When was the last time you leveled up your emacs game?
"Hi, I've recently started recording some videos about Doom. The idea is to share my learning experiences with other people. Hopefully someone will find it useful.

[https://zaiste.net/doomcasts/](https://zaiste.net/doomcasts/)

This is my first time recording anything. I need to work on my voice I know! ;) Feedback is greatly appreciated.

&#x200B;",20,58,"Doomcasts: A screencast series about Doom, an Emacs configuration for the Stubborn Martian Vimmer."
"A while ago, I installed yasnippets, but it never seems to find use.  My coding doesn't seem to involve filling out boilerplate as much as crafting tailored pieces for the problem at hand.  Maybe I'm ""doing it wrong.""

What extensions to you have installed that while they seemed like a useful idea at the time just seem to gather dust?",168,62,"What are some extensions that you've installed with the idea they should be useful, but have not panned out?"
,23,61,The Emacs Lisp Style Guide - A community-driven Emacs Lisp style guide
,11,62,"Emacspeak, The Complete Audio Desktop"
,7,59,Please help check the Emacs 26 manual
,28,62,"TIL that each chunk of code is stage'able with ""s"" when looking at the diffs in magit-status-mode"
"I installed emacs a long while ago, back when I first tried Debian, and was originally enthusiastic about it.

I became disappointed soon enough because it didn't match-up to Microsoft VS, but then... I eventually returned...


During the initial happy-phase I'd went through the tutorial and set up extensive coding libraries that embiggened my 'macs into an ide (one with actually more features than most others).


Fast forward to the future, I was looking for an alternative to code::blocks. 

It felt like crap and I decided that even nano would be more fucking fun.

I googled a bit and found several mentions of emacs.

I decided to check up on the ol' thing.

I fire up the ol' M-x (beefed up with I-search right in the minibuffer ofc)
and install a mild-dark theme (i.e. darkmine) for some cozy goodness.

I tinky-winker around and I rediscover the ide plugins: function-args, helm-projectile, ggtags, magit.

They work like chopped butter and they glide like moonlight.

I sit back and stare.

And I think, ""if emacs is so powerful, then surely there's a plugin to emulate a typewriter""

(i.e. no deletion, backspace, cut/kill. Only forward)

I find the draft-mode plugin. It forces me to write haiku.

I can't stop. It won't let me.

I keybind a ""focus-mode"" that goes into full-screen draft-mode.
I keybind my 'macs through xfce for quick access.

I stare in awe. I transcend.
It is 2 AM and I am choking on endorphins.

Where the OS has gone there is nothing. Only 'macs remains.
",19,61,"moment of enlightenment, ""once you go 'macs, there is no going back."""
"In Emacs, ""lossage"" is a log of the buttons you've pressed. This is useful for, say ""what did I just do to make that happen?"" or ""what was the command I ran?"" It previously was a stream of letters like this:

>  C-, C-n C-n C-a C-SPC C-e C-w <backspace> C-n C-n C-n C-n <return> C-y C-x C-s C-c l C-g C-h l 

I recently built a new version of Emacs from the git repo, and now that same list is represented like this:

> C-, [prev-window]

> C-n [next-line]

> C-n [next-line]

> C-a [org-beginning-of-line]

> C-SPC [set-mark-command]

> C-e [org-end-of-line]

> C-w [kill-region]

> <backspace> [org-delete-backward-char]

> C-n [next-line]

> C-n [next-line]

> C-n [next-line]

> C-n [next-line]

> <return> [org-return]

> C-y [org-yank]

> C-x C-s [save-buffer]

> C-c l [nil]

> C-g [keyboard-quit]

> C-h l [view-lossage]

This is awesome; it's easier to read, and lists the function ran. I think it's new to Emacs 25; I haven't seen it before. But I might've missed it.",7,63,Upcoming feature in Emacs 25: view-lossage now prints what command is run by the keys pressed
"Maybe you all knew this already, but after 9 years of using emacs I just, for the first time, accidentally opened a .tar.gz file and it worked! You see a list of files contained in the archive, and you can open those. If you edit and save that file, then go back and save in the buffer with the archive, it will update the archive for you.",19,59,"TIL emacs can open archives (.zip, .tar.gz, etc) and even re-archive them when you save"
,17,60,"Org-mode is spreading: Pandoc, the universal document converter, now supports (a reasonable subset of) Org-mode"
,14,64,Learn #Emacs Lisp in 15 minutes (by Bastien)
"Although I have not been able to fully dive into the emacs world yet (considering it), I have read a lot about org mode, the ability to easily whip up a script, etc.

What I don't really know is what are the shortcomings of emacs, coming from people using it daily. From what I have heard, terminal capabilities aren't so good (if running with a lot of output or through nurses apps)",191,59,What are biggest shortcomings of emacs?
"I held a presentation at work the other week. The topic was on Org-mode and

literate programming in Emacs. I decided it was worth making a recording

afterwards so that I could share it with others who couldn't attend.

&#x200B;

The talk aims to give an overview of some of the possibilities of Org-mode when

it comes to literate programming. I also focus some on how it can be used for

learning and also include different exports as well. But I also try to highlight

how easy it is to hack in some features that I need along the way using some

elisp.

&#x200B;

I am using Emacs27 in combination with the Doom configuration and here is my personal tweaks [https://github.com/niklascarlsson/doom-private](https://github.com/niklascarlsson/doom-private)

&#x200B;

I have gotten a lot of help from people during this year when I embraced Emacs

and I hope I can give something back :). So please have a look if it sounds

interesting and any constructive feedback is appreciated.

&#x200B;

[https://youtu.be/GK3fij-D1G8](https://youtu.be/GK3fij-D1G8)

&#x200B;

\*Update\*

I have made the presentation public and there you can find the material I used live in the presentation, called live\_presentation.org. As well as the final document called post\_presentation.org [https://github.com/niklascarlsson/presentations/tree/master/literate\_programming](https://github.com/niklascarlsson/presentations/tree/master/literate_programming)",12,63,"Org-mode, literate programming and Emacs"
"Another week, another trick. For this week, we will take a look at how to use `git` with GNU Emacs. As it is quite common to work on Git repositories, it is important to have a decent configuration for our daily lives 😊

Of course, to start this post I have to talk about [magit](https://github.com/magit/magit), which is probably one of the star packages of GNU Emacs. If you do not know this package, I highly recommend you to be interested in it, it will greatly facilitate your daily life. Personally, I have no particular configuration with and I'm curious to know yours.

    (use-package magit :defer 0.3)

**NOTE:** I will probably make another tip only on `magit` once I have taken the time to get more interested on it 😊

However, this is the simple `hydra` menu that I use with this one:

[Overview of hydra](https://i.redd.it/6gel8tr1jpf11.png)

And naturally, with its configuration:

    (use-package hydra
        :defer 1
        :bind (""C-c m"" . hydra-magit/body))
    
    (defhydra hydra-magit (:color blue)
      ""
      ^
      ^Magit^             ^Do^
      ^─────^─────────────^──^────────
      _q_ quit            _b_ blame
      ^^                  _c_ clone
      ^^                  _i_ init
      ^^                  _s_ status
      ^^                  ^^
      ""
      (""q"" nil)
      (""b"" magit-blame)
      (""c"" magit-clone)
      (""i"" magit-init)
      (""s"" magit-status))

One of the things you might appreciate is seeing the lines that are modified in the file while it is being edited. This can be simply done with [git-gutter](https://github.com/syohex/emacs-git-gutter), as shown below:

[Overview of git-gutter](https://i.redd.it/lhppgyb5jpf11.png)

Notice that the indicator with the green `+` appears because `git-gutter` notices that we have added new lines. This works as well if you delete lines 😊

Its configuration is relatively simple:

    (use-package git-gutter
      :defer 0.3
      :diminish
      :init (global-git-gutter-mode +1))

**NOTE :** if you want, you can change the symbols and colors as you like. I invite you to read the documentation to do so.

A good practice that I have tried to stick to for the past few years, is [to not exceed 50 characters](https://chris.beams.io/posts/git-commit/) for the summary of my commits.  In the same way, I try that the body of my commits respects the convention of 72 characters. Nothing could be easier with `git-commit`.

[Overview of git-commit](https://i.redd.it/u5gzdw33jpf11.png)

You can see that when I exceed the recommended size for the summary of the commit, the color of the letters changes to yellow.  Similarly for the body, when it exceeds 72 characters, there is automatically a line break. Great! 😊

This can be configured with the lines below:

    (use-package git-commit
      :after magit
      :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
      :custom (git-commit-summary-max-length 50)
      :preface
      (defun my/git-commit-auto-fill-everywhere ()
        ""Ensures that the commit body does not exceed 72 characters.""
        (setq fill-column 72)
        (setq-local comment-auto-fill-only-comments nil)))

Finally, another package that I rarely use, but that can be useful in some cases, is to view the changes made in previous commits. This can be done with [git-timemachine](https://github.com/emacsmirror/git-timemachine). I refer you to the documentation if you want to have an overview of how it works.

Its configuration is simplistic:

    (use-package git-timemachine :defer 1 :diminish)

That's all for this week, what are your tips and tricks with `git` and GNU Emacs? Whether in terms of packages or configuration, share them in comments, I'd be happy to read them! 🐈

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",7,57,TIP: How to get started with Git
,12,58,Olé! Diacritics in Emacs - Mastering Emacs
"Another week, another trick. This week, a longer post, but I thought it would be interesting to share with you my way of using `org-journal`. First of all, many people use `org-mode` to be organized by planning their tasks, which is a good thing in itself. The concern is that it lacks an analysis phase and this phase of analysis is done with `org-journal` that allows you to make a report of your day and become aware of good or bad habits.

In this post I will give you some explanations about the organization of my files and give to you some configurations to simplify your life with `org-journal` as well as explain how to encrypt your data which is important as we will see why later.

Anyway, let's get started!

To explain how my files are organized, I share all my files in a cloud, which is convenient for me to access them with multiple devices. To do this, I name these files by the current date and place them in a folder that corresponds to the year.

**NOTE:** I use [Synthing](https://github.com/syncthing/syncthing) because I tend to avoid proprietary software, even more when it comes to storing my data.

Let's take a look at how I do this with Emacs:

      (use-package org-journal
        :bind ((""C-c t"" . journal-file-today)
               (""C-c y"" . journal-file-yesterday))
        :custom
        (org-journal-dir ""~/Sync/shared/.journal/2018/"")
        (org-journal-file-format ""%Y%m%d"")
        (org-journal-date-format ""%e %b %Y (%A)"")
        (org-journal-time-format """")
        :preface
        (defun get-journal-file-today ()
          ""Gets filename for today's journal entry.""
          (let ((daily-name (format-time-string ""%Y%m%d"")))
            (expand-file-name (concat org-journal-dir daily-name))))
    
        (defun journal-file-today ()
          ""Creates and load a journal file based on today's date.""
          (interactive)
          (find-file (get-journal-file-today)))
    
        (defun get-journal-file-yesterday ()
          ""Gets filename for yesterday's journal entry.""
          (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
                 (daily-name (format-time-string ""%Y%m%d"" yesterday)))
            (expand-file-name (concat org-journal-dir daily-name))))
    
        (defun journal-file-yesterday ()
          ""Creates and load a file based on yesterday's date.""
          (interactive)
          (find-file (get-journal-file-yesterday)))

**UPDATE:** there is no need to use the `journal-file-today` and `get-journal-file-today` functions, as underline it *bastibe* in comments. The built\-in `org-journal-new-entry` function, does it as well.

These ideas come from Howard Abrams, you can find them on [his](http://www.howardism.org/Technical/Emacs/journaling-org.html) blog for more information. With them, it will allow you to use the  `C-c t`  \(resp. `C-c y`\) keyboard shortcut to automatically create a file if it does not already exist and to indicate your observations for the day \(resp. yesterday\). Don't forget to change the path indicated with yours and possibly modify these keyboard shortcuts by those that correspond to you. For those who are not yet comfortable with [use\-package](https://github.com/jwiegley/use-package), I invite you to look at the documentation.

**NOTE:** an improvement idea is to give a path to `org-journal-dir` and create/call a function that returns the current year. This will avoid manually changing the path in `org-journal-dir` for next years.

Now all that remains is to encrypt these files with `org-crypt` to allow better security. To do this, first add `org-crypt` in the org modules that need to be loaded:

      (setq org-modules '(...
                          org-crypt
                          ...))
      '(org-load-modules-maybe t)

Now we can configure `org-crypt`:

      (use-package org
        :bind (""C-c d"" . org-decrypt-entry)
        :init (org-crypt-use-before-save-magic)
        :custom
        (org-tags-exclude-from-inheritance (quote (""crypt"")))
        (org-crypt-key ""E9AADC36E94A672D1A07D49B208FCDBB98190562"")
        (auto-save-default nil))

I pass you the explanation of each function and variable, the only variable that interests us is `org-crypt-key` that allows you to enter the ID of your key to allow asymmetric encryption \(replace with `nil` if you want symmetric encryption\). Of course, if you use asymmetric encryption, don't forget to generate a key pair with your operating system \(which I don't explain here\).

Also remember to add `crypt` tag in the list of org tags:

      (setq org-tag-alist '(...
                            (""crypt"" . ?C)
                            ...)))

Now, each time you save a text in `org-mode` by specifying the `crypt` tag, it will be encrypted! Isn't that cool?

And this is what it looks like:

[Before encryption](https://i.redd.it/0f7zkuae26z01.png)

[After encryption](https://i.redd.it/0g41hqcg26z01.png)

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",16,61,TIP: How I use org-journal to improve my productivity
,14,62,"/u/jwiegley: ""[W]hat if we had a compiler from Emacs Lisp -> Lisp-flavored C, which could turn .el files into .c files suitable for compiling into .so's that can be loaded into Emacs?"""
"If you ever wanted to be a part of Emacs development, but didn't feel you had time or inclination to offer assistance with C or Lisp, now is your chance to be a part of our great editor's history!

We have just a few sections left before we're finished proof-reading the whole thing. Send an e-mail to emacs-manual-bugs@gnu.org and ask for a section or two! They're generally 10-20 pages each, so no one is being asked to proofread entire chapters, or the whole manual.

Or make your availability known here, and I'll find a section for you.",19,60,Another call for help proofreading the upcoming Emacs 26 Manual
,12,59,CIA's vim editing tips
I just pushed a new dark theme for Emacs based on doom-theme https://github.com/prassee/prassee-emacs-theme,19,60,My first Emacs dark theme
,20,61,"Eli Zaretskii: ""I plan to release Emacs 25.2 very soon, like in a few weeks."""
"This version is mainly focused on jsx compatibility.
Special thanks for @vjeux, of jsx fame, for this help.


The changelog:

* jsx: recursive parsing of the jsx expressions for better highlighting and indentation
* jsx: compatibility with spread attributes
* jsx: commenting with {/* */} blocks (+ uncommenting)
* jsx: tag auto closing
* jsx: less void elements (<Col></Col> are often used by jsx developers for example)
* jsx: new custom: web-mode-jsx-expression-padding
* indentation: (add-to-list 'web-mode-indentation-params '(""lineup-ternary"" . nil)) is now available
* indentation: html comment aligning improvement (thx @thwg)
* indentation: better behavior when the first attribute of an html element is on the next line
* fontification: html entities can be fontified with (setq web-mode-enable-html-entities-fontification t) (customization can be done through web-mode-html-entity-face)
* javascript: compatibility with splats
* javascript: compatibility with arrow functions (indentation)
* blade: compatibility with @yield blocks
* handlebars: fontification fixes
* jsp: the character . can be used as a tag name separator (it used to be only :)
* compatibility with <script type=""text/x-jquery-tmpl""> scripts
* compatibility with *.tsx files (TypeScript JSX)
* indentation: auto indentation on yanking
* current element highlighting: only the tag name is highlighted



I'll now focus a little bit on web-mode.org to provide a better documentation
",7,61,web-mode.el v13 is released
,26,57,symon - a tiny graphical system monitor for Emacs
,14,62,2048 puzzle in Emacs
,43,59,"I understand the vim fanboys will win, but we can't let Sublime beat Emacs..."
"Hi /r/emacs,

I finally published my [text object editor](https://github.com/clemera/objed). I'm happy to receive feedback/questions you might have. I [blogged](https://www.with-emacs.com/posts/why-i-invented-my-own-text-editing-language-for-emacs/) about it, too. I'm posting under my old handle because for some reason submission with my new one /u/clemera does not work. Share the software! 
",22,57,A new text object editor for Emacs
"[Next](https://next.atlas.engineer) is an Emacs-inspired web browser written in
Lisp aiming at giving power users a fun tool they can browse and hack the
Internet with (at last!).  Check out the homepage, it has some pretty cool videos and
code snippets already!

It's still at the prototype phase and the GNU/Linux port is only experimental, but a crowdfunding campaign was started a month ago to
put full-time development into getting a stable and polished version!  The fundraising got extended for one last week:
https://www.indiegogo.com/projects/next-browser-nix-support

To Emacsers looking for a (Lisp) hackable browsers, feel free to join and support
the adventure!
",14,60,Next browser campaign: last week of fundraising!
,10,56,A nice explanation of smartparens with examples and keybindings
,43,58,Interview with Thierry Volpiatto (Helm author)
"I know magit is great, and I agree. But for large projects or just niche uses I find myself also using the built in version control. Like the command: `C-x v v` (vc-next-action) where you can auto commit the current file you're working on! And `C-x v l` (vc-print-log) to show a nice log of the current file. 


I also noticed if I ever want to do a large commit (like I just updated a ton of packages) magit is basically unusable while the built in handles it just fine. And the fact you can filter by directory (vc-dir). I found out about these commands accidentally using [which-key](https://github.com/justbur/emacs-which-key) if anyone is curious.


After exploring I was quite impress just how much vc was already built into emacs. ",25,63,The built in version control is pretty cool.
,27,56,"Emacs ""Auto-Fill Mode"" Mug"
,43,59,Advanced Techniques for Reducing Emacs Startup Time
,7,56,Deep dive into writing a major mode - Part 1
,27,57,Yet another emacs terminal emulator
"The icons: https://github.com/domtronn/all-the-icons.el

The author's config: https://github.com/hlissner/.emacs.d

A theme based on the icon package: https://github.com/hlissner/emacs-doom-theme

Screenshots: https://github.com/hlissner/.emacs.d/tree/screenshots 

It seems that there is too much customizations on the `mode-line` in the author's emacs config but I failed to make it work on my machine.",52,59,Making modern emacs themes ?
,22,63,TIL there's a thriving Emacs community in China.
,17,59,Rant: Obfuscation in Emacs · Yann Hodique
,35,58,"Impressive Emacs setup, if you want to get inspired."
,33,58,Just switched to Emacs and old habits die hard.
,10,60,StackExchange Proposal: EMACS
,9,60,"Emacs 23+ will automatically encrypt and decrypt files with names ending in "".gpg"""
,9,58,Gmane -- Org Mode Release 8.0
,8,60,What’s New In Emacs 24 (part 1)
,70,58,How many of you swap the CTRL and the caps-lock key 
,12,58,Student: Do I have to use Emacs?
"Another week, another trick. This week, I will present you the way I handle my emails. This management is not exceptional, but it may give ideas to some of you.

First of all, you should know that I started GNU Emacs using `gnus`, that I used many years for these possibilities especially to read different feeds. Nevertheless, I stopped using it for `notmuch`. This package is perfect for you, if you want to store all your emails and easily search them, much like a database. However, I did not want to keep the various spam, and removing them was not feasible. Finally, as you suspected by the title, I went to `mu4e` that I fell in love!

[Overview of the main interface of mu4e](https://i.redd.it/mnd7zpnd7c311.png)

**UPDATE:** `notmuch` also allows to delete emails using a Bash script (see comment), thanks to [holgerschurig](https://www.reddit.com/user/holgerschurig).

For me, `mu4e` is great! This allows me to read my emails with a nice interface, gives me the ability to easily search for an email, write an email, etc. Of course, it doesn't just do that! What I like about it, is its simple configuration, and how I can write my emails in `org-mode`, who doesn't like `org-mode`?

Without going into details, here is what my `mu4e` configuration looks like:

    (use-package mu4e
      :ensure nil
      :ensure-system-package mu
      :custom
      (mu4e-attachment-dir ""~/Downloads"")
      (mu4e-compose-signature-auto-include nil)
      (mu4e-drafts-folder ""/gmail/Drafts"")
      (mu4e-get-mail-command ""mbsync -a"")
      (mu4e-maildir ""~/Maildir"")
      (mu4e-refile-folder ""/gmail/Archive"")
      (mu4e-sent-folder ""/gmail/Sent Mail"")
      (mu4e-maildir-shortcuts
       '((""/gmail/INBOX"" . ?i)
         (""/gmail/All Mail"" . ?a)
         (""/gmail/Deleted Items"" . ?d)
         (""/gmail/Drafts"" . ?D)
         (""/gmail/Important"" . ?i)
         (""/gmail/Sent Mail"" . ?s)
         (""/gmail/Starred"" . ?S)))
      (mu4e-trash-folder ""/gmail/Trash"")
      (mu4e-update-interval 300)
      (mu4e-use-fancy-chars t)
      (mu4e-view-show-addresses t)
      (mu4e-view-show-images t))

**NOTE:** I use a Gmail address, but adapt this configuration for your email service.

Complementary with `mu4e`, I use `mbsync` to be capable of synchronizing mail on IMAP server with local `Maildir` folder. I'm used to using `offlineimap`, but I find it slower than `mbsync`, that's why I separated myself from it. Overall, here is what your `~/.mbsyncrc` file should look like:

    IMAPAccount gmail
    Host imap.gmail.com
    User terencio.agozzino
    PassCmd ""gpg2 -q --for-your-eyes-only --no-tty -d ~/Sync/shared/.mbsyncpass.gpg""
    Port 993
    SSLType IMAPS
    AuthMechs Login
    CertificateFile /etc/ssl/certs/ca-certificates.crt
    
    IMAPStore gmail-remote
    Account gmail
    
    MaildirStore gmail-local
    Path ~/Maildir/gmail/
    Inbox ~/Maildir/gmail/INBOX
    
    Channel gmail
    Master :gmail-remote:
    Slave :gmail-local:
    Patterns ""INBOX"" ""All Mail"" ""Deleted Items"" ""Drafts"" ""Important"" ""Sent Mail"" ""Starred""
    Create Slave
    Sync All
    Expunge Both
    SyncState *

To have more details about my configuration, I invite you to go in my [dotfiles](https://github.com/rememberYou/dotfiles).

Finally, I use `mu4e-alert` to receive a notification each time I receive emails:

    (use-package mu4e-alert
        :after mu4e
        :hook ((after-init . mu4e-alert-enable-mode-line-display)
               (after-init . mu4e-alert-enable-notifications))
        :config (mu4e-alert-set-default-style 'libnotify))

I still don't have very far in my `mu4e` configuration, but this will allow you to have a good base with this one. Besides, several `mu4e` packages exist, that's why don't hesitate to comment on some of these packages you use.

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",26,62,TIP: How to easily manage your emails with mu4e
,41,58,Heads-up: Emacs 26.1 RC1
,34,61,"Org-noter - A synchronized, Org-mode, document annotator"
,40,61,"Compare Doom-emacs, Spacemacs, and vanilla Emacs"
"http://invisible-island.net/xterm/ctlseqs/ctlseqs.html

I've just browsed Escape Sequence catalogue for terminals and got freezed when I saw the following line in OSC section:

            Ps = 5 1  -> reserved for Emacs shell.

Who managed to reserve it?  When?  And why today's Emacs Shell doesn't use it at all?  Today, there is much more need for precise tracking of current working directory, user, and host of the shell, so that it can be coped with tramp-find-file and other text editing managements...  Can this be a solution to the problem?",11,58,Enigma in ancient history?. How Emacs shell got reserved OSC (Operating System Control) Escape Sequence of No. 51? And... not used at all AFAIK.
,2,59,Spacemacs is being tracked on thoughtworks tech radar
"Hello all,

I've just installed polymode, which you can find here:  https://github.com/vspinu/polymode.

Emacs sort of has a problem of letting one buffer have more than 1 major mode.  In fact, by default you can't do this.  As a web developer this was initially really frustrating for me (until I found web-mode.  There's nothing better in my opinion).  Anyway,  I've been using org-mode for quite some time, and it gets old to have to type ""C-c '"" all the time when I want to edit a source code block.  Well polymode, lets an org-mode file have several active major modes at once.  So I can now use paredit in an org-mode file in an elisp snippet, without having to type ""C-c '"" first!

It is really similar to mmm-mode, but is a little younger and has some differences.  ",13,62,Polymode is awesome
,4,56,Org-mode template for technical specification documents & HTML publishing
"I was helping a colleague today with some git merging and reviewing a bunch of python code to push up to our master branch. She uses notepad++ and the default git gui. It really shows how amazing magit is, massive time saver. Also, i had to rename a few variables after, which the refactoring in elpy makes trivial.

All in all I hadnt realised how much I took my workflow for granted, and didnt realise how amazing the tools in emacs are.

End of happy rant.",7,57,"elpy, magit and emacs in general are awesome"
,11,57,"I like this picture, maybe you will too"
,19,60,IPython integration for Org mode
,14,58,Time for an upgrade - Emacs 24.1 is here
,5,58,M-x google-maps
"I switched to `smartparens` from `paredit` last week.


I put together an animated cheatsheet to help myself with most of the commands I find myself using, hope it helps other people as well.

- Is there anything else I could include on the cheatsheet?
- Also, are there any other features I should check out in smartparens?

Here is the [cheatsheet](https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95)",19,57,Animated smartparens Cheatsheet
,27,61,"Goodbye VS Code, Hello Emacs (Again)"
,3,59,“An Introduction to Programming in Emacs Lisp” ((en|es)(morg|html) version)
,11,56,Emacs docker images are available
"All these ""different and unique"" post/discussion type of websites (stackoverflow, github issues, email web clients, Reddit, medium, twitter, etc.) are really all the same - there's usually a starting paragraph and a bunch of replies. The differences are superficial(our feature is that we limit characters! Or our feature that we keep an integer stored with each post!).

That's Gnus idea and I completely agree. Separate the differences in the backend and use mostly the same frontend for all of them.

Why have we been moving towards sx.el, twitter.el, elfeed.el, magithub.el, mu4e.el, etc? Am I missing something?",55,60,Gnus is such a neat and good idea. Why doesn't it get more love from Emacs community?
,2,56,Emacs Mini Manual (PART 1) | tuhdo
,43,59,"Emacs was once called ""Eight Megabytes and Constantly Swapping"""
,28,58,"If you ever considered making a donation for emacs orgmode but didn't take the time, now is your chance"
,31,55,C & C++ Development Environment for Emacs
,38,53,[Spac]emacs on a phone. Who said you can't code on a phone? x/post
,62,55,you should really check out the line-numbers scratch branch
,10,56,Try Spacemacs directly in the browser!
,4,57,Tutorial introduction to searching in Emacs
,62,59,"From helm, to ivy, a user perspective"
,13,56,"Refine: Finally, an editor for Emacs!"
,5,54,"Don't tug on that, you never know what it might be attached to"
,16,57,Today's xkcd reminds me of Emacs Lisp regexes
,5,59,(defvar best-gift
,45,56,Could this be a Paredit/Smartparens killer?
"So I finally created the podcast (Well I was already doing them and uploading them to [YouTube](https://www.youtube.com/playlist?list=PL3kg5TcOuFlodvwJDtmq-5rKD3DyyXvnb)). Audio format is available [here](http://emacsel.podbean.com), you can also get the RSS feed and add it to your favorite podcast listening app or whatever you young kids use these days. Also a [twitter](https://twitter.com/Emacsel) channel was created! It would be a huge help if you guys could help spread the word, by twitter or any other social media :smiley:  

I want people to contribute tips, suggestions and questions!!! 
They can go [here](https://github.com/gopar/Emacs.el)

Hopefully, I'll clean up the site abit. (Im really lazy so I might not do anything, just being honest)",23,53,Emacs.el Podcast (Finally)
"### Alternate Title:  New vs. Old:  the interface issue that just won't go away.


I'm an old-hand at using emacs now, with over 20 years of heavy use.  And I'm getting very weary of posts here that have the following form:


""I really want to learn emacs...now, how can I make emacs behave exactly like an interface I'm already familiar with?""


Typically, this is a  vi(m) user or Windows user, perplexed and/or horrified that emacs does something differently from the beloved default behavior of $OTHER_INTERFACE.    And yes, ""beloved"" is a bit of snark, as ""expected"" (or ""unquestioned"", or ""unconsidered"") would be more accurate.


And inevitably, someone will say ""it's nice when things are the same"" (or almost equally often whine, ""why can't things be the same?!"")


And that's sort of the core issue here:  is same-ness the greatest virtue possible in interface design?   


I'll grant that consistency is helpful.  But it's more important *within* interfaces than between them.  My phone, my television, my editor, my OS, and my video games all have different interfaces, and I seem to be mentally flexible enough to roll with that.  (And many of these have multiple interfaces embedded within them...though I'll also freely concede that many of these interfaces are just plain awful.)


But emacs has an *excellent* interface...if you are willing to learn it.


Though, **it is different**.  Emacs and GNU Readline have a different heritage than CUA and vi.


**It is also niche**.  CUA users, in particular, worldwide simply dwarf emacs/readline users.  (Heck, I'm a CUA-user myself, in many contexts!  ...but this is also some of my frustration here:  I don't feel that I have some special genius brain wiring that makes me one of the lucky gifted few who can master more than *one* interface.)  So, approaching the title question again:  should emacs assimilate?


As an old-hand who has (at least to some degree) mastered emacs interface I want to scream, ""NO!""   The emacs native interface is a highly-developed interface, with over 3 decades of refinements.  And while some of emacs defaults were (and are) arbitrary choices, some are very carefully and conscientiously chosen for both gross and subtle reasons.   And I see very little harm in emacs *being* different.  Again, life is full of wildly different interfaces, and human brains are more than capable of handling those differences.


But inevitably, someone will object ""what about attracting new users?""


Putting aside the question of whether the emacs community needs to grow...


which is itself very arguable question; so arguable, in fact, I'll ask you to make your own reddit post, if you wish to debate it!  (Seriously, please consider this question off-topic, here!  Make a new post if you feel it needs discussing!)


...when a new potential emacs user asks how to make emacs mimic a more familiar interface, the current community's general response is to humor them, and provide the means to do so.


Part of this is that emacs is so flexible, it can!  Part of this, is that explaining the pros and cons of changing the interface is complicated (and likely overwhelming for a new user).  And part of this is just a desire to be helpful (and potentially help the emacs user-base to grow).


But I'm not convinced this is the best policy.  Especially since the result is usually a terrible hybrid of not-quite-emacs, not-quite newbie-familiar interface.  The worst of both worlds!   Doubly so for a beginner, just trying to learn emacs.  And we've created additional obstacles to them ever learning the native interface:  we've eliminated some of the motivation to do so by coddling their existing habits, and we've perhaps mangled the defaults to the point where tutorials or other forms of help are now potentially invalid and misleading.   And both of these reinforce the (wildly inccorect) idea that emacs native interface is awful, outdated and worthless.


I tend to think a better approach would be to just ask them to accept that *emacs is different, in a good way*, and try to convince them to learn some new habits, as a part of ""learning emacs"".   Rather than to pervert emacs native interface into some bastard hybrid.   


And for clarity, this is for **new** users only...once you're familiar with emacs, if you want to make *well-considered changes* to anything, to improve your experience, I'm all for that, and all for the community helping you out (if you need it).  But I think new users desires for change come from a bad place, namely:  ignorance and laziness (""I don't understand this interface, and I'm not willing to give it a fair try."")  Instead of a more experienced, ""I've tried things both ways, and coming from that experience, I prefer things this way.""


But maybe I'm wrong.  Maybe emacs native interface is outdated and harmful.   Maybe all interfaces would benefit from uniformity, until customized.  Perhaps CUA is the one true way, and all text-based interfaces should strive to conform as closely as possible to that model.


So I'm asking the community:  should emacs be different?  ",148,54,Should emacs be different?
,19,55,Emacs Theme Gallery
,11,57,"Browsing the emacs manual at 7:40 in the morning with no sleep, i stumbled on this gem"
,10,57,nyan-mode.el - Turn your Emacs into Nyanmacs!
,2,57,Neal Stephenson on Emacs
,24,54,RFC: ts.el - Emacs date-time library
,16,56,2018-11-14: Building a Second Brain in Org Mode - Tasshin Michael Fogleman
,9,56,"Configuring Emacs, lsp-mode and the python language server"
,1,56,Elisp Guide: A quick guide to Emacs Lisp programming | chrisdone
,8,56,"Dumb Jump v0.5.2 adds basic support for SCSS, Crystal, Scheme, SML, Erlang, LaTex, VHDL"
,20,56,Org-mode 9.1 released
,0,59,Pattern Matching in Emacs Lisp
,5,57,A Future For Concurrency In Emacs Lisp
,3,55,EmacsGifs website reboot
"Hello guys !

I am super happy to announce that I have dropped my first APK release on Github.
It is the first iteration of what I called MobileOrg 2.0, an Android Org Mode parser with a Git synchronization. (For the time being I have disabled all other sync mechanism as I want to debug the Git sync but they will be re-enabled in the future)


Besides the fact it uses Git, the major change is the fact than MobileOrg is now standalone. It means you no longer have to interact and use weird commands such as M-x org-mobile-push to synchronize. This implies that the app has to create the agenda file by its own (I am aware the agenda is not functional for the time being).


Quick Start:

- Go [here](https://github.com/matburt/mobileorg-android/releases/tag/2.0.2) and download the APK

- Put the APK on your phone and click it to install it (you'll have to allow unsigned APK to continue)

- When you'll launch the app for the first time you'll be asked Git credentials. Here are a 2 examples of how to fill the stuff.

* Sync with a github repo (let's take mine at https://github.com/wizmer/OrgNotes) 
As MobileOrg does not support (yet) https, you'll have to use SSH+private key authentication. In username set: **git** (not your username !!), select your private key, in absolute path set: wizmer/OrgNotes**.git** (don't forget the .git !) and in host: github.com, you can let port blank as port 22 is default.

* Now to sync with you own repo on your own server.
Filling the form is straightforward. Just make sure to use the **absolute** path (EDIT: you can also use the form '~/relativePath'). But the caveat is that your repository must be in **bare** mode. Here is a procedure to create a bare repo with the org file you want to synchronize.

Edit: I have updated the APK to correct the crash on Android Nougat



1. Go on your server

2. Create the bare repo: mkdir bareRepo && cd bareRepo && git init --bare

3. Clone it: cd .. && git clone bareRepo nonBare

4. you will use the nonBare to commit and push your first files: cp *.org nonBare/ && cd nonBare && git add *.org && git commit -m ""adding my files"" && git push

5. you can now delete the nonBare repo: cd .. && rm -rf nonBare

6. back to MobileOrg and specify the absolute path to the bare repo


Enjoy !

PS: And don't forget to give me feedbacks !! You can use the [Github issue tracker](https://github.com/matburt/mobileorg-android/issues)


",27,55,Android MobileOrg 2.0 Call for tester !!
,12,55,GNU Emacs pretest 25.0.94 now available
,62,56,Why I Use Helm and Why You Should Too
"I did use incremental search all the time, but some things were unclear and obscure.

I started search with C-s  today and was curious if it had the major-mode help page.

After pressing C-h m, incremental search help page popped up and here's what I learned

    Type DEL to cancel last input item from end of search string.
    Type RET to exit, leaving point at location found.
    Type LFD (C-j) to match end of line.
    Type C-s to search again forward, C-r to search again backward.
    Type C-w to yank next word or character in buffer
    onto the end of the search string, and search for it.
    Type C-M-w to delete character from end of search string.
    Type C-M-y to yank char from buffer onto end of search string and search for it.
    Type M-s C-e to yank rest of line onto end of search string and search for it.
    Type C-y to yank the last string of killed text.
    Type M-y to replace string just yanked into search prompt
    with string killed before it.
    Type C-q to quote control character to search for it.
    Type C-x 8 RET to add a character to search by Unicode name, with completion.
    C-g while searching or when search has failed cancels input back to what has
     been found successfully.
    C-g when search is successful aborts and moves point to starting point.
    If you try to exit with the search string still empty, it invokes
     nonincremental search.

    Type M-s c to toggle search case-sensitivity.
    Type M-s i to toggle search in invisible text.
    Type M-s r to toggle regular-expression mode.
    Type M-s w to toggle word mode.
    Type M-s _ to toggle symbol mode.

C-M-w is great. Deletes the last character without having to reach for delete key.
M-s e is what I was hoping for. It allows editing the minibuffer with all the shortcuts active as you would expect when editing a text (including navigation)

This seems simple enough to figure out, but I spent years in emacs without *thinking* emacs...",20,55,Went for ages without learning to properly use incremental search
,16,58,Stack Exchange for Emacs
,23,57,GNU Emacs Themes Gallery
,17,54,Org-mode Screencasts - Episode 1
,14,53,The Emacs Calculator
,8,55,org-super-agenda 1.1 released
,0,54,el-patch: Future-proof your Emacs Lisp customizations
"Thanks to [eli-zaretskii](/user/eli-zaretskii) I have the answer:

Assign the ""primary"" font on the `default` face, via `(set-face-font 'default ""Input Mono-14"")`

Assign font overrides to `fontset-default` via `set-fontset-font` for everything else, via things like `(set-fontset-font t 'phaistos-disc ""Preferred Font For Script-14"")`, or `(set-fontset-font ""fontset-default"" (#x1234 . #x4321) ...)`; see the documentation for [`set-fontset-font`](https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#index-set_002dfontset_002dfont-4654) for details of the valid arguments to specify the font, and the target range(s), in that call.

...and don't touch the underlying details, especially creating fontsets, because I had incorrectly wandered into the ""you are not expected to understand this"" part of the typeface management code, and I definitely didn't really understand it. :)

---------------
## Original post

Today, frustrated at a less readable, and poorly sized, font being used for some characters outside of ASCII, I thought to myself ""I'll configure Emacs to use a better font there, with an appropriate size, so this code doesn't look terrible and ragged."" 

Following is the long version, but the summary for the ""too lazy, didn't read"" brigade is:

1. Emacs ""fontsets"" seem like they are still the way to do Unicode font configuration.
2. I can't make them work.
3. The documentation is long on reference material, and short on examples.
4. So is the Internet.
5. I hate everything now.
6. Also, my Unicode fonts outside the ASCII range still suck.

Eventually I discovered using `create-fontset-from-ascii-font` to create `fontset-custom` would actually work.  Not especially intuitively, thanks to the less than intuitive font selection order of `x-resolve-font-name` without additional rules, but it worked.

Key questions:

* is creating a fontset the ""best practice"" at all?
* is it expected that I must create a custom fontset, and cannot use the standard or default fontset?
* is `(set-face-attribute 'default nil :name ""fontset-custom"")` the ""expected"" way to declare use of that custom fontset?
* why are those auto-generated Courier based fontsets created when using standard and/or default?

I appreciate y'all helping, as I'd like to better understand the whys of this, and neither the manual nor the source are very effective at doing so.  Once I finally know what the best way to handle this is I can go about sending in a documentation patch, though, so at least the next person doesn't go through this. :)

--------
## The full story

To abuse a quotation, ""now I have two problems"", one of which is figuring out how to do this; the last time I touched non-ASCII font configuration was when I was using XEmacs on GNU/Linux a decade ago, and now I'm using GNU Emacs, on macOS, so kind of a different universe.

It looks like the solution from the era is still the best practice today, though: build a fontset that contains the desired character range to font mappings, and use that everywhere.  Which sounds so simple, but ... now I have three problems. :/

According to the documentation, I should be able to use a fontset name as the `:name` attribute of a face.  However...

```elisp
(fontset-name-p ""fontset-default"")  ;; => t which is not really a surprise

;; set my font for ASCII, just because...
M-x describe-fontset <RET> fontset-default <RET>
Fontset: -*-*-*-*-*-*-*-*-*-*-*-*-fontset-default
CHAR RANGE (CODE RANGE)
    FONT NAME (REQUESTED and [OPENED])
;; elided
 ..  (#x80 .. #x9F)
    -*-Input Mono-*-*-*-*-*-140-*-*-*-*-*-*
	[-*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1]
;; elided

(set-face-attribute 'default nil :family nil :foundry nil :font ""fontset-default"")
;; https://imgur.com/a/xyTESoz -- that doesn't look like Input Mono very much...

M-x describe-fontset <RET> <RET>  ;; show the fontset in use
Fontset: -*-Courier-normal-normal-normal-*-10-*-*-*-m-0-fontset-auto2
CHAR RANGE (CODE RANGE)
    FONT NAME (REQUESTED and [OPENED])
;; elided
 .. ʯ (#x80 .. #x2AF)
    -*-*-*-*-*-*-*-*-*-*-*-*-iso10646-1
	[-*-Courier-normal-normal-normal-*-10-*-*-*-m-0-iso10646-1]

C-u C-x =  ;; tell me about my character
             position: 5790 of 14921 (39%), column: 0
            character: e (displayed as e) (codepoint 101, #o145, #x65)
    preferred charset: ascii (ASCII (ISO646 IRV))
              display: by this font (glyph code)
    mac-ct:-*-Courier-normal-normal-normal-*-10-*-*-*-m-0-iso10646-1 (#x48)

;; repeat using `""fontset-standard""`, get same results.
```

So, clearly giving the fontset name -- despite it being valid, says the manual -- isn't working as expected.  I'm being thrown over to an unexpected, auto-generated fontset using the wrong font, rather than the one I requested.

`fontset-alias-alist` contains no references to `fontset-default` on the left, so we are not remapping that during fontset lookup in [xfaces.c:3161](https://github.com/emacs-mirror/emacs/blob/d77d01d22902acdc45c2c7059de4f1b158ab5806/src/xfaces.c#L3161).  

A stroll through the rest of the code turns up the wonderful, and undocumented in the Info manual, and the docstring, existence of the [apparently valid `:fontset` attribute name](https://github.com/emacs-mirror/emacs/blob/d77d01d22902acdc45c2c7059de4f1b158ab5806/src/xfaces.c#L6537).

This is [much simpler code for setting the fontset of the face](https://github.com/emacs-mirror/emacs/blob/d77d01d22902acdc45c2c7059de4f1b158ab5806/src/xfaces.c#L3203) but, sadly, the behaviour is unchanged: the fontset may have the appropriate font configured, but it does not use it, preferring to give me another newly generated fontset instead.

Finally, in desperation I tried creating my own fontset and ... after a couple of false starts, it actually worked, and I could apply it as the default ""font"" for the default face:

```elisp
;; curiously, I had to specify a medium weight, or I would get the ultralight oblique variant...
(create-fontset-from-ascii-font ""Input Mono-14:medium"" nil ""custom"")
(fontset-name-p ""fontset-custom"")  ;; => t
(set-face-attribute 'default nil :font ""fontset-custom"")

M-x describe-fontset <RET> <RET>  ;; even though it is visually correct
Fontset: -*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-fontset-auto5
CHAR RANGE (CODE RANGE)
    FONT NAME (REQUESTED and [OPENED])
C-@ .. DEL
    -*-*-*-*-*-*-*-*-*-*-*-*-iso10646-1
 ..  (#x80 .. #x9F)
    -*-*-*-*-*-*-*-*-*-*-*-*-iso10646-1
	[-*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1]
;; elided
```

...and finally I have a fontset working.  That means that I can configure it, using the standard fontset mechanisms, to render any Unicode code point via any typeface I wish, with the appropriate properties applied to scale, etc, it to the right place.

So, I guess my key question is as follows:

Is this the correct way to make a fontset work, creating my own custom one, and ignoring the default and standard fontsets?  Is there something I missed about how fontsets are intended to be constructed in the manual or something, explaining this?

Also, is this the ""correct"" strategy for getting fine-grained control over typeface selection in Emacs on both X11 and NS GUI Emacs instances?

------------
## Requested Details from comments
```elisp
;; configured with this, and only this, stanza:
(set-face-font 'default ""Input Mono-14"")

M-x describe-face <RET> default <RET>
           Family: Input Mono
          Foundry: nil
            Width: normal
           Height: 140
           Weight: normal
            Slant: normal
       Foreground: #C5D4DD
DistantForeground: unspecified
       Background: #3C4C55
        Underline: nil
         Overline: nil
   Strike-through: nil
              Box: nil
          Inverse: nil
          Stipple: nil
             Font: #<font-object -*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1>
          Fontset: -*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-fontset-auto1
          Inherit: nil
```

Full details for one of the troublesome characters, plus a regular one:

```
M-1 C-x =   ;; over the troublesome one...
             position: 23 of 116 (19%), column: 22
            character: ⋯ (displayed as ⋯) (codepoint 8943, #o21357, #x22ef)
    preferred charset: unicode (Unicode (ISO10646))
code point in charset: 0x22EF
               script: symbol
               syntax: . 	which means: punctuation
             category: .:Base
             to input: type ""C-x 8 RET 22ef"" or ""C-x 8 RET MIDLINE HORIZONTAL ELLIPSIS""
          buffer code: #xE2 #x8B #xAF
            file code: #xE2 #x8B #xAF (encoded by coding system utf-8-unix)
              display: by this font (glyph code)
    mac-ct:-*-Arial Unicode MS-normal-normal-normal-*-14-*-*-*-p-0-iso10646-1 (#xEC2)

Character code properties: customize what to show
  name: MIDLINE HORIZONTAL ELLIPSIS
  general-category: Sm (Symbol, Math)
  decomposition: (8943) ('⋯')

M-1 C-x =   ;; over a boring ASCII character
             position: 66 of 116 (56%), column: 65
            character: a (displayed as a) (codepoint 97, #o141, #x61)
    preferred charset: ascii (ASCII (ISO646 IRV))
code point in charset: 0x61
               script: latin
               syntax: w 	which means: word
             category: .:Base, L:Left-to-right (strong), a:ASCII, l:Latin, r:Roman
             to input: type ""C-x 8 RET 61"" or ""C-x 8 RET LATIN SMALL LETTER A""
          buffer code: #x61
            file code: #x61 (encoded by coding system utf-8-unix)
              display: by this font (glyph code)
    mac-ct:-*-Input Mono-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1 (#xD7)

Character code properties: customize what to show
  name: LATIN SMALL LETTER A
  general-category: Ll (Letter, Lowercase)
  decomposition: (97) ('a')
```
",39,51,"""best practice"" for configuring fonts in Emacs today - fontsets, the default face, and ... IDK, like, stabbing things, maybe?"
"I was reading the Planet Emacsen [blogpost](http://irreal.org/blog/?p=7501)and was amazed to see this related question on [emacs stack exchange](https://emacs.stackexchange.com/questions/44889/what-is-the-a-binding).

The blogpost says in the end

> Perhaps I’m the last Emacs user in the inhabited universe to learn this but just in case I’m not, I’m sharing the information 

which may not be the case for most of us.

I hope this is a new learning.",13,55,TIL: Alt and Meta keys are different keys in Emacs.
,18,52,Emacs: More pro-tips
,51,57,Getting started with Doom Emacs: A great transition from vim to Emacs
"So I have finally decided to try out `exwm` and almost immediately regretted not trying it out sooner. It took me couple of days to figure out various `X11`, `yabar` and `dunst` settings to make things manageable and ready to be used as my primary window manager.

[screenshot](https://imgur.com/a/UkbbE0j)

I am already crazy about Emacs but this thing potentially can take things to a completely different level for me.
Now I have all sorts of crazy ideas and tons of questions. Can you guys help me finding my zen by throwing some ideas and suggestions?
I am sorry for too many bullet points here, *of course I don't expect to find answers to every one of them*.

- How can I rebind native keys in apps (that's possible right?). For example how can I make that tabs switching in a browser done via `Super+h/l`? Or how can I make `C-n/C-p` work globally for `down/up`?

- How can I feed Emacs's arbitrary stuff onto `yabar`? e.g. I want to display `org-clock-current-task` in it. Is that doable?

- Are `exwm-workspaces` is really a good way? Maybe `persp.el` AKA `Spacemacs layouts` would be better?
  So for example I could probably make it that every app, whenever opened creates its own layout and places itself in there? And then I can make it possible to jump to any app, and when that happens, Emacs would take me to layout where the app sits.

- Is there such a thing as a list of `exwm` apps/windows that should always open in floating mode?

- How do you deal with a pinentry dialog? It sometimes appears kinda crammed and I can't see the input where I supposed to type things.
",137,55,EXWM is awesome or what?
,1,57,"Using Org Mode, LaTeX, Beamer, and Medibang Paint to make a children’s book"
,22,53,Emacs on Android with Termux. Works better than expected.
,0,55,2018-01-23 Emacs news
,8,58,Keep your Slack distractions under control with Emacs
,6,55,GNU Emacs 25.2 enriched text remote code execution
"My fellow Emacs Lisp developers, what are you currently working on?  As for me, in my spare time (in no particular order of priority)...

1. Fixing bugs for `php-auto-yasnippets` that have existed for *far,* **far** too long.
2. `defcli`: A package to easily create an Elisp interface to any command-line program that uses sub-commands, e.g. Git, Tup, jrnl, et alia.
3. A major mode for jrnl.
4. A major mode for jq.
5. A major mode for twtxt.
6. Reddit-comment support for `copy-as-format`.
7. An Ivy-based version of `helm-gitignore`.
8. A small wrapper around `ivy-read` to make the common use-cases more concise.
9. Various Ivy-based utilities taking advantage of that conciseness mentioned above.
10. Something I am calling `prefix-postfix-keys`, which is a way to bind keys in a mode in a way where they will only invoke their bound functions when pressing the key at the beginning or end of a line.  See the Lispy and Worf packages by /u/abo-abo to see that exact concept in practice.  Honestly all I'm doing is generalizing his work in those packages so that it is easier to create such bindings for any mode.
11. An addition to Lua Mode using aforementioned Lispy and Worf-ish style commands
12. A major mode for Just.
13. `M-x compile` and Projectile support for Tup.
14. `dvorakify`: A package for people like me who have used the Dvorak keyboard layout for nearly two decades at this point.  The package changes the default keys of many packages to make them easier to use for Dvorak layouts.  For example, Avy uses the Qwerty homerow for letting you jump to the most likely matches.  But those keys are not remotely as convenient when using Dvorak.  So this `dvorakify` package does stuff like reconfigures Avy for you so that it uses the Dvorak homerow.
15. A mode for reading EPUB documents.  The existing `ox-epub` exports Org Mode files into EPUB documents, but this mode will let you read EPUB files within Emacs.

I am sure a good chunk of these ideas are already implemented by people smarter and better than myself.  And if you know if any packages that do anything I listed above, *please* let me know.  I will very much appreciate it.

So that's most of my list.  What about the rest of you?  What are you working on?  Anything remotely similar?  (Because if so I'd be happy to collaborate.)  And finally if you are working on one or more Elisp packages---happy hacking!
",83,55,What Are You Currently Developing in Emacs Lisp?
"In [yesterday's XKCD](https://xkcd.com/1806/) the hypertext describes binding undo and redo to the scroll wheel, so I decided to try it. I've used undo-tree since Emacs doesn't actually come with a redo command, and I used the shifted mouse wheel so I don't accidentally destroy a bunch of work in a buffer:
    
    (with-eval-after-load 'undo-tree
      (define-key undo-tree-map (kbd ""<S-mouse-5>"") 'undo-tree-redo)
      (define-key undo-tree-map (kbd ""<S-mouse-4>"") 'undo-tree-undo))

Surprisingly it works okay, the undos and redos don't freeze up no matter how fast I move the wheel. No idea if I'll find it useful though.",13,51,"""A scroll wheel mapped to send a stream 'undo' and 'redo' events could be kind of cool."""
,16,54,"Using Emacs - 26 - Google Calendar, Org Agenda"
,14,55,"GitHub - waymondo/apropospriate-theme: A colorful, low-contrast, light &amp; dark theme set for Emacs with a fun name"
"I try to stay within emacs for all things in my current workflow.  For finding and searching within files I use *shell* plus find | xargs grep.  I usually have somewhere between 50-100 buffers open at any one point.

What am I missing that would make this a must-have for my workflow?  What things do you do with dired? 

From what I've read it looks like it would be easy to rename files, and do other misc things to many marked files.",33,56,How do *you* use dired?
,45,56,Introduction to Emacs modules
,37,58,"Slimmer SVG modeline, when every pixel counts."
,18,53,hemingway-mode? I'd use it :)
"OK, this is second attempt (the first did not get to the rss feed
even) to announce [VLFI](https://github.com/m00natic/vlfi).  For those
who have tried to deal with files larger than RAM - this is
[vlf.el](http://www.emacswiki.org/emacs-se/VLF) on steroids.  As need
forced me, I added things like search, occur style indexing, editing,
jumping to arbitrary chunk and polish.  Hopefully it will be useful to
others as well.",11,56,Dealing with huge (gigabytes) files in Emacs
,25,53,A peek at Emacs 24
"C-n/p/f/b is not too complicated, comparing to hjkl, because you don't have to go back and forth between <insert> and <normal> mode anymore.

Packages are now behaving normally as they're expected to behave.

Learned a bunch of new editing features in vanilla Emacs that I do not have a chance to learn when I'm in evil, for example, `C-x r t` (`string-rectangle`).

Learned to read the Emacs manual properly.

And starting to feel the pain in my pinky now...",89,57,"I just moved away from evil-mode, feeling good"
,2,55,"Emacs, Spacemacs, or your friend's configuration ? choose them all"
,13,52,iA Writer Mode for Emacs
,10,56,Ghub 2.0 and Glab 2.0 released
,17,53,Mu has now reached version 1.0
,20,54,"frontmacs: A package-based, web-centric, acceptance-tested Emacs distribution"
,2,53,OrgMode E07S05: Goal setting & Goal Tracking
"Robert Chassell was the author of ""An Introduction to Programming in Emacs Lisp"". He passed away on June 30th.

I remember watching a while ago (and again recently) a video of John Wiegley with Sacha Chua where Wiegley says ""there are no good introductions to emacs lisp"" and after searching the info browser for the elisp reference and finding the intro there  says ""Oh, wait, there is one! Everybody should read this!"", or something like this...

That book is probably not the best introduction anymore to Lisp or elisp, but it introduces to a lot of concepts specific to emacs and elisp. As Wiegley said, everybody who is interested in elisp writing (especially amateurs) should read the book (or the info file).

https://www.gnu.org/software/emacs/manual/eintr.html",37,55,Robert Chassell has passed away and not many seem to have noticed...
"Hi guys! I'm not sure if this is an appropriate place for me to ask my question but I have an assignment that requires me to find out what reason emacs users have for supporting the tool. I'd love to hear what you guys have to say :)
Thanks!

Update: I've received more responses than I had anticipated. Thank you everyone who took time out of their day to respond to this! :) ",73,55,Why do you like Emacs?
"Just wanted to let you know that the mooc/course which introduced me to Emacs and Functional Programming is starting again. Although the course is not about Emacs it is required in the first part of the course and can be used throughout.

The second part will teach you programming concepts in Racket. Since Racket is a Scheme it can serve as an introduction to Emacs Lisp as well. I can wholeheartedly recommend this course for anyone who learns Emacs Lisp on his own without any functional programming background. I did not complete the course the last time but it really got me started to get behind the Introduction to Emacs Lisp level. Besides that it is the best online course I have ever taken.

If anyone is interested, I participate in the current course again and it would be great to find some others from this channel to form some kind of Emacs/Elisp interested people 
kind of learning group. 

The course already started but registration is still open:

https://www.coursera.org/learn/programming-languages

**EDIT**:

Because there is some interest I have created a subreddit for the study group. You can find it here:

https://www.reddit.com/r/ProgLangEmacs/

Join us now :) 

Even if we are only a handful of people I hope we can build a place for Emacs enthusiasts with fruitful discussions around course
topics and help each other to learn more about Functional Programming.",37,51,Great course to get into Functional Programming and Emacs/Elisp
,44,54,"Typing latency in various editors: Emacs, GVim, Atom etc."
"Would like to see some emacs prettyness from your daily workflows.

Org-mode + tumblesocks [Screenshot](http://i.imgur.com/utvy3EF.png)
",61,54,Emacs beautiful screenshots compilation
,6,55,Now Emacs Lisp is represented in the Github Showcase pages!
,7,56,Emacs theme gallery
Fuck I love emacs. ,8,58,"Wow, hadn't used Sabayon in a while, their default .emacs file has whitepsace enabled globally, couldn't remember how to fix it, googled, and found my post from 2 years back to this sub asking how to fix it, and got an answer from myself in the past..."
"A couple weeks ago, [I mentioned](https://www.reddit.com/r/emacs/comments/2y469e/things_that_make_you_feel_like_stuck_in_the_80s/cp69ced) that I would love to be able to assign modes to windows in Emacs, so that when I switch buffer or open new files, they go into the window dedicated to the appropriate mode.  The ever helpful /u/tuhdo mentioned that maybe [purpose](https://github.com/bmag/emacs-purpose) would be a helpful mode to try.

I have used purpose for a over a week now, and so far I find it to be exactly what I was looking for!  This week, I was working on a project for a class, and I was able to keep the same window layout for days (!!) without having to do any sort of window management.  Below is a diagram of how I set things up, along with the configuration in my init.el file:

        +-----------------------------+-------------------------------+
        |                             |                               |
        |                             |                               |
        |                             |                               |
        |                             |           Terminal            |
        |                             |                               |
        |                             |                               |
        |                             |                               |
        |       OCaml code            |                               |
        |                             |                               |
        |                             +-------------------------------+
        |                             |                               |
        |                             |           Compilation         |
        |                             |                               |
        |                             |                               |
        |                             +-------------------------------+ 
        |                             |                               |
        |                             |             Circe             |
        |                             |                               |
        +-----------------------------+-------------------------------+


        (purpose-mode 1)
        (setq purpose-user-mode-purposes
              '((term-mode . terminal)
                (shell-mode . terminal)
                (ansi-term-mode . terminal)
                (tuareg-mode . coding)
                (compilation-mode . messages)))
        (purpose-compile-user-configuration)

The OCaml, Terminal and Compilation windows were dedicated to their own purpose, while the Circe window had no specific purpose and thus was also used to display help buffers, twitter notifications, etc.

Purpose does a great job at integrating with my own particular workflow (e.g. it supposes that you use ido to switch buffers), and I love that it stays out of the way rather than force me to adopt entirely new habits.  The configuration is easy and flexible, and the benefits (at least for me) of being able to concentrate on my work rather than on managing an ever-changing window layout are very compelling.

I highly encourage you to try it for yourself and see if that is something you'd like to include in your Emacs workflow.  Happy emacsing!",22,57,A quick praise of purpose mode
,12,55,So ... the Emacs Theme Editor reboot launch is happening...
"Hello emacsen,

I have noticed some changes in the EmacsWiki's [GuileEmacs page](http://www.emacswiki.org/emacs/GuileEmacs), with information on GSOC 2014.

I am glad to see some progress but the wiki has little info about the current state of the project and I cannot find any recent discussion on the subject.

I think some feedback would be interesting and beneficial for the community.

With some answer to questions like :

* What have been done ?
* What still need to be done ?
* How can we help to bring it alive ?
* etc

At that point I have hard time understanding if Guile Emacs is a real project with the support of the community or a [toy|personal] project for GSoC participants.


If you have any (new) information about GuileEmacs, please share !",43,53,"GuileEmacs, GSoC 2014, any news ?"
,24,56,Flycheck 0.20 released — Modern on-the-fly syntax checking for GNU Emacs
"Just wondering what people use emacs for other than programming/editing text, mostly to see if there's anything interesting or useful.",54,54,What do you use emacs for *other* than programming/editing?
"Hey everyone, I am an emacs diehard, and although I know many of the popular modes to work with, I still think since emacs is so damn customisable I may be missing some of them. Please share anything you think is appropriate.

EDIT: Thanks everyone for the great response. HAIL EMACS!",101,53,Emacs modes that are worth knowing about?
,4,54,SLIME is now officially on GitHub
,44,53,Emacs 24.3 released
"I'm curious as to people's opinions on [Dired](http://emacswiki.org/emacs/DiredMode), and what if any dislikes they have, or tips for use.

I'm writing this because I hope to inspire some people who have not tried dired to give it a shot.  I took a very long time after starting to use emacs to seriously try out dired: I'd been using emacs for years before that point, and really regret not having tried it beforehand.

I don't see a huge number of posts about it on here, and I wonder a bit whether perhaps a lot of people were just like me: holding off and having not really tried it.

For those who have not used dired, it's a file-manager that displays a menu of files and directories and permits operating on them.  The closest program to dired I'd seen beforehand would probably have been [Midnight Commander](https://en.wikipedia.org/wiki/Midnight_Commander).

I really like using dired or other file-managers when operating on files that are hard-to-specify-by-name, like filenames with foreign language characters in them or where I need to see the list of files to pick from.

Some basics: you can get into dired by hitting `C-x d`.  If you're not using ido-mode, simply using `C-x f` and opening a directory will also work.  Once in, ^ will move up a directory, navigating to a directory and hitting RET will enter it, and navigating to a file and hitting RET will open it.

You can also get a dired buffer containing a selected set of files: try `M-x find-name-dired` or `M-x find-grep-dired`.

You can flag files for deletion with ""d"" and execute flagged deletions with ""x"".  Hit ""R"" to rename or move a file, and ""C"" to copy it.  There is a [lot more to dired](https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html), but that was enough to start me out when I started out.

Some init.el snippits that I find helpful for dired:

dired is smart about .tar.gz files, and lets one open a browser simply by hitting RET while point is on one.  It's also possible to make it do the same with .zip files:

    ;; Handle zip compression
    (eval-after-load ""dired-aux""
      '(add-to-list 'dired-compress-file-suffixes
                    '(""\\.zip\\'"" "".zip"" ""unzip"")))

I use ibuffer for my C-x C-b binding instead of list-buffers.  This has the ability to group buffers.  I tend to wind up with a lot of dired buffers, so it's nice to group them together:

    (setq ibuffer-saved-filter-groups
          (quote ((""default""
                   (""dired"" (mode . dired-mode))))))

By default, dired spends a lot of screen space showing the permissions and owner and modification time and so forth of a file: more than half of an 80 column display.  I very rarely want to refer to this material...I'd rather use the space for filenames.  There's a nice package called dired-details that will hide this by default and permit hiding and showing that information with `(` and `)`, and an add-on to that called dired-details+.  Some of the systems I work on have dired-details+ installed, and some don't, so I use it if present, and if not, ignore it so that loading my init file won't fail.

There's also a nice add-on called diredful, which permits assigning faces to particular filetypes.  I like to color-code images and .exe files, so I load that if present as well:

    ;;; Dired
    ;; Use details
    (add-hook 'dired-load-hook 'my-dired-load-hook)
    (defun my-dired-load-hook ()

      (if (require 'dired-details+ nil t)
          (setq dired-details-propagate-flag nil)

        (progn (message ""Notice: dired-details+ not present"")
               ;; If we don't have dired-details+, at least try for dired-details alone
               (if (require 'dired-details nil t)
                   (dired-details-install)
                 (message ""Notice: dired-details not present""))))
      (setq-default diredful-init-file ""~/.emacs-diredful.el"")
      ;; We can function on systems without diredful, even though it's nice to have
      (if (not (require 'diredful nil t))
          (message
           ""Notice: diredful not present; not using extended highlighting"")))

By default, dired shows filesizes in bytes.  This uses up a lot of screen space, and is usually not very useful to read: I almost never want the exact byte-size of a file, but rather a summary of how large it is.

Also, many file browsers these days auto-detect numeric fields, and if they are present, sort files numerically by that field instead of lexicographically.  And example would be three files: foo-1.zip, foo-9.zip, foo-14.zip.  By default, dired will first list foo-1.zip, then foo-14.zip, then foo-9.zip, because ""1"" comes before ""9"".  However, it's possible to ask dired to sort things numerically.  Here's how I ask for human-readable sizes and files sorted numerically:

    ;; Make sizes human-readable by default, sort version numbers
    ;; correctly, and put dotfiles and capital-letters first.
    (setq-default dired-listing-switches ""-alhv"")

Normally, when I try to copy a directory, dired asks me if I really want to do a recursive copy.  I always want to do this, and even if I didn't, the cost of accidentally starting a recursive copy isn't really all that bad.  This stops dired from prompting me:

    (setq dired-recursive-copies 'always)

Dired can execute a command on the file that point is currently on if you hit `!`.  However, this is a blocking operation: nothing else can happen in emacs while this is running.  This is obviously a problem if one wants to, say, play a movie or do some other long-running operation.  `&` will start the command in the background.  Unfortunately, that stores the command's output in a buffer named ""Async Shell Command"" which will cause two running programs to crash into each other and complain.  It's possible to ask dired to come up with a unique name for each:

    ;; Allow running multiple async commands simultaneously
    (defadvice shell-command (after shell-in-new-buffer (command &optional output-buffer error-buffer))
      (when (get-buffer ""*Async Shell Command*"")
        (with-current-buffer ""*Async Shell Command*""
          (rename-uniquely))))
    (ad-activate 'shell-command)

I use [emms](https://www.gnu.org/software/emms/), an emacs-based playlist manager and media player frontend.  I like having a keybinding to add the media files in an entire directory tree to emms from dired.

I also like to have an easy way to enter wdired, and do so with `C-c e`.  Instead of renaming a file one at a time, it's possible to use wdired, where a dired buffer becomes editable.  Make all the filename changes you want, using all of emacs' powerful text-editing tools, and then just hit C-c C-c when done to apply the changes.

    (defun my-dired-mode-hook ()
      ;; Let us have a key that puts the dired buffer into interactive renaming mode
      (local-set-key (kbd ""C-c e"") 'wdired-change-to-wdired-mode)
      (local-set-key (kbd ""M-p p"") 'emms-add-dired)
      )

    (add-hook 'dired-mode-hook
              'my-dired-mode-hook)

I sometimes use dired to open various sorts of files, and it's nice to be able to have dired be able to suggest the type automatically:

    (defun add-dired-extension-list (command extension-list)
      (mapc (lambda (extension)
              (add-to-list 'dired-guess-shell-alist-user (list extension command)))
            extension-list))


    (add-hook 'dired-load-hook
              (function (lambda ()
                          (load ""dired-x"")
                          (add-dired-extension-list ""mplayer -really-quiet --"" (make-regex-file-extension-list (make-file-part-extensions '(""avi"" ""mkv"" ""mpg"" ""mpeg"" ""mp4"" ""flv"" ""wmv"" ""rm"" ""asf"" ""wav"" ""VOB"" ""ram"" ""divx"" ""mov"" ""ogv"" ""flc"" ""swf""))))
                          (add-dired-extension-list ""xterm -e mplayer --"" (make-regex-file-extension-list (make-file-part-extensions '(""spx"" ""flac"" ""mp3"" ""ogg""))))
                          (add-to-list 'dired-guess-shell-alist-user (list ""\\.cbr$"" ""comix --""))
                          (add-dired-extension-list ""evince --"" (make-regex-file-extension-list (make-file-part-extensions '(""pdf"" ""ps""))))
                          (add-to-list 'dired-guess-shell-alist-user (list ""\\.pdf$"" ""evince --""))
                          (add-to-list 'dired-guess-shell-alist-user (list ""\\.cbz$"" ""comix --""))
                          )))

A common paradigm in text-based file managers is the two-pane [orthodox file manager](http://www.softpanorama.org/OFM/index.shtml); Norton Commander and Midnight Commander are among these.  I'm not a tremendous fan of these, but they do have one very nice feature: I often work with two directories, and do things like want to do many operations where I move files from one directory to another.  It's possible to ask dired to, if there are two dired windows open, suggest the other as a target for operations from the first:

    ;; Try suggesting dired targets
    (setq dired-dwim-target t)

",20,56,Dired discussion
,5,52,Fractal Rendering in Emacs
,2,58,The Ultimate Collection of Emacs Resources
,5,49,Evolution of Emacs Lisp [pdf]
,23,56,The Perfect Domain for Emacs Projects · Emacs Redux
"Another week, another trick. For this week, we will take a look at your new best friend for programming, if it isn't already, [flycheck](https://github.com/flycheck/flycheck)! I don't know about you, but in my early years with GNU Emacs, one of my first frustrations was to not be able to get the syntax checking on the fly during programming, like does many of IDEs. Maybe some of you are still using `flymake` to achieve this request, but I highly recommend to switch over `flycheck`. One of the main reasons is that `flycheck` receives more contributions and is therefore updated more often, a big point for the race of crazy languages with syntaxes that we know (look [here](http://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake) for more information) 😊

[Overview of flycheck.](https://i.redd.it/jhneuag2w0d11.png)

The picture above illustrates `flycheck` in action for the SCSS language. For instance, we can see that `flycheck` does not find the `font-size` property since I have not finished assigning it a value. Sweet isn't it?

A basic configuration of the package can be done by following:

    (use-package flycheck
      :defer 2
      :diminish
      :init (global-flycheck-mode)
      :custom
      (flycheck-display-errors-delay .3)
      (flycheck-stylelintrc ""~/.stylelintrc.json""))

In short, we going to enable `flycheck` for every modes, we give the configuration file for [stylelint](https://stylelint.io/) and also change the default delay to display errors. You are free to make this configuration as complex as you wish.

It is important to note that `flycheck` uses an external program to enable this syntax check. Therefore, it requires you to install the desired packages for the languages you are going to use.

The question you are probably asking yourself is how to integrate `flycheck` for the language you use on a daily basis. Nothing simpler, just go to the [website](http://www.flycheck.org/en/latest/languages.html) of this package, a section exists for that. Once you know the packages to install, just install them and inform `flycheck` by configuring the appropriate variables.

Finally, you can check your configuration in the appropriate buffer with the `flycheck-verify-setup` (`C-c ! v`) command.

[Overview of flycheck-verify-setup.](https://i.redd.it/a9mnvz7rx0d11.png)

The above picture shows that `flycheck` knows `scss-stylelint` well.

**NOTE:** it is possible to configure several checkers and easily change them with: `flycheck-select-checker` (`C-c ! s`).

Without going into details, it is also possible to create your own checker, I refer you to the documentation to do this.

Here is the `hydra` menu that I daily use for `flycheck`:

    (use-package hydra
      :defer 2
      :bind (""C-c f"" . hydra-flycheck/body))
    
    (defhydra hydra-flycheck (:color blue)
      ""
      ^
      ^Flycheck^          ^Errors^            ^Checker^
      ^────────^──────────^──────^────────────^───────^─────
      _q_ quit            _<_ previous        _?_ describe
      _M_ manual          _>_ next            _d_ disable
      _v_ verify setup    _f_ check           _m_ mode
      ^^                  _l_ list            _s_ select
      ^^                  ^^                  ^^
      ""
      (""q"" nil)
      (""<"" flycheck-previous-error :color pink)
      ("">"" flycheck-next-error :color pink)
      (""?"" flycheck-describe-checker)
      (""M"" flycheck-manual)
      (""d"" flycheck-disable-checker)
      (""f"" flycheck-buffer)
      (""l"" flycheck-list-errors)
      (""m"" flycheck-mode)
      (""s"" flycheck-select-checker)
      (""v"" flycheck-verify-setup))

Which gives this nice menu:

[Overview of hydra with flycheck](https://i.redd.it/jbke2gcfz0d11.png)

Here's how this post ends. I hope you enjoyed it, share your tips in comments with `flycheck`, eager to read you 😊

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",15,53,TIP: How to adopt flycheck as your new best friend
"I'm in day two of a trial of REmacs which has astounded me. [The simple fact that my config](https://github.com/ocodo/.emacs.d) spins up without a single alteration.

Given that my config is, without the slightest exaggeration, vast, I was really surprised that REmacs is now stable enough that it works.

I'm posting this for a couple of reasons, one, if you haven't tried REmacs yet, and you have even a basic knowledge of building software from source, go ahead. (I built it by following the `.travis.yml` file.)

If you have tried it and had problems, I think now is the time to jump in again.  It's also a great time to consider contributing to the project, if you're interested!

(Disclaimer: I have nothing to do with REmacs, I'm just delighted.)",80,53,Ask Reddit r/emacs - Who's using REmacs?
"Just a little package that provides some academic phrases that might help you while you write your paper. You can get it from MELPA at:
https://melpa.org/#/academic-phrases

Or from:
https://github.com/nashamri/academic-phrases",13,56,New package: academic-phrases
,8,53,"Blog post: ""What's in an Emacs Lambda"", by /u/skeeto"
,6,53,2017-10-30 Emacs news
,13,54,Auto complete everything in Emacs
"We all know how emacs and orgmode can change your workflow radically. Do you use any other tools which, in your opinion, are equally important? Which ones? ",87,53,Life changing as emacs?
"Someone asked me [in this comment thread](https://www.reddit.com/r/emacs/comments/5jdb7q/a_quick_guide_to_orgmode_todos/dbfbns9/) if I could share some of my setup to get everything into Emacs & org mode. So here's how I get stuff from my browser and my phone into Emacs and org-mode. I'm assuming familiarity with Emacs, org-mode, and org-capture. 

# Browser

I use EWW most of the time, and org-capturing from there is dead simple. Otherwise, I use Firefox. There's [this extension](https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/) that captures webpages.* When you're looking at a webpage, you can just hit a key combo to automatically capture it. I've got it set to `C-M-t`, which I believe is the default. To use it, you need to have an Emacs server running `(server-start)` and you need to `(require 'org-protocol)`. You'll also need to tell it what capture template to use. Go to the addon preferences and let it know what letter you want to use. I chose ""x"". Here's my capture template for ""x"":

    (""x"" ""firefox"" entry (file+headline (concat org-directory ""todo.org"") ""Firefox"") ""* TODO %c"" :immediate-finish t)

This inserts a new subheader in my todo.org file under the ""Firefox"" header. It is a link with the description as the webpage's title. 

# Mobile 

Phones are great for discovering new content, for consuming small amounts of content, and are super useful because they're always on you. They're less great for actually consuming information or figuring out complicated things. So there's quite a bit that I start to look at but want to come back to later on my laptop/desktop. So I wanted to figure out a way to org-capture various things from my phone. I could [run Emacs on Android](http://endlessparentheses.com/running-emacs-on-android.html), but that seemed... a bit much. So this is what I settled on. It works OK for most things. The worst part about it is that it relies on a whole bunch of companies and closed-source services. If anyone knows friendly open-source alternatives, please let me know! 

1. Sign up for IFTTT and Dropbox
2. Create an IFTTT applet: the IF part is if I send (IFTTT's phone number) an SMS from (my phone number), THEN append to a text file in my Dropbox
   1. I made the file name ifttt (Dropbox actually appends the "".txt"" extension afterwards and I don't think you can change that)
   2. Content: `* TODO {{Message}}`
   3. Dropbox folder path `org/` 

Now you can send any text to IFTTT's phone number and it will automatically get added to that file in your dropbox. Pretty neat, and great for jotting down notes on the go. You can also ""share"" things from most any app (firefox, etc) on your phone to an SMS app on your phone. Then just send whatever was ""shared"" to IFTTT. This works great with text and links; I haven't tried it with pictures or such. 

I also set up a repeating TODO in my main todo.org file that reminds me to refile everything in ifttt.txt every 2ish days:

    * TODO [#C] refile [[file:ifttt.txt][IFTTT reads]]
        SCHEDULED: <2016-12-22 Thu .+2d>

# Web apps 

The other neat thing you can do with IFTTT is to set up Pocket, which is a sort of ""read it later"" service. I have one applet that says if I add something new to Pocket, append to the previously-mentioned ifttt.txt file in Dropbox. Here is the content it adds:

    * TODO {{Title}} - {{Url}}<br>{{Excerpt}}<br>

That in and of itself is neat, but it becomes much more powerful when you combine it with a few other applets. For example, I have one that saves links from tweets that I ""favorite"" to pocket. So essentially I can just ""favorite"" a tweet with a link to read the link later. I do something similar with RSS feeds - I use feedly and mark the ""save for later"" button, which adds it to Pocket, which writes it to my ifttt.txt file. There's a ton of different web apps you can hook up this way. 

That's... quite a wall of text, sorry. I'll stop now and if anyone has questions, I'm happy to help out if I can!",21,55,Getting things from outside Emacs into org-mode/Emacs
,27,51,A Quick Guide to Org-Mode TODO's
"Oh my God! I gave emacs a shot, and I think I am here to stay! 
It is so fun to tweak and play with emacs, configuring it in elisp is much more intuitive and fun
than viml. I used vim for about 2 years, never considered my self a vim-guru, but I got quite 
used to it.

Few week ago I decided to give functional programming a shot, it looks fun and intuitive. So I
got into Scheme, goofing around with math and I quite enjoyed. But I have never ever thought that
I could go on Emacs side of things in terms of text editors. It scared me a lot! Its community, its robustness...
It is huge. Like an OS. I just jumped into it and gave it a shot. For few days I didn't do anything else that playing
with packages, and trying to tweak things to my liking. Things are pretty swift and reactive for now, but I have
seen huge emacs configs where they contained few thousands of lines, so I guess that stories about slow emacs
are true for those usages, not mine. 

But what shocked me the most is that emacs actually makes much more sense, at least to me! Everything
from configuring, to using. I got that modular Vim approach, I kinda got used to it, but hell it took me a
long time and nerve wrecking. Maybe I got more patient and adaptive during those 2 years with Vim, so when
I jumped on emacs it wasn't as shocking and hard as it was with Vim, since previous to vim I used only Sublime Text.

But now I think I am here to stay. And I am shocked, again, how much sense emacs make. If you want to use it
as OS, cool use it, if you want to use it as LISP IDE ok use it, if you want to use it as writing app, ok... I will use
it as text editor, boost in productivity is noticeable just after a week. I imagine how much I will enjoy after few years!

I won't delete neovim, but I think I won't launch it again anytime soon. :)

P.S: and when I watched last episode of Silicon Valley, I was delighted. ",65,51,First week on Emacs (now ex-Vim user)
"In every major mode I've tried, including the mini-buffer, `M-(` inserts a pair of balanced parentheses. 

    ()

If you give a numeric prefix argument, it will enclose that many sexps following point within the parens. Try typing this in a buffer:

    list 2 3 5 7 11

With point at the end of that line, type `C-a` to move point to the beginning of the line. Then type `C-u 6` followed by `M-(`. You should see the following:

    (list 2 3 5 7 11)

Giving a negative numeric prefix argument encloses that many sexps *before* point. Delete the previous line or start a fresh one and type the following:

    + 2 3 5 7 11

Don't press `C-a`. With point still at the end of the line, type `C-u - 6` (that's `C-u` then `-` then `6`) to give numeric prefix argument *-6* (negative six). Then type `M-(` and you should see this:

    (+ 2 3 5 7 11)

I just learned this by accident today. As far as I can tell, it isn't documented in the Emacs manual. (I'm referring to the [GNU Emacs Manual](https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html)).",25,53,Tip: M-( inserts a pair of balanced parentheses. Works everywhere AFAIK.
,27,54,Conquering Your Finances with Emacs and Ledger
"Hi, I'm moving to London and came across the [Transport for London API](https://api.tfl.gov.uk). The API gives access to an amazing amount of information, so I started creating an interface in Emacs for fun and learn a little emacs lisp on the way.

The result is [org-tfl](https://github.com/storax/org-tfl)! You can plan journeys and either view the result in a buffer or insert a special org section (see [screencast](https://github.com/storax/org-tfl#screencast)).
The idea of the org mode section is to have a heading with a special link. When you open the link, the journey will be queried from the api and the result will be placed below the heading. The link description gets updated too. You can use org properties and the scheduling functions to specify all parameters. I find it useful, when you have a regular schedule. This way I can see the itinerary result summary in agenda view for example and it informs if there are any disruptions.
Additionally a url to google static maps is generated for each leg of a journey.",9,52,London Public Transportation with helm and org
,20,52,"New Org Mode app for android, seems like a big improvement over the alternatives."
,18,49,GSoC 2013: Guile-Emacs
,0,54,great org-mode tutorial
,10,51,MSI Installer for GNU Emacs
,7,51,"general.el - a convenient, unified interface for key definitions (for both evil and non-evil users)"
,11,51,The Emacs Commune
"Hey everyone,

So I wanted list some things I'm doing to use/learn Emacs as I search for a job. For those curious, I switched career fields 2 years ago and I've been doing I.T consulting since then. Mainly helping small businesses with computer repair and website services. But now I want to search for job because I want more stability financially. I'm currently looking for jobs in the Linux/open source world.

So why learn Emacs? Well I had 2 goals; first learn something new so I can stay busy, second get rid of some paid/closed source apps I was using. When I discovered Org-mode I had to take the time to learn Emacs. Here's a list of stuff I replaced with Emacs.

1. [Notion.so](https://Notion.so)
2. Google Keep
3. [Atom.io](https://Atom.io)
4. Scribus
5. Planner/Bullet Journal

[Notion.so](https://Notion.so) is basically Org-mode but in a web-app, so that was an easy transition. ~~The only thing that Org-mode can't do is image/link previews~~. Other than that Org-mode is superior for 2 reasons, offline support and keyboard navigation shortcuts. Google Keep was another easy one since all I use Keep for is short notes and links. Also I should note that I found a cool android app called [orgzly](http://www.orgzly.com/) that I use to sync with my *org*  notes on my desktop. Atom editor was easy since it's basically an editor, I just had to find an Emacs theme that matched the one I use in Atom. Once I found all the amazing export functions that Org-mode I had to say goodbye to Scribus.

The most interesting one that I was able to replace was my planner. I use the [Bullet Journal](https://bulletjournal.com/pages/learn) system for keep track of my todo's and agenda. Org-mode once again turned out to be able to do everything that I was doing in my bullet journal. The best part is that I can now easily recall and search my notes, todo's, and agenda. If you used the bullet journal system, you know it can be a pain to recall something from a few month ago.

So am I happy with Emacs? Yes! Emacs is awesome and Org-mode is simply amazing. My next goal is to build a Wiki system inside Org-mode that helps organize my client information and a job openings tracker. So in conclusion Emacs is awesome, Org-mode will change your life.",25,53,Unemployed and learning Emacs
,18,50,"Getting started with GNUs for Email, RSS feeds and newsgroups"
"https://www.vim.org/vim-8.1-released.php

Try it out, `:terminal` seems to handle curses styles interfaces ala `htop` much better than `ansi-term` does. What can be done to make ansi-term a true terminal replacement?",26,52,Vim 8's :terminal makes ansi-term look bad.
,49,53,Emacs Anywhere (almost): added support for Linux
"I wrote my first package, [services-mode](https://github.com/cbowdon/daemons.el), a UI for managing system services. Before I attempt to get it on MELPA and claim the name, I thought it would be wise to see if anyone is interested. 

Edit: MELPA PR in progress, thanks all for support! Renamed to `daemons` to avoid confusion with `services` (a package for querying the service protocol DB in /etc/services)",29,51,Wrote a package: services-mode. Useful to anyone else?
,31,52,My personal mail setup
,28,51,"As a developer in 2016, you need to learn Emacs"
,8,55,Hello there!
,38,56,My favorite operating system <3
,12,49,emacs.stackexchange.com just went into private beta
,2,51,"EmacsNYC presentations from April: ""IRC with ERC"" and ""Intro to Emacs Lisp"""
"I'm a vim user working on making the switch to evil-mode emacs. I'm doing this for primarily two reasons:

* I believe (though without justification yet) that emacs is better for embedding shells, and sending selections to shells. I want this for interaction with debuggers and repls.
* I like programming language research, and a not-insignificant amount of research programming languages are emacs-centric

So, I'm just starting out and really have very little understanding of emacs, but evil-mode is really impressive. Things like ggVG to visually select everything and then :s/regex/replacement with matches/g work very much like they do in vim, with even more visual feedback about what's being selected and replaced.

I'm pretty psyched. Anyone know good resources for intermediate-level vim users migrating to evil-mode?",30,56,evil-mode is pretty freaking awesome
,31,50,What's New in Emacs 24.3
,1,49,Emacs co-maintainer wanted
,22,51,Why I Still Use Emacs
,0,56,A new major-mode for Python
,12,49,org-mode is awesome 
,13,52,with-emacs · Dynamic file browsing grid using ivy
,11,48,Spin Your Own Spacemacs-lite
,13,54,Search and Replacement Techniques
"One thing that I do is make universal use of emacs in a terminal — that is, a virtual terminal program (urxvt) is displaying emacs.  I never use graphical emacs.  I see a number of people who do do so.  I've tried that before, but on the whole came down on the side of use in a terminal.  I wanted to throw a few benefits of exclusively using emacs in a terminal out there, and a few of the challenges and workarounds.

First, the downsides.  Cons of terminal use everywhere:

* **No [fringe](https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html) available.**  This narrow strip down the side of the window can be useful to pack a bit more information into the window.  I've occasionally wished for this to be available -- there are some packages that do some useful things with it -- but it's not really core to using emacs.

* **Face coloration is less-extensive.**  Graphical emacs gets 24-bit color.  These days, terminals pretty much all have 256-bit color support, and some have 24-bit color support.  I've found that this isn't a big deal -- even a 16 color foreground on a 16 color background is sufficient to display pretty much all the information I want.  One thing that people want is to make text more-visible (a blue-on-black is hard to read) or reduce contrast (bright white on black can be a bit overpowering).  I dealt with the contrast and readability by just setting my virtual terminal's colors, since, really, the readability issues affected *all* software in the terminal -- the problem was one with a vanilla terminal in general, not just with emacs.  I use a color scheme that IIRC started as [solarized dark](https://ethanschoonover.com/solarized/) and got tweaked.  For those of you using an X11 environment, and xterm or urxvt, from my ~/.Xresources:

        #define S_base03        #252525
        #define S_base01        #00d040
        #define S_base1         #70a1a1

        *background:            S_base03
        *foreground:            #c0c0c0
        *fading:                40
        *fadeColor:             S_base03
        *cursorColor:           S_base1
        *pointerColorBackground:S_base01
        *pointerColorForeground:S_base1

        !! black dark/light
        *color0:                #000000
        *color8:                #666666

        !! red dark/light
        *color1:                #6f3030
        *color9:                #d06060

        !! green dark/light
        *color2:                #307f30
        *color10:               S_base01

        !! yellow dark/light
        !*color3:                #8f5f30
        *color3:                #9f5f30
        *color11:               #d0d060

        !! blue dark/light
        *color4:                #4040af
        *color12:               #7070ff

        !! magenta dark/light
        *color5:                #7f30cf
        *color13:               #f060ff

        !! cyan dark/light
        *color6:                #305f7f
        *color14:               #60c0f0

        !! white dark/light
        *color7:                #909090
        *color15:               #f0f0f0

    (If you're not familiar with ~/.Xresources, you'll need to have something run `xrdb ~/.Xresources` at some point after your X11 environment comes up to apply these settings.  I'm not sure whether GNOME/KDE/etc do this these days out-of-box.)

* **Some face properties are not available.**  You don't get to set font size, and don't get italicized characters.  Underline is available.  Haven't found anything really important here (and personally actually tried to avoid font size and italicization even back when I wasn't in a terminal...haven't really tried to put up with that since xemacs).

* **Images are not available.**  This is a bit of a niche, but browsing a directory with dired, one might want image thumbnails.  BBDB can show image thumbnails of contacts, as I recall.  Not really vital to emacs, but I can understand it being annoying to someone who *does* want to use this functionality locally.

    In theory, one might imagine TTY emacs gaining support for Sixel – at least for [xterm operating in a non-default mode, raster graphics can be displayed remotely](https://stackoverflow.com/questions/2114347/raster-graphics-in-xterm), and hypothetically emacs could be made to understand this and [display images](https://gist.github.com/hackerb9/a96cea91e6122d09a6c97f5eb797d5fa).  However, this is definitely not a common situation.

* **Multiple frames do not produce multiple windows** (in the parent environment sense of ""window"", like X11, not the emacs sense).  Certain emacs software, like [ediff](https://www.gnu.org/software/emacs/manual/htmlₘono/ediff.html) or [speedbar](https://www.gnu.org/software/emacs/manual/htmlₙode/emacs/Speedbar.html), open a new frame intended to be visible alongside the parent one.  This can be a useful mechanism.  Both can still be used without.  For ediff, one just gets another emacs window in non-graphical mode.  For speedbar, one can just switch to another frame in non-graphical mode and only see speedbar *or* the buffer one is working on.

* **Mouse-based copy-paste has limitations**.  I don't use the mouse to move text around in emacs, but it's a useful way to move data between emacs and another program.  In a terminal, Emacs cannot distinguish between the user typing characters and one pasting using the virtual terminal's paste functionality.  If you use, say electric-newline and paste Python, you'll get a stair-stepped indent.  If you have your terminal horizontally split (`C-x 3`), copying multiple lines of text in one window will include text from the other window.  If you have emacs displaying a continuation character and are copying text at a line-break, that gets included.  You cannot copy more than a page of text else the modeline will be embedded in the text.

    In practice, I've found that this isn't as-severe an issue as it might seem -- I rarely move text out of emacs, and the bulk of pasting text into emacs is tiny snippets or URLs from a web browser.  I do have this fix for the ""copying"" problem that uses `xsel`, but I honestly don't really ever make use of it.  In my `~/emacs.d/init.el`:

        ;; Permit kill-saving text to and from to X11 clipboard; beats the
        ;; heck out of manually copying with the cursor.
        (defun kill-save-to-x-clipboard ()
          (interactive)
          (progn
            (shell-command-on-region (region-beginning) (region-end) ""xsel -i"")
            (message ""Kill-saved region to clipboard!"")
            (deactivate-mark)))

        (global-set-key (kbd ""C-c k"") 'kill-save-to-x-clipboard)

        (defun yank-from-x-clipboard ()
          (interactive)
          (progn
            (insert (shell-command-to-string ""xsel -o"")))
            (message ""Yanked region from clipboard!""))

        (global-set-key (kbd ""C-c y"") 'yank-from-x-clipboard)

    If you want to make use of the mouse to select the region for the above `kill-save-to-x-clipboard` in xterm or urxvt, you can do so with [`xterm-mouse-mode`](https://www.gnu.org/software/emacs/manual/html_node/emacs/Text_002dOnly-Mouse.html).

Pros of pure terminal use:

* **Fantastic for remote use.**  I do a fair bit of remote use of Linux computers.  And the terminal is simply the best way to do that, by far.  It's friendly to high (or variable) latency, friendly to low bandwidth.  Emacs collects some of the best modern terminal-friendly software out there under one roof, which means that if you want to work in a terminal a lot, using emacs is a great way to do it.

    This includes the ability to detach and reattach (via [GNU `screen`](https://en.wikipedia.org/wiki/GNU_Screen) or via [`tmux`](https://en.wikipedia.org/wiki/Tmux)) to workspaces.  I tended to never shut down my working environment — just attach and reattach to it.  There is no graphical environment that I'm aware of that does this as-cleanly.  Sure, I can use VNC or similar to reattach to a graphical environment, but doing all one's work in VNC, even over a low-latency, high-throughput connection is not great.  VNC is a workaround for graphical environments that were never intended to be used remotely.

    For very high-latency or unreliable connections, one can replace `ssh` with [`mosh`](https://en.wikipedia.org/wiki/Mosh_\(software\)).  Working in any graphical environment with, say, 200 milliseconds of delay is painful.  Working in a terminal with mosh with 200 milliseconds of delay isn't ideal, but is certainly doable.

    It is true that emacs *also* has unparalleled capabilities to have a local graphical instance running against files on a remote machine.  Use of [TRAMP](https://www.gnu.org/software/emacs/manual/htmlₙode/emacs/Remote-Files.html) lets one open and work on remote files fairly transparently.  Add that to a remarkable amount of support in various emacs packages to transparently ""just work"" on the remote machine when editing a remote file (building and searching files, say), and one might viably make a workflow around a local emacs instance working via TRAMP.  My preference for the ability to just detach from my workspace as a whole made this less-desirable, though I do use this occasionally to edit a lone file on a system that doesn't have emacs installed.

* **No problems switching between terminal and X11**.  There was a long time when I tried living in both worlds -- use graphical emacs locally, terminal emacs remotely.  This was somewhat unsatisfying.  IIRC, emacs now has the ability to let one attach both X11 and TTY emacsclient instances to a single daemon, but my experience was that that tended to crash into software that thought that it was in pure X11-land and had set faces that only contrasted well in X11, and X11-dependent tidbits tended to creep into my workflow.  As long as I avoid using graphical emacs locally, working on a machine remotely becomes a non-issue.

    For example, if one copy-pastes with the mouse in a terminal, one positions point where one wants the paste to occur.  If one does so in a graphical window, one middle-clicks where one wants the paste to occur.  A small difference, but it's certainly annoying for muscle memory, and those tiny differences add up.

* **Marginally faster startup time**.  Not a huge deal, but the GTK builds of emacs tended to take longer to come up the last time I was timing them.
",42,52,"Pure TTY emacs, all the time"
,22,55,Using Emacs Episode 52 - Eyebrowse
"Hello,

&#x200B;

Not claiming I am an Emacs expert or anything, but thought posting the journey of configuring Emacs from scratch. This is the first video of the video series. 

&#x200B;

It is targeted for the new users to help them set up the Emacs config using org mode. Please have a look:

[https://youtu.be/HaCIn5gvJ84](https://youtu.be/HaCIn5gvJ84)",3,52,configuring emacs from scratch -01
,18,51,EmacsCast 5 — Blogging with Org mode and ox-hugo
,24,51,What's with the new Emacs icon [on Debian]? I feel violated by this mirrored 3...
"something you really love that emacs does. something weird or that you're proud of. it could be as simple as viewing [hackernews](https://github.com/clarete/hackernews.el/tree/d8c450bbc76d6bb65ec5cdb6c3b888a23f3769e9) or just watching some rss feed or handling your mail. to running httpd servers or using magit or doing spreadsheets in org.

my personal thing I think of is as simple as running and irc bot written in emacs-lisp through emacs for a twitch chat. 

a bit like this previous post:

[https://www.reddit.com/r/emacs/comments/4bk85r/whats_the_weirdest_thing_youve_done_with_emacs/](https://www.reddit.com/r/emacs/comments/4bk85r/whats_the_weirdest_thing_youve_done_with_emacs/)",59,48,whats your cool maybe obscure thing emacs can do?
,10,50,telega.el: GNU Emacs telegram client (unofficial)
,13,50,The Many Uses of Org Mode
,19,52,2018-04-16 Emacs news | sachachua.com
"Here is the changelog

* engines: compatibility with SPIP (provided by @bystrano)
* config: set `web-mode-enable-optional-tags` to `t` to accept certain unclosed elements (e.g. a `<li>` directly followed by a `<li>`)
* twig: compatibility with `{{ form_start() }}` directive
* closure: better indentation inside switch/case statements
* riot: virtual script block compatibility (courtesy of @masnmt)
* twig: better block uncommenting
* apache server-side includes: indentation takes into account `<!--#if >` comments
* jsx: compatibility with jsx fragments `<></>`
* stylus: better indentation and fontification
* comment annotation (e.g. JSDoc, PHPDoc): can be enabled with (setq web-mode-enable-comment-annotation t). Two faces (`web-mode-annotation-tag-face` and `web-mode-annotation-type-face`) have been added.
* ruby: compatibility with `<script type=""text/ruby"">` (Opal framework)
* go templates: compatibility with `{{- -}}` blocks
* twirl/scala: detection and fontification of `'symbols`
* twig: complex blocks are now detected properly (e.g. `{{ form_widget(address, {'attr': {'class': 'form'}}) }}` ; the first }} * used to be detected as the end of the block
* enable lexical binding

PayPal and Liberapay buttons have been added on [web-mode.org](http://web-mode.org). 
Do not hesitate to support web-mode
",7,51,web-mode.el v16 is released
,25,51,How to speed up cursor movement by 10x
,7,52,Using Emacs 39 - mu4e
"I recently realized that I've been getting a bit too deep into the org mode rabbit hole for the past three years. Basically I've been trying to use org for everything: managing todos, writing articles with citations, managing bibliographic references, storing interesting links to read, concept mapping with org-brain etc. etc. I got a pretty good system working but at some point it started to feel stretched, e.g. the massive org-bibtex files and lists of links were slowing down agenda and org-id. I never got round to checking my agenda and the complexity of maintaining all my little hacks started to feel like a cognitive strain.

I ended up using org where it's really amazing, quickly writing and outlining notes, and took my todos, links etc. elsewhere. This is not meant as a criticism of org, org truly is awesome, but as a cautionary tale that the creeping complexity can get to you over time if you're not careful.",38,53,Realized that org mode is a rabbit hole
"A new version of [web-mode.el](http://web-mode.org) has just been released

Short summary

* engine: compatibility with archibus views (*.axvw) : indentation and fontification of &lt;sql&gt; elements
* web-mode-auto-quote-style : 1 (default) for double quotes, 2 for single quotes
* engine: compatibility with xoops, hero (go) template engines
* dust: compatibility with text/x-dust-template scripts
* jsx: attribute auto-closing (attr={})
* indentation in Relay.QL Relay and gql, graphql GraphQL template literals
* indentation in html template strings (useful for vue.js and angular scripts)
* stylus: basic compatibility (cf. &lt;style lang=""stylus""&gt;)
* js: nice perf improvement by Brian Malehorn
* code indentation: 300% speed improvement
* django: compatibility with {% javascript %} and {% stylesheet %} blocks (used by shopify for example)
* folding: html comment folding

Any [donation](https://www.paypal.me/fxbois) to this project will be deeply appreciated",4,54,web-mode.el v15 is released
,4,51,The End of Gmane?
"It's no secret that Emacs is a text editor with a lot of functionality and that no one uses all that functionality.  That's fine, we should use Emacs in a way that feels easy and natural rather than trying to always be optimal in all our interactions.  Still, it is good to learn new tricks and sometimes we hear about a new command or a new package that improves our editing habits, even if only slightly.  Why don't we share some of those small changes that we've incorporated in our workflows recently?

I'll name three from the past weeks:

1. Using `M-a` and `M-e` to move in prose.  I was writing my thesis and moving by sentence was a great way to quickly go where I wanted with a little less character- by-character movement.
2. I've reactivated window-purpose mode; I talked about purpose before, but for some reason had disabled it.  Being able to create a window layout and have buffers go to the appropriate windows without any interaction from my part is subtle time saver: much less `C-x 0` and company.
3. I've started using `M-x remember` to keep a log of my day.  I've bound it to an easy keyboard shortcut and it's only a few seconds to bring up the remember buffer, enter a small note, save it and go back to work.

What are the little changes you made in your workflow this week?
",65,51,Tell us about a minor change you made in your Emacs usage recently
,55,51,"Stack Overflow developer survey 2016: Emacs used by 5.2%, Vim by 26.1%, Notepad++ by 35.6%"
"I have a lot of notes currently in Evernote and am looking for a good way to way to detach them from any particular service and just have them as text file(s) which I can sync between machines via Dropbox, Google Drive, or whatever.  Some of the features I'm looking for are:

    Easy to do text searches of the notes
    Easy to access the notes from my Android phone
    Easy to dump a bunch of copy/paste text as a new note

I am wondering if Org Mode would be well suited to this?  I haven't really used it much, and most of what I read about it is more geared toward ToDo lists instead of a text database, so I'm wondering if it really wouldn't work well for replacing Evernote?
",40,50,Would Org Mode work as a replacement for Evernote?
"Agenda: http://emacsconf2015.org/wiki/Schedule/ (San Francisco time)

Livestream: http://twitch.tv/emacsconf

Discussion: irc.freenode.net - #emacsconf (You can use http://webchat.freenode.net/?channels=emacsconf )

Edit - fixed IRC channel",17,50,"Emacs Conf 2015 (Aug 29 - today!) - agenda, livestream"
,14,54,Emacs Theme Creator V2.0
,147,51,"RMS on inclusion of basic LLDB suuport for gud.el: ""It looks like there is a systematic effort to attack GNU packages. The GNU Project needs to respond strategically, which means not by having each GNU package cooperate with each attack."""
"I've spent a good number of hours trying to make the transition to emacs for development. I am really drawn to the simplicity of getting to know and use one diverse tool as the hub of my development work. **But** it just doesn't seem possible. Especially after watching and reading some very long-time emacs users essentially admit that certain things about it just aren't as good as IDE's can offer. I just watched Metzger talk about using emacs for an entire career, and he was pretty clear that refactoring just isn't what it needs to be. I've read numerous people admit that completion through the varied different plugins doesn't quite match what a full-fledged IDE can do. I got Semantic working with autocomplete after a few hours and it was painfully slow for even a relatively small library like SDL. I've read that parsing with elisp simply can't match the parsers in IDEs.

So, how do you make it work? Do you just take the good with the bad, and acknowledge that, like everything, working with emacs will have its pros and cons? Is there some magical combination of plugins/modes/tools that I haven't yet found? Like I said, I'm really drawn to the simplicity and extensibility of working with emacs, but seeing people who have used it for decades admitting it falls short in some key areas makes it hard for me to understand how that can be possible, even if I put a lot more hours into it. And if I'm just going to use emacs to supplement an IDE, then I don't see how that is worth it.",104,49,How Do You Make Emacs Work For Development?
,7,54,Emacs 24.4 release candidate 1 is ready
,2,53,Projectile 0.11.0
,7,53,Emacs Conference 2013 Videos
,13,51,A modern on-the-fly syntax checker for Emacs.
,7,51,"I just had my first patch accepted into Emacs! It's incredibly minor, but it's still exciting."
,25,48,"Mindblow for me, never saw this earlier: Emacs Comment Box"
"[And here's what it looks like](https://raw.githubusercontent.com/Alexander-Miller/treemacs/master/screenshots/dired-icons.png).

And how it's installed:

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))


There's already a similar package based on all-the-icons, so here's also a quick comparison:

Pro:

 * Treemacs' icons are pngs, so they look better since they can use multiple colors

 * The icons are all images, so they are all perfectly monospaced which is often not the case with iconic fonts

 * Treemacs is *a lot* faster than all-the-icons, you won't feel any performance degradation even in buffers with thousands of files

Con:

 * It only works in graphical frames",15,49,treemacs-icons-dired: Treemacs' file icons for your dired buffers
,22,54,An easy-kill · Emacs Redux
"Hi! First time posting here. I just wanted to ask if my mindset about switching makes sense.

It is really starting to annoy me how hackish my configuration for tmux and neovim has become, it's basically a lot of code copied from dozens of different sources, and I really don't feel like learning the VimR configuration language as I don't like anything that resembles bash (same for tmux). It is also kinda hard to make my tmux + vim config work well on all my machines (bash for windows, Mac OS and Arch Linux). And every extension I want to make e.g. some workflow to work on my thesis on Latex involves hacking together some Vim plugin and it feels really ad-hoc and shitty.

I'm thinking since emacs is configured using a dialect of lisp that it's a little more gratifying to mess with, and at least it's just one language and one configuration instead of a bunch for neovim and tmux and such. And I don't think there is anything nearly as powerful as org-mode for vim (really want to try it!).

Thanks for reading! Sorry if it is the wrong place to post this.

",37,50,Thinking about switching from tmux + neovim to Emacs
,31,52,"[Emacs Notes] Emacs for your modern document needs: A quick guide to working with PDF, LibreOffice and Microsoft Office files"
,39,50,Master Emacs in one year
"A couple of months ago u/ambrevar posted this: https://www.reddit.com/r/emacs/comments/74hetz/emacs_everywhere/ and I was immediately intrigued. Well, I've been dabbling with exwm for a bit, and having got past a few show stoppers (frequently used programs crashing), I've now got to the point where I'm happy. I've moved on from my old wm (herbstluftwm) and am working on the final tweaks to my exwm config.

In the end my transition was simpler than I expected. I cheated a bit: For example I just continued to call my ncurses programs in urxvt because I wasn't getting the same colors, etc. in an emacs terminal. I'm happy it works smoothly.

This is looking good!",68,48,"exwm - Emacs Everywhere, Almost"
,18,50,SQLite3 API for Emacs Lisp
,25,49,These Weeks in Remacs
,7,48,Great Matthew Hutson article about Richard Stallman
"I was looking through some random people their ""interviews"" and saw this. from the creater of CSS Håkon Wium Lie.

https://usesthis.com/interviews/hakon.wium.lie/

""I also use emacs a lot. I type this in emacs, and I read email in emacs (in vm, to be precise). I've used emacs since 1988 and I have email archives from back then.""",2,50,CSS is probably created in Emacs
,8,51,Running Emacs on Android
,43,51,Parinfer has been ported to Emacs Lisp
,6,52,Guile-Emacs available in Guix
,14,51,discover.el: discover more of Emacs using context menus
,41,48,Welcome to The Dark Side: Switching to Emacs
,36,46,Emacs for developers
,9,50,Emacs users are like Terry Pratchett’s Igors
,13,51,Port of over 100 color-theme themes to Emacs24.
,2,48,Emacs Rocks: Working with HTML (2 min video)
,6,53,An Emacs conference (emacsconf.herokuapp.com) is #1 on hackersnews. Let's show them reddit!
,7,48,Emacs 23.3 released
"So just over a week ago, despite how lovely Atom editor is both visually and intuitively, I kept having this nagging itch... I should go over to Emacs, I should go over to Emacs, I should go... over... to... Emacs...

&#x200B;

After a bit of research, decided that Spacemacs looked pretty lovely, so thought I'd give it a go. 

&#x200B;

First couple of days: F\*\*£$£$ \*£""$$"""" how do you actually even open and save files? Endless nightmarish horrors of key sequences that seem to make the simplest operation inordinately and unnecessarily complex. 

&#x200B;

...now I could have packed it in there...

&#x200B;

But -- it was **so** fast, and the default colour scheme was fantastic, and I knew from its long history it is an inordinately powerful tool when you know what you're doing. 

&#x200B;

So I gritted my teeth. I started reading from the basics. I figured out the most essential commands. I started to install a few packages. 

&#x200B;

I stumbled many times adding lines to my .spacemacs file not understanding why they didn't work -- I'd been careful to enter them correctly. I learned that it was very important to make sure you put them in the right ***place***. 

Most importantly of all, I started to understand -- at a novice level -- its principle philosophy, and why it does everything pretty much completely differently to how other editors do it. 

My fingers started to get a bit faster; I started to start find a nice rhythm. I started to be able to move windows around, and realised experientially, not just intellectually, that THE KEYBOARD WAY is indeed best; the initial brick wall learning curve is repaid 1000 fold.

I have been using 'awesome' window manger under Arch Linux. It is very nice. But then I had a thought - why not just install exwm? Emacs can already handle window placement very nicely. Why not just it it full command? 

Do I really need those fancy little icons? Isn't the window panel a pointless addition, better handled by Emacs buffer model? Shall I...? Shall I.. Shall I GO FULL Emacs? Dare I?

OK. Followed the [exwm Arch Wiki](https://wiki.archlinux.org/index.php/EXWM) instructions and bound the super key as instructed. 

Launched it. Everything working perfectly first time. 

This is just beautiful. I guess you could say that in the space of a week I have now become a member of the Church of Emacs ;)

My ability level with it is still pitiful. I see people writing lisp like they're writing bracket poetry. I've started on the holy quest of Org-mode mastery. Even with the 2% of it I can use, it is glorious.

Next steps? I guess I should move all of my e-mail, IRC, and other stuff into Emacs now. 

My next plan, is to learn my way through org + HUGO for blogging purposes. And figure out AucTEX. I'd got LaTeX working nicely in Atom, so now I need to get that up and running in Emacs.

And let me just say ""hello"" to this amazing community, picked up lots of tips from reading through all the intelligent posts on here and the various subreddits.",53,49,Smitten by (SpacE)macs
,30,51,"Configuring Emacs, lsp-mode and Microsoft’s Visual Studio Code Python language server."
"Here's an example of some code I copied off the internet, but I'd love if people could post their own code for me to try.

I just feel like im missing so much when I watch people using vscode.

[https://i.imgur.com/OupJIJj.png](https://i.imgur.com/OupJIJj.png)

EDIT: Just realised the title is wrong, s/javascript/vscode",49,49,Why is Emacs' highlighting so inferior to javascript?
,6,48,"Ferret: A Lisp that compiles to C++, written in Clojure, literate-style, in a single Org file using Babel"
,20,49,Emacs & TLS [LWN.net]
"I'm new in Emacs and I actively learn about it. When I read or watch video about what it's capable of  I'm becoming so enthusiastic to master it. But I wonder when it will become convenient to use, for now it's just a pain. 

For example, I'm working on 2 files and reading manual. Usually manual at a separate window. So I need to switch between 2 files in other window. I'm pressing C-<Righ>/<Left> about 10 times every time I need other file, I've need only 3 buffers but there are plenty of them. 

Other way is to press C-x C-b and this creates a new buffer, to switch to it I need press C-o then choose there right buffer by pressing C-n few times. 

I'm switching between them pretty often and it's demand so many actions, when I'm using browser I'm easily do it by S-<TAB> (but usually don't have more than 5-6 tabs), in IDE there are the same tabs. And as it happens, it's very rare when I need more than 2 active tabs at a time, so I can drag and drop them with mouse together and switch between them fast. And there are no tabs witch I didn't create. 

So, how do you work with Emacs? When you have plenty of files and you need to switch between them time to time, Emacs constantly adding new buffers so it's list grow rapidly. How can you do it to be productive?",47,49,How do you organize workflow in Emacs? It has so many buffers.
,21,49,GNU Emacs 26.1 | 24bit colors | Suckless St Terminal:
,12,51,Emacs as C++ IDE
,37,47,Your Text Editor Is Malware
"I use atomic-chrome (package and extension) to edit any text on the web. Either I'm typing a comment on a forum, posting a question to Stackoverflow or starting a conversation on Github. Even this post I'm typing in Emacs. 

Now, recently my team decided to move all our documentation to Confluence. And dealing with documentation is not just part of my job - it is my job (I'm a software developer).

Trying out Confluence I quickly realized how bad it is. It is incredibly stupid and profoundly godawful. I hate their WYSIWYG editor. For whatever reason less techy people in my company still want to use this so called ""software"". You can't simply copy and paste to Confluence. Their markup is horrible. Their editor simply put is unusable. You can import new documents in markdown (nothing guarantees they still would be rendered as expected), but editing existing documents is still huge pain.  

So my question is: **How do you guys deal with Confluence? Is there any good solution that would let me create and edit wiki documents in Emacs?** I found couple of packages that meant to work with older version of Confluence (before they removed plain text option), but I need something that can work with their WYSIWYG editor.

*PS. I do also have similar problem with JIRA, it's less awful, yet it is still falls into category of ""shitcraft"". Sadly over the years of using Atlassian products I've developed strong distaste to them.*",35,49,How to deal with Confluence?
"Hi there,

I'm working on a mode/reader/manager for Pocket.  It's almost ready to be submitted to MELPA, but I'd like to get some third-party testing first.  If you're interested, please give it a try and let me know if you have any issues.

Here's a screenshot: [Imgur](https://i.imgur.com/6UTGX8A.png)

These dependencies are required from MELPA:

* dash
* kv
* ov
* s
* rainbow-identifiers
* org-web-tools

After installing those:

1.  Download `pocket-lib.el` and `pocket-reader.el` from https://github.com/alphapapa/pocket-lib.el and put them in your `load-path`.
2.  Eval `(require 'pocket-reader)`, or put that in your init file if you want.
3.  Run the command `pocket-reader`.
4.  This should prompt you to authorize for the Pocket API.  I've tried to streamline this, and it works okay for me, but this really needs to be tested by other people too.  Follow the directions in the minibuffer.  If you're not sure what to do during this process, run `pocket-reader` again.
5.  After authorizing, `pocket-reader` should load your last 50 items.

You can use these keys and commands in the `*pocket-reader*` buffer:

    ""RET"" pocket-reader-open-url
    ""TAB"" pocket-reader-pop-to-url
    ""a"" pocket-reader-toggle-archived
    ""b"" pocket-reader-open-in-external-browser
    ""c"" pocket-reader-copy-url
    ""e"" pocket-reader-excerpt
    ""E"" pocket-reader-excerpt-all
    ""u"" pocket-reader-toggle-archived
    ""*"" pocket-reader-toggle-favorite
    ""f"" pocket-reader-toggle-favorite
    ""s"" pocket-reader-search
    ""m"" pocket-reader-more
    ""l"" pocket-reader-limit
    ""tt"" pocket-reader-add-tags
    ""ta"" pocket-reader-add-tags
    ""tr"" pocket-reader-remove-tags
    ""ts"" pocket-reader-set-tags

When searching, you can use these keywords:

* `:all`  Show all items, both archived and unread.
* `:archive`  Show only archived items
* `:unread`  Show only unread items
* `:*`, `:favorite`  Show only favorite items
* `:NUMBER`  Show this many items at a time (add more by pressing `m` in the list)",11,48,ANN: pocket-reader (WIP)
,28,51,Make a mind map from your org-mode files with graphviz
,5,47,Pretty Magit - Integrating commit leaders
,3,48,Emacs is easy if you read code
,3,51,"GNU Emacs bug report statistics, by OS and architecture"
,28,46,"I wrote a brief blog about why I've fallen in love with Emacs the last few months, thought some here might be interested in a newbs experience"
"Howdy all - 

I've been meaning to get out of evernote for some time, and with their recent price increase and limitations on free accounts, seems like now is the time to do it.

I wrote up a really short gist that gets the process started. It's not perfect - for example, there are a lot of `#+BEGIN_HTML...#+END_HTML` blocks in the exported notes, but it at least gets everything out of evernote and into emacs org-mode. 

You can find the gist here, and I definitely welcome suggestions on how to improve it! https://gist.github.com/jabranham/31279f60d490b10d101652923706ba19

edit: added perl to remove all the BEGIN...END html stuff. I had a whole lot that just contained <div> which was annoying. 

edit2: I realized that I never said in the post (though I did in the title) that this converts to org-mode documents. ",3,50,Evernote to org mode
"Here's the latest in my video series:

http://cestlaz.github.io/posts/using-emacs-3-elisp/

Comments and suggestions are welcome. Since I plan to encourage my students to go through these videos, if you have any interesting insights or suggestions, I'd encourage you to leave them on the blog. 

Thanks!!!!
",10,47,How I like to think about Emacs
,5,49,How to be extremely efficient in Emacs
We all know about `helm` and `magit`. What are some lesser-known packages that you can't live without? ,34,51,What are some lesser-known packages that you love?
"Yeah, that's half the fun!",31,47,"""I swear you spend just as much time configuring Emacs as you do coding other stuff"""
,7,48,"emacs-refactor : A refactoring system for Emacs -- extract constant, extract function, extract to let, extract variable and many more..."
"* speed: part partial invalidation (css/javascript/json), better attribute parsing (25% speedup when loading the html5 spec file)
* responsiveness: region invalidation (web-mode-propertize) is now asynchronous, only triggered when needed (fontification, indentation)
* helpers: web-mode-tag-attributes-sort, web-mode-surround
* indentation: content inside code, pre, textarea elements is not indented any more ; (setq web-mode-pre-elements '()) if you don’t wan’t this feature
* indentation: sql indentation inside block strings
* html specs: single/double quoted attrs can now contains < and > characters
* visual: less flickering while editing an unclosed tag/attribute/block
* visual: you can enable inlays with (setq web-mode-enable-inlays t), at the moment it highlights LaTeX code in html content (e.g. \(\sqrt{3x-1}+(1+x)^2\))
* javascript: ES6 javascript template strings are now highlighted (var s = ""Hello ${ world }"";)
* visual: display column highlighting for current tag ((setq web-mode-enable-current-column-highlight t))
* vars: alists web-mode-extra-constants|keywords|types replace web-mode-extra-php-constants, web-mode-extra-php-keywords, etc.
* minor modes: auto-complete compatibility (thx Nate Eagleson)
* unit testing: see the directory unit-test and the function web-mode-test
* content-types: web-mode can edit scss and jsx files
* visual: element content and tag name fontification: see web-mode-enable-element-content|tag-fontification and web-mode-element-content|tag-faces)
* engines: compatibility with LSP (Lisp Server Page), Embedded JavaScript (EJS), Clip (Lisp)
* erb: compatibility with <% case|when %> control blocks
* asp: better tag compatibility
* grails: <r:style> css parts

available on [web-mode.org](http://web-mode.org)",1,47,web-mode.el v10 is released
,15,46,Emacs trunk feature frozen. Emacs 24.4 is on the way!
,9,48,"Emacs 24.2 released today! (Aug. 27, 2012)"
,12,49,Emacs Rocks! This time with live browser coding.
,0,49,Emacs Tips n Tricks for Everybody
,21,48,"Castlemacs: modern, minimalist Emacs setup tailored to macOS users"
,8,47,Much improved elisp backtraces!
"Org-mode is really inviting in terms of letting me write my thoughts down.

For a long time before using Org, my method was to list my tasks, then in a few lines describe what worked or didn't for later usage. I kept switching between apps and this information got lost, so I repeated similar tasks and patterns time and time again. My journaling process has the same issue. I used to write whole paragraphs, writing my thoughts down, and then struggle with a similar problem 7 months later, unable to find that one thing I talked about earlier (... ""but I know it's there! Where is it!"")

I have a couple of technical ideas toward the journal which involve capture and sparse trees etc. These are not important right now, that's kind of the easy part. The hard part is to figure out how to meta: how do I build my information about the information.

I know this is not exactly an Org or Emacs problem, but I'd bet many of you use Org for some kind of journaling, and even if not, you probably have good ways to find information later when you come and look for it. I would love to hear some suggestions.

To get started, here are some of my ideas so far:

\- use Categories as I capture info, for things like ""work"" or ""family"" or ""tech"". The problem with these is that they are way, way too broad (work and tech, for example, basically the same thing). I could narrow them down, but then I risk maybe changing them in the future, and if they change, again, I don't know what I'm looking for because I forgot how I used to call something.

\- use tags: for people and locations, this is a good idea. Beyond this, I will forget what I'm using tags for.

\- use a certain headline scheme that would tell me what I'm writing about, but again, too broad, not sure what that would be.

As you can see, I need some help in terms of directions. So... anyone?

\- - - - - - - - 

Got a lot of tips here! Impressive. 

I implemented my journal (and also my first useful capture template, to be honest) yesterday. First at home, and then on the computer at work (which TRAMPs back to my journal file back at home). 

Here's a look at my capture template:

 `(setq org-capture-templates`

 `'((""j"" ""Journal Entry"" entry (file+olp+datetree ""~/Documents/Journal/journal.org"")`

`""* %T %a\n%?"" :tree-type week)))`

Here's how it looks like in my agenda, which I use a lot: 

[journal is my org file, where at once time I tried \\""journaling\\"" category.](https://i.redd.it/dcegxxpdci911.png)

I like this idea. It changes how I think about how I journal now. Instead of having more of a daily ""diary"" where I write everything down, I now try to write in shorter bursts, usually two paragraphs at a time, that has to do with an event happening. No event = no journal entry (even though I could do one, you can see from the first). 

\- - - ",54,48,How do you sort your info so you can find it later?
,5,47,Using Emacs Episode 50 - presentations
,10,49,GitHub - plexus/chemacs: Emacs profile switcher
"Hi, why do some of you prefer emacs to do everything, WM, Music Player, Note Taking, Email Client.

Why not just use a separate software made especially for that?",58,47,Why Emacs Instead of Other Software
,30,48,Literate Emacs Config in Org-Mode
,0,48,Emacs JIT Calling Convention - further adventures in Emacs JIT
,7,48,Latest Humble book bundle includes Realm of Racket (and Land of Lisp)!
,13,47,"Command for undoing a region through its Git history, rather Emacs edit history"
What's the single feature you miss most from other editors?,160,50,What feature do you miss most from other editors?
"Hello everybody,

I just wanted to tell you all about how happily surprised I am by Emacs and the Emacs community. I have been a Vim user for years, and while I tried Emacs for a while two years ago, I only came back to it and really began learning it four weeks ago.

And I'm really happy I did! I've been blown away by what's possible with Emacs Lisp, and how easy it has been to learn. Maybe it's just me, but I've felt that configuring Emacs from scratch hasn't been nearly as hard as some describe it.

I'm also glad to see that the community here and on the Emacs StackExchange, while smaller than /r/vim, is really friendly and helpful. Thank you!

P.S. Speaking of communities, are there any other good, active Emacs communities that you enjoy spending time in? I've been thinking about maybe checking out the IRC channel.",39,48,My first impressions with Emacs
,24,51,can we do this in emacs?
,56,51,Why I switched from Vim to Emacs
,12,48,Learning GNU emacs in the humble book bundle
"I am a new bee to emacs-lisp,and I wrote a emacs plugin whose days.Thanks to github,I found `f` and `s` which help me a lot.I also found `names` but meet some problem with it.Then I just give it up and use `nameless` to hide the *really long* prefix in my emacs.


And I use `ert` to write unit test to test it in batch mode(on travis-ci).What surprised me is there is even a `Emacs Version Manager`(https://github.com/rejeep/evm) .


Those library and plugins changed the experience of writing emacs-lisp a lot.


So,my question is:What's the best practice to write emacs-lisp at 2016？It's there any new post about it?",26,48,What's the best practice to write emacs-lisp(at 2016)?
,22,48,10 emacs productivity plugins
"    Face colors suitable for red/green color-blind users.

Thank you to whomever did that theme and made it one of the defaults.",2,48,Trying emacs found this:
,2,50,Emacs standing alone on a Linux Kernel
"I haven't heard anything lately about [guilemacs](http://www.emacswiki.org/emacs/GuileEmacs).  It looks like bpt's git repo hasn't been updated since August.

I was optimistically hoping that guilemacs could be merged into Emacs trunk some day.  I was looking forward to among other things concurrency and FFI support.  Has anyone heard anything lately?  Google search shows nothing.",23,46,Is guilemacs still alive?
"I'm the author of Powerline and EasyMotion for vim. I've recently grown very tired of vim's endless quirks, so I'm looking into migrating to emacs, which I think may be a better fit for a tinkerer who loves to customize every single aspect of his development environment.

I've used emacs for various coding tasks the last couple of days and I've gotten quite comfortable editing code in emacs, although the lack of modality requires quite a different mindset when coding. I have a couple of questions regarding plugin/package development for emacs and the capabilities for drawing stuff in the editor window (I want EM/Powerline to be primarily for the GUI version):

1. Is it possible to draw arbitrary graphics like lines/boxes in any buffer? For EasyMotion the jump labels should ideally be on a separate layer and/or in another font instead of replacing text in the window like with the current vim version. I've not been able to find any decent documentation on the subject, so it would be nice if anyone could point me in the right direction.
2. I understand that it's possible to draw graphics in the modeline. I can't find any docs on this either, so any help here would be great.
3. I'm completely new to elisp and lisp in general, but I'd love to learn it (it's also kinda required if I'm going to write plugins for emacs). Are there any tutorials specifically dealing with plugin development for recent versions of emacs?
4. It would be great if anyone interested would join me in developing Powerline and EasyMotion for emacs. Working on these plugins alone has been quite a challenge, and thankfully I've gotten a lot of help on the Python version of Powerline. The emacs plugins would need to be written completely from scratch in elisp (ideally), so any help would be awesome.
5. Lastly, I'd like suggestions on what to name these plugins. They'll need some new names to distinguish them from their vim counterparts, so let me know if you have any cool naming suggestions!

Any answers and ideas/suggestions for these plugins are greatly appreciated. Thanks!",34,47,vim plugin developer migrating to Emacs - need help rewriting Powerline and EasyMotion (ace-jump) in elisp
,4,49,Let's just use Emacs
"After using `ediff` to resolve merge conflicts for a long time, I came upon /u/kaushalmodi's `smerge-mode` hydra.  Then I [added a `ZZ` binding](https://github.com/alphapapa/unpackaged.el#hydra) to it to save and bury the current buffer.  Now it's very fast and easy to resolve merge conflicts (at least, simple ones) with Magit and `smerge-mode`.

Here are a couple of screencasts.  Compare [using ediff](https://i.imgur.com/jIcezQv.gif) (aka ""watch me struggle to use `ediff` for a simple conflict"") with [using this smerge-mode hydra](https://i.imgur.com/HCQRDZV.gif).

Help yourself!  https://github.com/alphapapa/unpackaged.el#hydra",21,48,The fastest merge-conflict resolver in Emacsland
,17,47,jwz: now-you-have-two-problems.el
"That might not be a 100% emacs question. But recently I've come across this talk posted here: https://www.youtube.com/watch?v=Bpmkeh4D98s

Currently i'm storing thoughts and study notes and images on Google Keep  because it ""just works"". But I'm curious if any of you guys follow a method to organize a ""personal wiki"" to future reference about books and papers read and all kinds of knowledge, using org-mode or not. Or even following the method presented on this talk I linked, although it costs 500 bucks to enroll on the 'build a second brain' course...

It seems quite useful to me, as I've been trying to read more, but I don't know how much of that knowledge will really be there for future reference on my mind.

Thanks!",58,50,Do you guys have a personal wiki? (using org-mode or not)
,35,49,libvterm
"I started using emacs a few days ago. This is not my first attempt with emacs, but finally I spent the necessary time, at least to understand how it works. I am not a programmer, but I want to use it for my job as a teacher, exploiting as much as I can the org-mode and in a future LaTeX. I am already learning how to use it as a spreadsheet and to make slides. I hope in the future to be able to contribute something in this subreddit.

https://i.redd.it/qnhdrfu1b2o11.png",19,48,New at emacs
"Another week, another trick. This week, I will present you my way to handle my spelling  mistakes with GNU Emacs, which may be the nightmare for some. Of course, I'll talk about `abbrev-mode` and `flyspell`. For those who don't know these modes yet, `abbrev-mode` allows you to correct your words on the fly according to a list of misspelled words and `flyspell` enables spell checking on-the-fly in GNU Emacs. Basically this is what it looks like:

[Overview of flyspell](https://i.redd.it/9dsog6r9es411.png)

Roughly, `abbrev-mode` can be configured as below. This code will allow you to globally activate `abbrev-mode` and load your abbreviations file silently:

    (use-package abbrev
      :defer 1
      :ensure nil
      :custom
      (abbrev-file-name (expand-file-name "".abbrev_defs"" user-emacs-directory))
      (abbrev-mode 1)
      :config
      (if (file-exists-p abbrev-file-name)
          (quietly-read-abbrev-file)))

**NOTE:** you can already find a well filled `.abbrev_defs` file [here](https://github.com/rememberYou/.emacs.d/blob/2941a8021928689a5c47d1c2ff8c5d721491b517/.abbrev_defs).

Thus, if you have this line in your abbreviations file:

    (""owrk"" ""work"" nil 0)

When you will write owrk, this word will automatically be replaced by *work*.  Great, isn't it?

Likewise, it is possible to add and edit your abbreviations as you wish. Despite this, it is difficult to correct your mistakes based only on `abbrev-mode`, which is why `flyspell` comes into play.

Similarly, `flyspell` configuration is simple:

    (use-package flyspell
      :defer 1
      :custom
      (flyspell-abbrev-p t)
      (flyspell-issue-message-flag nil)
      (flyspell-issue-welcome-flag nil)
      (flyspell-mode 1))
    
    (use-package flyspell-correct-ivy
      :after flyspell
      :bind (:map flyspell-mode-map
            (""C-;"" . flyspell-correct-word-generic))
      :custom (flyspell-correct-interface 'flyspell-correct-ivy))

**UPDATE:** I updated the code and the image above with the useful `flyspell-abbrev-p` variable, which allows to automatically save changes made by `flyspell` in your `abbrev_defs` file.

The above code allows you to globally activate `flyspell` so that it pushes you to highlight misspelled words and easily correct them with the `C-;` keyboard shortcut.

Be careful that I use `ivy` to use the correction interface, but you can also use `helm` with `flyspell-correct-helm`, or use a popup window with `flyspell-correction-popup`. However, the configuration remains the same.

For `hydra` fans here is the menu I use:

    (defhydra hydra-spelling (:color blue)
      ""
      ^
      ^Spelling^          ^Errors^            ^Checker^
      ^────────^──────────^──────^────────────^───────^───────
      _q_ quit            _<_ previous        _c_ correction
      ^^                  _>_ next            _d_ dictionary
      ^^                  _f_ check           _m_ mode
      ^^                  ^^                  ^^
      ""
      (""q"" nil)
      (""<"" flyspell-correct-previous :color pink)
      ("">"" flyspell-correct-next :color pink)
      (""c"" ispell)
      (""d"" ispell-change-dictionary)
      (""f"" flyspell-buffer)
      (""m"" flyspell-mode))

Here's what you'll get:

[Overview of hydra](https://i.redd.it/bxzw4pjfnp411.png)

This makes it easy to change dictionaries, correct mistakes and so on.

I'm not going too deep into this post, because you can do a lot of things with them. Besides, I'm curious to know your tricks in the comments for these modes. Also, one solution that would interest me with `abbrev-mode` is to be able to use other abbreviation files depending on the language. For instance, I sometimes have to write documents in French and I couldn't find a global abbreviations file on the web, like I did with English. Moreover, with the machine learning, I think we could create something more useful where these abbreviation files could create itself from our errors.

For the curious, you can find my config on [GitHub](https://github.com/rememberYou/.emacs.d).

I wish you a good evening or a good day, Emacs friend!",24,47,TIP: How to better manage your spelling mistakes
,21,48,New package-quickstart feature in emacs 27
,33,49,ranger mode for emacs
I've got into emacs to write in lisp. It seems from other posts that people use it for far more than writing code. I'm learning to use org mode for notes in classes but wanted to see what else people have been doing with it? If so how are you doing it?,69,50,What has emacs replaced in your life?
,7,47,Symbolics Space Cadet keyboard review (Honeywell Hall effect 4B3E)
,15,48,Fish-like autosuggestions in eshell
"I tend to alternate between Source Code Pro and Input Mono, but have recently started using Hack, which I am liking a lot.

What's everyone else using out there? ",81,46,What are your preferred fonts in Emacs?
,28,44,I use M-x rgrep all the time when helping me navigate and understand a new large code base. Are there any other commands that are useful?
,92,45,Whats the most useful plugin you couldn't live without?
"I've got this idea for an Emacs minor mode that brings elements of RPGs into every day Emacs use. This is a rough idea, and I don't have the skill or time to try to write this myself, so I thought I'd throw it out here to see what you all think.

With this mode, you would have a point score and a persistent RPG style level. As you use Emacs for normal things, your key strokes will slowly increase your point score, and you'll level-up when your score passes certain thresholds. So far this is a bit boring, but consider the following additions

* Bonus points for using a command for the first time, with bigger bonuses for using more obscure commands

* Bonus points for using a keybinding instead of execute-extended-command, maybe with bigger bonuses for longer and/or more obscure keybindings

* Bonus points for doing things the ""right"" way. We won't all agree on exactly what that is, but for example you might get bonus points for using isearch to move somewhere in the visible part of the buffer, or using C-n, C-p etc instead of arrow keys

* You might have a health meter and receive damage for doing things the ""wrong"" way, like using the mouse for anything that can be done with the keyboard, moving a long distance using just forward-char, backward-char etc. Maybe you lose a level if your health gets too low? Or maybe if you die, your .emacs.d is deleted!

* Bonus points for the length of time or number of keystrokes without leaving Emacs (i.e. changing focus to another app)

* Bonus points for using a major or minor mode for the first time

* Bonus points for doing more than text editing in Emacs (email, RSS, eww, pdf-tools etc)

* Bonus points for installing packages, and maybe for more advanced configuration of your init file (use-package, custom code&#x2026;)

* A badge in the mode line showing your level, points, health etc

* An ascii-art avatar with character customisation and loot, with extra customisations getting unlocked at higher levels. This should be presented on a nice screen that we can share to brag about our Emacs prowess

* Loot drops randomly coming from running commands, with a higher probability and rarer loot associated with more obscure/advanced commands

* Boss battles could be vimgolf style challenges that have to be completed in a minimum number of keystrokes. A new one could be unlocked with each new level and give a unique item of loot when defeated.
",18,49,An idea :: Emacs RPG mode
,42,47,Emacs-Bootstrap: Your on-the-fly Emacs development environment!
"I've been using Emacs for about two years and decided to try Spacemacs. I've heard good things and loaded it up once or twice before but never really played around with it. I fully committed for two weeks. Here's a list of things I really liked, things I wasn't a fan of, a short reasoning for why I decided to stay with my own config, and some hopes I have:

Great things: 

* The ability to roll back package updates easily 

* Pre-configured layers that can auto-install if you open a ruby (or whatever) file 

* Really good defaults (whoever came up with Emacs' default scrolling needs a stern talking to in my book)

* I really like the *idea* of the mnemonic keybindings. I ended up disliking how Spacemacs does it, more below

Not so great: 

* Even though I used Emacs style keybindings, evil mode was still loaded and occasionally I was left in ""normal mode"" after executing a command 

* The quality of layers varies *dramatically*. Some were awesome, others barely worked. I never got org-projectile to work at all from the org layer

* Since it's originally based on Evil/Vim, all the keybindings felt one step too far. For example, everything to do with buffer manipulation is under SPC b in evil mode. But if you use Emacs bindings, SPC becomes M-m, so it's M-m b. But if you're rebinding everything anyway, why not eliminate the M-m part and just make it M-b? 

* Inconsistency of bindings: When invoking org-capture, you can refile with C-c C-w (as in Emacs default). But that does NOT work in a normal org file (it brings up some eyebrowse functions instead). Instead, you must use M-m a o R for ""leader key"" ""applications"" ""org"" ""refile"". While that's easy to remember, the fact that it's different in while org-capturing vs org-moding normally is obnoxious. This kind of thing happens fairly frequently. 

Sticking with my own config: 

I decided to stay with my own config for a few reasons, much of which boils down to the fact 

A) I don't get dumped into evil mode nonsense randomly 

B) I have more control & it's easier to figure out what's going wrong (with Spacemacs I couldn't figure out if it was my problem, Spacemac's problem, or the package's problem).  

C) Can define my own keybindings easily (in Spacemacs it's sometimes hard to understand when you need global-set-key vs emacs-state or whatever). 

Hopes I have from Spacemacs for the Emacs community: 

* I don't pay attention to the Emacs mailing list, so I have no idea if this is happening, but I really hope that Spacemacs is submitting stuff upstream. The ability to roll back package updates is tremendously helpful when a package breaks *right* when you need it

* Similarly, I wish that Spacemacs was a bit more modular. It would be nice, for example, to be able to load Spacemacs's scrolling settings (or parens settings or maybe even whole layers) without needing to install the whole beast. I'm not sure if packages via MELPA are the best route here; maybe Spacemacs could be broken into smaller chunks and hosted separately? 

Anyway, those are some of my shorter impressions. Hopefully you find it interesting/useful. And I'm happy to answer questions. 

EDIT: formatting

EDIT 2: I suck at formatting",31,49,I just tried spacemacs for two weeks. Here are my impressions.
"I made this [pull request](https://github.com/tumashu/org-webpage/pull/8) into org-webpage, it will be accepted soon if everything is in order, God willing :).

This basically makes org-webpage use [`rclone`](http://rclone.org/) to upload the generated content. Which means you can upload your blog or website to Google Drive, Amazon S3, Openstack Swift, Rackspace cloud files, Memset Memstore, Dropbox, Google Cloud Storage, Amazon Drive, Hubic, Backblaze B2, Yandex Disk and even sync different directories in your local storage.

I also took some care improving the UX of this package, because sometimes you may screw the `:remote` option, now org-webpage checks if the `car` of `:remote` is a valid symbol, either `'git` or `'rclone` and will issue a helpful message to the user if he is adding other than those two symbols.

If you think there is something that can be improved on my pull request, please, fork my repo and then do a pull request! :D

Thank you!

**EDIT:** Uh, my pull request was accepted 3 minutes ago! That was fast. This may be my first contribution that hits Melpa since my first package, [font-man](https://np.reddit.com/r/emacs/comments/4raxun/fontmanmode_a_minor_global_mode_that_will_scale/), hasn't been accepted yet, lol.",0,50,org-webpage soon will have support to a bunch of remote storage services like Google Drive and Rackspace Cloud Files!
"Yesterday Microsoft released the Anniversary Update for Windows 10, which includes the possibility to use Ubuntu Bash natively. The first thing I tried was installing emacs and I noticed it installs version 24.3.1. I'm not sure if I'm in the right subreddit for this, but it might be a good start.

Is there any way to install the latest version or even the 25rc1 through this? 

Updating and upgrading of packages didn't help.

edit: I'm a noob in programming and only use it for LaTeX and org.",40,47,Emacs on Windows 10 Anniversary Update
"So I've been trying to figure out the best way to go about autocompletion in emacs. I switched from vim 6 months ago, and I've been loving emacs ever since. However the one thing I've been missing in emacs that I loved in my vim setup is the autocompletion. IMO YouCompleteMe is one of the best autocompletion experiences there is, and I've been struggling to set up something comparable in emacs. (I should note that I'm primarily concerned with Python and C/C++.) I've tried quite a few things, and what I've learned is that it seems like company mode is the way to go as opposed to autocomplete for a completion framework due to company mode's modularity, but when trying to figure out the best backends to use I've been coming up short. For the C-family languages, I've found the default clang backend to be quite slow, and the semantic completer is a bit better but still doesn't feel as responsive as the experience I had in vim with YCM. It seems like this may just be a fundamental limitation with any backend implemented in elisp. I've been looking into irony mode, and it seems promising due to using an external damon process implemented in C++, but at this point it seems like I should just go through the involved processing of setting up emacs-ycmd to regain all the YCM awesomeness. Along this journey for better autocompletion, I realized that the two reasons why none of the autocompletion solutions I've found for emacs can compare to YCM are 1) the fuzzy matching algorithm and 2) the intelligent ranking algorithm. It seems these two features are what worked together to make YCM feel like it was reading my mind whenever it offered completion candidates. From this I realized that no matter how good a backend you had for company, it really would be limited by the frontend candidate transformation function as otherwise the ranking of candidates given by company will often put the desired completion far away, making the completions less useful. So even though emacs-ycmd will give me the fuzzy match candidates, it doesn't seem like it can give me the intelligent sorting.

Give all this, I was wondering what solutions people have found in their own setups for autocompletion? Perhaps there is some package I've overlooked which offers completion as good as YCM? Or maybe I'm just mistaken about something I've said here?

TL;DR Emacs is great, except for autocompletion where I which there was something as good as the YouCompleteMe vim package. Tell me your thoughts on this.",45,49,Autocompletion in Emacs: what to do?
,8,44,"Today I wrote my first package. And yes, it's a fairly simple package, but I'm damn proud of it!"
,20,43,"ace-jump-mode is Dead, Long Live Avy"
"Changelog

* indentation: you can force attribute indentation inside html tag with web-mode-attr-indent-offset (by default, attributes are aligned on the first attr)
* indentation: lineup (function arguments, cascaded calls, string concatenations) can be disabled with (add-to-list 'web-mode-indentation-params '(""lineup-args|calls|concats"" . nil))
* indentation: better indentation for multi line tag attribute values
* indentation: avoid extra indentation due to control blocks with (setq web-mode-enable-control-block-indentation nil)
* indentation: web-mode better handles indent-tabs-mode (when this minor mode is detected, web-mode-use-tabs is called)
* indentation: default indent offsets inherit the var 'standard-indent (when it is bound)
* comments: for languages that accept alternative syntax for comments, you can use the var web-mode-comment-formats (e.g. (add-to-list 'web-mode-comment-formats '(""php"" . ""//"")))
* var: web-mode-enable-auto-quoting to add double quotes after a = inside a tag
* visual: less flickering while editing unclosed php block
* feature: web-mode-enable-engine-detection : you can put a line like -*- engine: ENGINE_NAME -*- in a comment at the beginning of the template
* expanders: typing d/s/ will expand to <div><span>|</span></div> (see web-mode-expanders). You can enable this feature with (setq web-mode-enable-auto-expanding t)
* engines: compatibility with elixir (Erlang), thymeleaf, cl-emb (Lisp, thx Matthew Carter), heist
* mako: compatibility with self-closed blocks (e.g. <%inherit file=""base.html""/>)
* erb: compatibility with <%= javascript_tag do %> js blocks
* ejs: better compatibility
* freemarker: many fixes and optimizations
* helpers: web-mode-element-insert, web-mode-attribute-insert, web-mode-attribute-kill, web-mode-enable|disable (to enable/disable features like column highlighting, tag highlighting, space visualisation, etc.)
* javascript: backtick strings compatibility
* html: more html entities

Any donation fill be greatly appreciated : [web-mode.org](http://web-mode.org)",10,47,web-mode.el v11 is released
,17,44,Guile Emacs build instructions
,25,43,An Emacs Demo
,8,47,"A colorful eye-candy theme for Emacser. Moe, moe, kyun!"
,9,48,Disassemble C/C++ code under cursor in Emacs with disaster.el
,5,47,Impatient-mode -- see your HTML rendered as you type it
,8,45,Tips and tricks for EmacsLisp programming - consider Elisp as a practical language and follow some of this advice.
,4,49,Emacs standing alone on a Linux Kernel
,3,45,ialign - a visual version of align-regexp
,6,45,Notes on Org-noter
"What I learned:

If a web page contains navigation 'link' elements with 'rel' attributes for ""next"", ""prev"", ""up"", or ""start"" (plus a few supported synonyms), then you can navigate in `eww` by typing `n`ext, `p`revious, `u`p, `t`op; just like you do in the `info` reader.  So far, so nice.

The eye-opener was when I used isearch in a page, ran out of matches in the buffer, typed `C-s` again to wrap around, and unexpectedly found myself looking at *the next page containing a match, in that sequence of web pages*.

i.e. This is like isearch in `info` -- but working on web pages.  eww keeps following those ""next"" links until it finds another page with a match for the search term.  (Internally this is using misearch.el, so the amount of code needed in eww turns out to be absolutely minimal. Very cool.)

For locally-hosted HTML documentation in particular (which eww is perfect for, and for which this behaviour will be fast), this feature is absolutely superb.

If you're using eww for documentation, and the HTML doesn't contain navigation 'link' elements, this is reason enough to ask the maintainers to add them.  (And if you're *not* using eww for this, it's probably reason enough to start.)",12,44,eww's awesome isearch support just blew my mind
,10,46,The Emacs Widget Library
"This will be a fun exercise for those of you who <3 terminals.

**WHAT THIS IS:**

Emacs 26 took patches to support 24-bit color.   Most of you on MacOS/GNU Linux will have no problem updating termcap so Emacs will detect the term and send the requisite codes.   May be a bit more of a challenge if your emacs host is an older flavor of Windows (non-Windows 10 anyway).

**Checking your work:**  M-x list-colors-display     

When you page down you should see the red/blue/brown/orange and green pre-defined gradient colors like you see in the screenshot.

**+20pts**:  You can get emacs -nw to display 24-bit color on your local terminal

**+35pts**:  You got it working over emacsclient (connected to an emacs daemon)

**+60pts**: You got it working over ssh, running emacsclient -nw -c, to a emacs daemon running on the server.

**+175pts:**  You have emacs, connected via SSH, running tmux, running emacsclient -nw -c, connected to an instance of emacs running on the server.

**+GOD LEVEL**:  You hit all the previous achievements and also have it working on every major desktop OS (screenshot below)

https://i.redd.it/twrsv166c5a11.png",35,48,"The ""24-bit Emacs+Tmux+SSH Terminal Color Challenge"""
"I'm a long-time (20-something years) emacs user. For almost all of that time, I've used Linux or OS X as my desktop operating system.

Very recently, I switched my workstation to Windows 10 (it's a long story). I have installed Emacs 26.1 from the GNU website, but it's taken some getting used to. In fact, some of my settings have evolved over the years to be fairly Unix-centric. I've taken steps to make them more platform-neutral, but it's awkward feeling. Moreover, it seems that Emacs does not want to find files that are on a mounted network share (e.g., my `E:` drive is a mapped network drive, and `dired` refuses to find anything in `e:/`)

I'd love to hear from other Windows users who are running Emacs and learn what your secrets are. What hurdles did you face? Did you arrive at a happy setup? Any tips?",50,47,Best practices for Emacs on Microsoft Windows?
,13,44,prescient.el: Simple but effective sorting and filtering for Emacs.
,0,47,Emacs #2: Introducing org-mode | changelog.complete.org
,7,46,"Emacs -as a terminal- perform better than urxvt, GNOME Terminal, Xfce Terminal andTerminator"
,17,44,How doom emacs startup so fast
,38,46,Making Emacs work like my Neovim setup
"Fountain Mode is a major mode for screenwriting in Fountain markup: https://github.com/rnkn/fountain-mode

I’m planning to tag release 2.4.0 soon, which is a large release with over 260 commits. I’d like to put it out to the community for testing before calling it “stable” so the release notes below represent the master branch, available on [MELPA](https://melpa.org/#/fountain-mode).

Feel free to report issues either here or on GitHub. Obviously if things are broken, but I’m also interested in if things are just confusing...

## New Features

- The biggest user-facing change is probably the addition of `fountain-dwim` on `TAB`:
  - If point is at a scene heading or section heading, or if prefixed with ARG (`C-u TAB`) call `fountain-outline-cycle`.
  - If point is at an directive to an included file, call `fountain-include-find-file`.
  - Otherwise, upcase the current line and active auto-upcasing. This highlights the current line with face `fountain-auto-upcase-highlight` and will continue to upcase inserted characters until the command is called again (TAB) or point moves to a different line (either by inserting a new line or point motion). This allows a flexible style of entering character names. You may press TAB before, during or after typing the name to get the same result.
- Another big feature is that Fountain Mode can now give an approximate page count:
  - `fountain-count-pages` on `C-c C-x p` will print the current page of total pages in the echo area, e.g. “Page 16 of 78”
  - Option `fountain-pages-show-in-mode-line` (nil by default) can be set to show the current page of total (e.g. “[16/78]”) either with automatic or manual update. Automatic update uses an idle timer that can be set with `fountain-pages-count-delay`.
- Export to plain text, creating an output like that of scripts on www.imsdb.com
- Added [Mountain](https://github.com/mjrusso/mountain)-style include workflow: files can be included with `{{ include: FILENAME.fountain }}` where FILENAME is relative to the current file
- Display scene numbers in the right margin. (Requires a margin width greater than 0, e.g. with [Olivetti](https://github.com/rnkn/olivetti).)
- Added teleplay format with its own aligning and exporting settings.
- A customisable title template for each export format.
- Command `fountain-insert-page-break` (`C-c C-x RET`) will calculate appropriate position before point to break page (e.g. never separating character names from dialogue, or breaking sentences).
- Section and scene headings in HTML output are now anchored and hyperlinked allowing easy bookmarking.
- New faces inherited from more appropriate Font Lock faces.

## Improvements

- Menu organisation has been greatly improved.
- When `fountain-auto-upcase-scene-headings` is non-nil, editing a scene heading will overlay the line with a highlight.
- Custom options that change buffer display somehow (e.g. alter Font Lock keywords) now have set functions to automatically apply their updates, without having to call `fountain-mode` again.
- `fountain-goto-scene` and `fountain-goto-page` now call `push-mark` before relocating point, so that `pop-mark` will return you to where you were.
- Toggling including a title page works for all export formats.
- `fountain-continued-dialog-refresh` is now fast enough to work on the whole buffer, and if you’ve changed `fountain-continued-dialog-string` it will attempt to remove previous string first.
- Exporting to Final Draft will now recognise when an element starts a new page (i.e. page breaks).
- Emphasis delimiters are not fontified on minimum decoration level.
- Keymap now remaps existing bindings to analogous functions (e.g. `forward-list` to `fountain-forward-scene`) to suit users who have already have their own bindings for these.
- Incredible parsing speed improvements by using `comment-use-syntax`.
- A rewritten parsing and export model.
- Appropriately naming private variables (e.g. `fountain--outline-cycle`).

## Bug Fixes

- Removed some Font Lock multiline calculations that may have slowed things down.
- Fixed some scene heading font issues.
- Always check for CR as well as LF.
- “Go to” is two words.
- Many other small fixes.

And finally, I’ve added my Bitcoin Cash address to the README for anyone who wants to leave a tip 😎

----

Edit: Now released: https://github.com/rnkn/fountain-mode/releases/latest",8,46,Please test Fountain Mode 2.4.0 prerelease
,6,46,Org Edna - Adding extensible dependencies and actions to Org mode tasks
,18,46,Icons for Emacs
"So I've been reading lamentations along the lines of ""how come all the really great configurations like Spacemacs are for vimmers?""

So here's one that I've been looking at for a few days now and which seems to be a huge step up from vanilla emacs: 

https://github.com/bodil/ohai-emacs

It has a very nice structure and includes heaps of things I've been meaning to try out for a while. I should confess I've been using emacs now for over 30 years (Gosling, Micro, X and then GNU emacs) and in all that time never really used much more than a simple .emacs with some nice keybindings. It has been a constant friend and wonderful tool.

But since reading /r/emacs, I've been wanting to try out some of the uber cool stuff out there - ohai-emacs has loads of good stuff and is practically ready to run - just drop it into a replacement .emacs.d and you're away!

",18,43,spacemacs jealousy
,13,44,"Trying to create a distraction-free environment in Emacs, similar to Ulysses (macOS). What do you think?"
,13,44,The Design of the Emacs Logo
"I'm trying to work out how to have a simple dashboard that opens when I start emacs and can also be accessed from a global keybinding. It would probably include the following windows open:

1. A mu4e search for recent emails
2. My org-mode inbox file
3. My main working org-mode agenda view

I'd also want a consistent arrangement, e.g. 1 & 2 stacked on the left, 3 on the right. Because these aren't all existing files but buffers that need to be generated/updated as necessary, I can't work out a consistent way of setting them up and and arranging them in a consistent manner - `window-configuration-to-register` doesn't really do what I'm after.

Any ideas?",16,46,"How can I set up a simple ""dashboard"" in emacs?"
,36,45,Ivy completion at point in an overlay
"One year later after this post [Reddit: Guile/Emacs status - 2015](https://www.reddit.com/r/emacs/comments/3gpb7u/guile_emacs_status/) I want to ask status of this project again. It's potential is really huge, and it's sad it progressing slowly. So far I've found only 1 recent mention of it in [Guile & Emacs chat at emacs hackathon/bug-crush SF](https://lists.gnu.org/archive/html/guile-devel/2016-03/msg00028.html)

And no commits for more than a year in this repo http://git.hcoop.net/?p=bpt/emacs.git",49,46,Guile/Emacs status?
"Hey everybody. I just started a new series of videos and blog posts on using Emacs. I'm hoping to fill what my students found to be a void between just starting out (post tutorial) and really using Emacs well.

So far I've put up two posts and one video. Another post and video will go up tonight or tomorrow and then I figure probably once a week or so.

I'd love some feedback as I start this project.

Here's the main page: http://cestlaz.github.io/stories/emacs/

Post 1: http://cestlaz.github.io/posts/using-emacs-introduction/

and Post 2: http://cestlaz.github.io/posts/using-emacs-1-setup/

Enjoy and thanks.

Mike
",17,46,New series of Emacs videos / posts
"The main new feature of this version is a better compatibility with *semilicon* code (JavaScript).

* jsx: better indentation for expressions
* indentation: `web-mode-indentation-params`: new option `case-extra-offset`
* indentation: `web-mode-indentless-attributes` (by default: `onclick`, `onmouseover`, `onmouseout`, `onsubmit`) and `web-mode-indentless-elements` (by default: `<code>`, `<pre>`, `<textarea>`)
* indentation: improved behavior for code without semilicon
* javascript: es6 arrow function fontification
* html: single quote auto-quoting (for html attr values)
* html: conditional comments (IE) indentation
* xml: deal with with namespaced tags (e.g. `<xs:element>`)
* tabs: `web-mode-use-tabs` must now be called manually
* new engines: riot, marko
* template-toolkit: new control blocks
* fontitication: new face for namespaced tags (e.g. `<c:forEach>`): `web-mode-html-tag-prefixed-face`
* comment: better behavior when commenting a multiline region (respect indentation)

More infos on [web-mode.org](http://web-mode.org)
",8,46,web-mode.el v14 is released
,4,47,Dotfile management and documentation with Org-Mode
"John Wiegley, on /u/gopar's emacs.el podcast, mentioned an interesting new list, emacs-tangents, hosted by *the* /u/sachac.

As of Nov 2015, she began linked and detailed monthly recaps of the happenings of the emacs community. 
From the podcast, the hope seems to be to create a safe and productive environment for discussing the emacs community at large outside of the more ""all-business"" emacs-devel mailing list.

You can see the archives here:
https://lists.gnu.org/archive/html/emacs-tangents/

And subscribe here:
https://lists.gnu.org/mailman/listinfo/emacs-tangents",10,46,emacs-tangents - new email list where Sacha Chua does a monthly recap of Emacs community happenings
"Lately I wanted to read and write my mails inside Emacs, but configuring Gnus for Gmail was somewhat cumbersome. So I went looking for another mail client, and I noticed many packages exist for reading mail in Emacs. Even out of the box Emacs comes with several competing solutions. As far it seems Mutt, Mu4e, Gnus and notmuch are most popular for handling mails.


Then I was wondering what the main differences are between these mail clients. Which mail client do you use, and why not a another one? I'm curious about your reasons to use them.",34,49,"Which email client (mu4e, Mutt, notmuch, Gnus) do you use inside Emacs, and why?"
,6,47,Light Table in Emacs? why aren't we funding this?
"I've been using Emacs for a very long time now, and while hunting around in `replace.el` I found map-query-regexp-replace ... 

http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/replace.el#n477

Not surprising that I didn't know about it, since it's not documented anywhere!*

^(*aside from in the codebase.)

Edit: Here's a screencast ... https://vid.me/ZIiN",21,45,"TIL After so long using emacs, map-query-regexp-replace"
"[Homepage](https://github.com/wasamasa/eyebrowse)

[Demo in Spacemacs](http://s22.postimg.org/aqd1em8xd/spacemacs_eyebrowse_demo.gif)

- Demo begins when you see `START DEMO` in the minibuffer. Initially I'm in workspace `[1]` and the file `.spacemacs` was opened.

- Then, I created 2nd workspace with initial buffer is Spacemacs home buffer; you will also see `[2]` highlighted in the minibuffer to indicate you are in 2nd workspace. After that, I opened the `~/emacs.d` directory in Dired.

- Then, I created 3rd workspace and similarly you see Spacemacs home buffer and `[3]` highlighted in the minibuffer. After that, I opened `~/nand2tetris/projects/` directory.

- I switched back and forth between workspaces for you to see the window layout of each workspace. Finally I close all but first workspace and ended up in `.spacemacs` file again.

The nice thing with `eyebrowse` is that it remembers the last window layout I was using in a workspace, so I never have to worry about saving and restoring window configuration explicitly once a workspace is created. The difference between `eyebrowse` and `perspective` is that `eyebrowse` doesn't try to isolate buffers into different groups like `perspective`.

**NOTE**: currently `eyebrowse` integration only exists in `develop` branch in Spacemacas and will be available in next release. So if Spacemacs users want to try it out, you will have to switch to `develop` branch.",2,45,Eyebrowse - i3 window manager inside Emacs
,22,45,"Eshell in Emacs 25 will have a working ""clear"" command."
,14,43,Emacs 25.1 on Windows will support daemon mode
,27,44,"A week with emacs : this guy shows how he uses emacs to keep track of his expenses and time, writing letters, checking his e-mails, keeping an agenda etc."
"I've been using emacs for a few weeks since switching from vim. I like a lot of the new features I'm getting and it's extensibility. I like that the plugins aren't scripts that I have to wait for, but I hate that it doesn't respect my split windows. I set up my windows with buffers exactly where I want them, and then emacs decides to put something else there. I feel like I'm constantly fighting it. Is there any way to stop it from opening new buffers (like the repl) and error messages on top of and taking over existing split windows?",11,45,How do I stop emacs from taking over my split windows with error messages and other new buffers?
,31,48,10 Specific Ways to Improve Your Productivity With Emacs with increased efficiency ( for intermediate to pro users)
,4,47,"With all thats going on in the news, lets not forget M-x spook!"
"Show CSS is a minor mode for emacs.

With showcss-mode turned on, as you navigate around an HTML file the
matching css for that element will be displayed in another buffer.

Here's an [animated gif](http://i.imgur.com/VCqEwAp.gif) that 
shows how it works.

In the current html buffer, if you move the cursor over a class="".*?""
or id="".*?"" a buffer will open with the external css file loaded and
scrolled to the matching selector.

Show Css will look at the <link> tags and/or a magic comment tag to get
the location of external css files.

For more info, [Show CSS is at github](https://github.com/smmcg/showcss-mode).",20,46,"showcss-mode.  If you use Emacs to edit html, you might find this mode
I wrote useful."
,2,47,"""emacs"" is the most important VFX in Tron Legacy (X-post from r/linux)"
,18,48,Emacs as the Ultimate LaTeX Editor 
,19,48,Happy new year emacs fans!
,13,46,elisp tip: It's much faster to use buffer-local-value than with-current-buffer
"... some things are much harder to do compared to what is available.  

For example, search and replace in the current workspace.  

I usually do a google search, and the first few results point me to - [https://www.gnu.org/software/emacs/manual/html\_node/efaq/Replacing-text-across-multiple-files.html](https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-text-across-multiple-files.html)  

I fumble and end up using a pre-configured editor like sublime or something.  

I realise emacs is a long-term investment. I like a lot of things already. I like it because it gives me more control over my settings.  

But it's a pressure to keep on it, especially when i'm working on stuff with tighter deadlines.  

Can someone be kind enough to direct me on how I can keep improving my emacs skills while i continue to be productive at my day job as a programmer?  

I'm willing to set aside dedicated time (few hours a week), if that is what it will take, but i feel like i don't have a clear head-start or direction right now, and learning while on job is proving a bit overwhelming.  

  

P.S   

I have continually used emacs for 3 months now. Started from scratch. Learnt keybindings, installed plugins as i felt a need. I wrote a new project codebase (about 600 LOC) completely using emacs. But i feel like i'm still struggling.",45,41,One of my long term goals is to make emacs my primary editor but ...
"Right now my I use Emacs for programming, and org mode. I also use it for taking quick notes, but all my serious note taking is done in LibreOffice Writer. Whats your setup? I also have done some research and found that Emacs can also serve as a browser and music player, basically what I am asking is if you try to use Emacs for everything? and is it preferable to make that the end goal? ",185,43,Do you use Emacs for everything?
,20,45,Emacs Logo Sticker Pack
,61,45,Has Richard Stallman ever shared his .emacs file?
,4,48,Slides with Emacs Org-mode and Reveal.js
,9,45,webkit-color-picker - Color picker widget using child frames (Emacs 26)
"Like many Emacs users these days, I manage my tasks with org-mode.

What is your favorite calendar setup to use in combination with org-mode? How do you manage and display deadlines, recurring events, holidays and anniversaries?

I manage tasks with deadlines using the standard org deadline annotation. I manage recurring events with [org-clone-subtree-with-time-shift](http://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/). I manage holidays manually and I have sexp diary entries for anniversaries. I display everything using a slightly customized org-agenda.

I'm looking into [org-super-agenda](https://github.com/alphapapa/org-super-agenda) and [calfw](https://github.com/kiwanami/emacs-calfw) for better views.

My major pain point is the lack of a [Remind](https://www.roaringpenguin.com/products/remind) substitute on Emacs. I'm still walking my first steps on writing [sexp diary entries](https://www.gnu.org/software/emacs/manual/html_node/emacs/Sexp-Diary-Entries.html), but the language doesn't seem as advanced as Remind. Can I e.g. write an holiday event that is on the first Monday seven weeks after Easter? Can I have exceptions for recurring events?",20,46,What is your calendar setup?
"They released their latests survey and Emacs is just above Rstudio and below IPython. Pretty much a small niche. In comparison Vim is used by 25.8% of their comunity. Take a look:

https://insights.stackoverflow.com/survey/2018/?utm_source=Iterable&utm_medium=email&utm_campaign=dev-survey-2018-promotion#development-environments-and-tools

Most of their users are Web developers and admins I think. Why are they not using Emacs? How can we attract them?

Visual Studio Code is the most used editor. Not surprising considering how easy is to get autocomplete and things like that working. It's also based on Javascript which most web developers know.

It would be great to attract more users since we have seen what ex-Vimmers can do (spacemacs, Doom etc).
",91,47,Emacs used by 4.1% of Stackoverflow users
,23,43,Emacs as a C++ IDE - Martin Sosic's blog
,2,45,Using Emacs 2017 Recap - poll inside - help me decide what videos to make next year.
,1,41,"On Emacs 'master': ""Given you have a file /path/to/archive.tar, you can open this now via 'C-x C-f /path/to/archive.tar/' in dired mode, seeing all contained files. Note the trailing slash. Opening 'C-x C-f /path/to/archive.tar/file'' opens a file in that archive."""
"In light of the recent announcements of real time collaboration features in visual studio code and atom, I am asking myself why there hasn't been a successful attempt to realize real time collaboration in emacs as of now (afaik).",39,48,Real time collaboration in emacs
,5,43,"emacs.dz - ""A list of nice emacs config files"""
,7,43,Using Emacs as a C++ IDE · (or emacs
"* [Composable](https://github.com/paldepind/composable.el)

I have always been a fan of the *idea* of how highly composable commands and objects are in Vim, but I've also been using Emacs since 1993 so I'm not changing editors now, heh.  But Composable provides a similar concept to Emacs.  For example, with it you can `C-w C-w` just like Vim's `dd`.  Or `M-w 3 f` to copy the next three words.  Or `C-SPC s` to mark an s-expression.  Et cetera.  You can easily create composable versions of commands that operate on regions, e.g.

    (composable-def '(avy-move-region))

* [Selected](https://github.com/Kungsgeten/selected.el)

Selected is a minor mode which lets you easily define commands to perform on a selected region.  For example:

    (use-package selected
      :diminish selected-minor-mode
      :config
      (selected-global-mode t)
      :bind (:map selected-keymap
                  (""q"" . selected-off)
                  (""u"" . upcase-region)
                  (""d"" . downcase-region)
                  (""c"" . count-words-region)
        	      (""i"" . indent-region)
        	      (""w"" . copy-region-as-kill)
                  (""m"" . apply-macro-to-region-lines)))

Given this setup, if I mark a region and press `i` then it will indent the entire thing.  Pressing `m` will run the most recent macro on each line.  And so on.

* [Webpaste](https://github.com/etu/webpaste.el)

Pretty simple: it lets you quickly publish a region or entire buffer to one of many different pastebin-ish services---five of them, at this time of writing.  I've found it to be useful for sharing code with my peers.
",24,48,Name Three Useful Packages You Recently Started Using
,16,48,Call for testing: concurrency in Emacs
,3,46,Kanban in Emacs Org-Mode to Get More Work Done
"Being a vim + sublime user in academics (I do some CS/statistics work, some development, a lot of latexing), I have always craved for something better. Vim offers fast editing of remote files, enabling a lot of system admin work. But recently I get into web programming and Python for data processing. Inevitably I feel the pain of using vim as a semi-IDE for fast work. Sublime has been serving me well, it's fast, intuitive, has great support for latex via the latextools plugin and have some IDE features for html/css/js/python (one can work in sublime with great productivity same day of installation), plus it's written in Python! Configuration is super easy with the JSON file.

However, I have craved for something better, that combines the clear advantage of vim and other more modern programming editors like sublime.

So I tried emacs, three times. First time I just used the stock version of gnu emacs came with my system. Too much to learn, quit in 2 days. I have to say, the kbds are not intuitive, at all!

Second time, I came across a starter kit for social sciences, it was frustrating since some packages just couldn't get straightened out. It was improving my experience though. I used it for a week and went back to vim + sublime.

This time, I was recommended spacemacs by a colleague. With some doubts, I asked around. Most people were like, nah, go with the pure emacs, don't do starter kits. Some encouraged me to try it out since it was working out well for them (some are 20 year old programmers so there is some credibility).

I tried out the standard version of spacemacs config. Boom! Everything is plug and go, perfect. However, I did want something simpler, so i switched to spacemacs base version.

After a few days of exploration, encouraged and informed by the spacemacs documentation, design and community, I have more than 500 lines of codes in my dotspacemacs file that I actually understand.

These three days have been amazingly enlightening to me: an ex-vim/sublime user. I have already configured an emacs development environment far better than my vim or sublime environment. And I am exploring more, hoping to contribute back to the emacs community some day.",42,44,My experience of using spacemacs for just under a week
"For information on what GNU Hyperbole is, screenshots, download and
installation instructions, see the GNU Hyperbole home page:

   https://www.gnu.org/software/hyperbole

The Hyperbole wiki page:

   https://www.emacswiki.org/emacs/Hyperbole

explains the many ways it differs from and is complementary to Org mode.

Hyperbole includes an interactive demo to introduce you to its features and a
detailed reference manual.

===========================================================================
*                 What's New in GNU Hyperbole V6.0.2
===========================================================================

  BUTTONS

    - pathname Implicit Button Type: generalized to handle hash-style links to
      HTML files, to Github Markdown # sections and to Emacs outline *
      sections.  So an Action Key press on any of the following links displays
      the link referent:
            ""man/hyperbole.html#Questions-and-Answers""
            ""README.md#why-was-hyperbole-developed""
            ""DEMO#HTML Markdown and Emacs Outline Hash Links""
      Even links split across 2 lines like this now work: ""DEMO#Social Media
      Hashtags and Usernames"", as long as point is on the first line.

      Within HTML and Markdown files, in-file hash links without any file name
      prefix work as well.

      HTML hash-links are case-sensitive; other hash-links are not.  Hash links
      typically use dashes in place of the spaces that referents may contain,
      but if the link is enclosed in quotes, Hyperbole allows spaces to be used
      as well.  In fact, it is best practice to always enclose hash-style links
      in quotes so Hyperbole can distinguish them from other similar looking
      constructs, such as social media hashtags (see ""(hyperbole)Social Media"").

      Pathnames surrounded by literal non-ASCII quote marks now work as well.
      For example, ‘http://ftp.gnu.org/gnu/hyperbole/’.

    - New Implicit Button Type, markdown-internal-link, displays any in-file
      Markdown link referent, aside from pathnames and urls.  Together with
      other types, all Markdown links can now be followed by the Action Key.

    - social-reference Implicit Button Type: Disabled this type within quoted
      strings (all modes) and within parentheses (markdown-mode), so in-file
      hash link references are not matched as social hash tags.  Made the list
      of modes a variable, hibtypes-social-inhibit-modes.

    - New link-to-web-search Action Type: Allows global and explicit buttons
      to link to specific web term searches from `hyperbole-web-search-alist'.

    - org-mode Implicit Button Type: Improved to invoke org-meta-return when
      not on an Org link or outline heading.

  DOCUMENTATION

    - Added pointer to HyControl video and {C-c \} binding which invokes
      HyControl window control.

    - README File: New Org-mode user testimonial.

    - DEMO File: Added description and exercise using the new Find/Web menu.

    - Added README.md.html introduction with images combining README, INSTALL
      and HY-ABOUT information.

    - Full set of hand-written changes are now in the file ""Changes"".  The
      former name, ChangeLog, is now auto-generated from the version controlled
      'git log' but not as complete.

  KEYS

    - New variables, action-key-eol-function and assist-key-eol-function, used
      to control what the Action and Assist Keys do at the end of a line.
      Default behaviors remain as before but now one can set these to do
      something other than scrolling, if desired.  See ""(hyperbole)Smart Key -
      Smart Scrolling"".

    - When in HyControl, pressing {ESC} now quits in addition to {q}.

  MENUS

    - New submenu, Find/Web, for quick access to major web search engines.
      The Find/Web menu looks like this:
        Web> Amazon Bing Dictionary Elisp Facebook Google Hub(git) Images Maps RFCs StackOverflow Twitter Wikipedia Youtube

      Hyperbole binds the key {C-c /} for quick access to this menu, if it is
      not already bound prior to Hyperbole's initialization. The
      Cust/Web-Search menu, {C-h h c w}, sets the option,
      hyperbole-web-search-browser-function, which determines whether web
      search results are displayed within Emacs or with an external web
      browser.  A short video introduction to the Find/Web menu is available;
      see https://youtu.be/8lMlJed0-OM.

      Advanced users can change the search engines listed in the Find/Web menu
      with M-x customize-variable RET hyperbole-web-search-alist RET.  Changes
      are automatically reflected in the Hyperbole menus once applied.
      Remember each search engine name must begin with a unique letter and each
      URL must have a %s format field indicating where to place the web search
      term when a search is performed.  See ""(hyperbole)Web Search Engines"".

-- The End --
",58,46,GNU Hyperbole 6.0.2 for Emacs 24.4 or newer is released
,24,47,Started working on an updated version of Tuhdo's C/C++ IDE guide to show how to setup and configure RTags and Irony.
,2,47,How I use Emacs (by MJ Wall)
,38,44,[emacs-devel] Emacs logo proposal (+ website redesign plan)
"There's an emacs conference, 2015-08-29 (a Saturday) in San Francisco, CA, USA.

http://emacsconf2015.org/
* edited. grammar",2,47,emacs conference 2015 San Francisco
,26,46,"""I will be able to compile a C[ommon ] L[isp] GNU emacs core, that would be 100% bug-for-bug compatible with GNU emacs"""
"[evil-ranger](https://github.com/ralesi/evil-ranger) A little something I have been working on to bring some of the functionality of the python-based file manager, ranger, to Emacs.",26,41,Evil-ranger : bringing the best of ranger to dired
,6,46,"Uh, do what you need to do I guess."
"I love hydra.el, and I'm interested to see what you guys are using it for. ",19,48,Does anybody have any real cool hydras to share?
I'm trying out magit but still find the vanilla git command-line interface to be far more efficient. Be great to see other people's basic workflow. ,24,43,Anyone care to share their magit workflow?
,2,45,GNEVE - GNU Emacs Video Editor
,19,48,From Vim to Emacs+Evil chaotic migration guide
,4,42,Use Org-Mode Links for Absolutely Anything
,22,44,discover.el: discover more of Emacs using context menus
"Do you guys know about this emacs port ?

https://github.com/railwaycat/emacs-mac-port

I've just switched to it from emacsforosx... And it is phenomenal! Complete fullscreen support, continuous scroll, pinch to zoom, two finger swipe to switch buffer (safari style)!

Not only that, for those of you with retina displays, the text looks much much better.

I highly recommend anyone using emacs on OSX to switch to this port. Oh, and its available via homebrew.
>
>If you are using Homebrew, copy ""emacs-mac.rb"" to your brew's
>   	formula directory(usually at /usr/local/Library/Formula/), and
>       
>        $ brew install --HEAD emacs-mac

Or even easier:
>$ brew install --HEAD https://raw.github.com/railwaycat/emacs-mac-port/master/emacs-mac.rb

Try it!",36,44,Hey mac users...
,20,46,The Wikemacs Experiment: 300 Days Later
,4,47,Sync emacs with google docs
,14,41,Are there any up to date step-by-step guides describing configuration of CEDET and related tools to acheive IDE-like features?
,1,43,GitHub - flycheck/flycheck-inline: Display Flycheck errors inline
"Any tips for managing my RPG campaign in Emacs? I did it in Evernote before, but now I'm on Linux and Evernote sucks. Should I just use org-mode?  Or are there some advanced strategies?",18,43,Managing a pen and paper rpg campaign
,13,41,Emacs on Microsoft Windows
"Stop resisting emacs (In my case I mostly use it for org mode and documentation/projects/wiki type work)

Confessional...I keep looking and trying other things, new shiny products, web based, new hot things, todo lists, web things, wikis, apps, outliners, the list goes on and on. 

After a couple weeks of dating the hot chick app, I always miss emacs, and come back home and tell emacs ""you do everything they do, and better!"" and move back in. 

So I am sorry emacs, I need to simply ""do better"", learn to use you better, RTFM, and stop resisting what is already doing everything I need, and 100% more I don't even know. :) 

&#x200B;",31,44,I have finally discovered the secret to emacs ZEN
,17,45,I wrote another LinkedIn article about how to make your Emacs instance more like a full-fledged IDE
,12,43,Ways to support developers of popular Emacs packages
,21,44,The niceties of Evil in Doom Emacs
,24,44,"[Emacs Notes]: Why a minimal browser, when there is a full-featured one? Introducing`XWidget Webkit`: A state-of-the-art browser for your modern Emacs"
"Hello everyone, 

I just came across [Memacs](https://github.com/novoid/Memacs), which seems amazing to me. However, I wanted to know whether someone here actually uses it in their workflow? 

Also, I can't seem to figure out how to set the thing up. The paper was of little help as far as getting everything to work goes. I am on a mac, fyi. 

Thanks. ",23,47,Is anyone using Memacs?
"Hey All,

I am at a point where I have been thinking about writing my own custom functions to make emacs do more for me. One of my set backs is learning elisp. I have also become very interested in functional programming in general so I have thought of learning things like Scheme, Haskell, or Scala.

I came across this: [https://www.emacswiki.org/emacs/WhyDoesElispSuck#toc20](https://www.emacswiki.org/emacs/WhyDoesElispSuck#toc20) and thought a bit about it. But, really emacs lisp is just for emacs so it seems to work well for that purpose.

So, here are my questions.

Is emacs lisp worth learning to extend the emacs editor or should I just stick with being able to tweak things to my liking?

Would my time better be spent learning Scheme, Haskell, or Scala and would that possibly make picking up emacs lisp much easier?

Has anyone taken the time to really master emacs lisp and saw a great improvement in their workflow?

What resources do you recommend for learning \(whatever you thought was best\)?

**\*\* Edit \*\***

Lots of good suggestions. Thanks everyone!",32,42,Learning lisp/elisp?
,16,46,Using a posframe to show ivy's candidate menu.
,17,42,Yet another Sidebar: dired-sidebar
"What are your favorite or most useful `M-x magit-` function(s)? i.e. not something that's in the magit popup. Magit is so feature-rich it's just incredible.

Today I discovered and used `magit-find-file` for the first time and my mind is blown.",19,47,Favorite M-x magit functions?
,23,47,customizing the new native line numbers in emacs master
,6,46,Managing code with Outlines
"Why are the brilliant ideas in Emacs not ported to other applications?  Maybe everybody sees Emacs as a text editor with weird shortcuts from the 80's but, Jesus people could learn a hell of a lot from it. 

I was doing some stuff in the browser and something occurred to me.  If this was Emacs, I'd script this behavior, or record it into a macro so I didn't have to keep clicking back and navigating forward in a predictable way. Extensibility by the user seems like such an obvious thing to me now!

The help system is lightyears beyond anything else I've ever come across.  Why is no other help system like this?!?!  I would be much more apt to use something like intellij and not be grouchy about it if I could actually figure out what stuff did through the program instead of having to google how everything works every 2 minutes. 

I want more people to use Emacs now, not because I think it's necessarily better for everybody, but so they can learn how to design advanced tools!",26,44,A short rant on other applications
,2,44,My Workflow with Org-Agenda
"I love org mode. Use it daily, my org-directory contains almos 190k lines - agendas, lists, wikis. 

It. Is. Amazing.

But...

I feel also very passionate about knowledge management - storing and linking concepts, links, text.

 Org-mode does a great job on some of the points, but there are also a few very critical restrictions the main two for me are:

1. org-files are linear/tree structured - concepts however form a network.

2. links are only one-way (no automatic backlinking, transclusion).

i.e. ""animals"" link to ""dog"" ""mouse"", ""mouse"" links back to ""animal"" but also to the ""computer"" entry, at the moment you linked ""mouse"" to ""computer"" the link from ""computer"" to ""mouse"" got created too.

While I understand this is a matter of personal choice, there are only two systems that I know about that do get many things ""right"":

[The Brain](http://www.thebrain.com/)


[Freex-mode](https://github.com/gregdetre/emacs-freex)

Brain is unfortunately not open source and has virtually no linux support. The closedness is particularly worrisome if you pour in literaly 100s of hours building up your database.

Freex seems great, open, within emacs. Unfortunately is not supported, I didn't get it to run on any of my machines and org-mode wasn't really supported.

The recent [org-wiki](https://github.com/caiorss/org-wiki) has some nice features (easy linking/node creation, attachments), but the most critical parts are not in the scope of the project (understandably, this is not a complaint).

**Is there somebody who is thinking about working with concept networks and knowledge graphs? If yes what is your opinion? What are you using?**

I keep ""linear"" info in org. For the concept networks I'm currently using Brain, but I hesitate investing more time into it.",33,45,Serious knowledge management / concept networks with Org-mode?
,14,46,I have created a list of people with nice config files. Please help me improve it.
,29,41,emacs_gifs on twitter - prompted by vimgifs
"There were some reports lately that [Spaceline](https://github.com/TheBB/spaceline) had some performance problems. Reports [here](https://github.com/TheBB/spaceline/issues/53), [here](https://github.com/syl20bnr/spacemacs/issues/4552) and [here](https://github.com/syl20bnr/spacemacs/issues/5955) in particular. I hadn't experienced any such problems myself, but for sure Spaceline did much more at runtime than it strictly speaking needs to.

The new version attempts to fix this by turning Spaceline into something like a modeline compiler. Most decisions that *can* be made statically *are*, and this has had some great effects on performance, at least according to my profiling (see [comment](https://github.com/syl20bnr/spacemacs/issues/4552#issuecomment-217741584)). About 5-6 times faster and less than half as much allocation as the old version.

Most users *shouldn't* experience any changes. Many of the lightweight configuration options will now no longer take any effect until you call `(spaceline-compile)` to recompile all modelines. Examples include changing separator styles or directions or redefining the segments. If you've been manipulating the modeline spec in `spaceline-left` and `spaceline-right`, those variables are now gone and you should have a look at `spaceline--mode-lines` instead. Any changes to these require recompilation also.

I've gone through the documentation to make sure it's up to date, so if you are experiencing problems have a read, or ask here.

If we go a week or so without major issues I'll put it on MELPA stable.",8,45,Spaceline 2.0 — modeline compiler
,3,44,Effortless Major Mode Development
,8,42,"Introducing org-alert, system notifications for scheduled and deadlined entries"
,30,44,Work in progress light minimal SVG modeline...
"The last time this question was asked was about a year ago. 

http://www.reddit.com/r/emacs/comments/273vey/what_have_you_recently_removed_from_your_emacs/
> There are a lot of posts discussing packages and features that people enable in Emacs, but what about those features that you've had for a while (months, years) and removed?

What have you removed since then?",122,40,What have you recently *removed* from your Emacs configuration?
,23,43,Sacha Chua: Planning an e-mail-based course for Emacs Lisp
,9,42,Emacs as a C/C++ Editor/IDE (Part 3): cedet mode for true intellisense
"Link: [https://github.com/benma/visual-regexp.el/](https://github.com/benma/visual-regexp.el/)

visual-regexp for Emacs is like `replace-regexp`, but with live visual feedback directly in the buffer. Check out the screenshots on the GitHub page for some examples.

It is the successor of pyregexp, which is being deprecated. If you are using it, you are kindly advised to switch. 

If you desire Python's regular expressions, check out [visual-regexp-steroids](https://github.com/benma/visual-regexp-steroids.el/).

Your feedback is welcome.",10,43,Announcing visual-regexp.el
,9,43,Introducing Skewer -- Emacs live interaction with browser JavaScript
,6,41,FSF store is now selling GNU Emacs reference mugs
,7,43,ELPA coming to Emacs 24
,14,42,Flower embossing plates in Emacs auto-fill-mode
"I recently wrote a short article on LinkedIn on how to extend Emacs to behave a little more like an IDE instead of only the best text editor in the world. I don't give an inclusive list of all things Emacs is capable of, but if you are unsure but are interested in making your Emacs instance behave a little more like you want it, check it out!

&#x200B;

[Emacs - An IDE in the Console](https://www.linkedin.com/pulse/emacs-ide-console-palmer-cluff/?published=t)",36,39,Emacs - An IDE in the Console
,16,45,"Why is the first row in a text file 'row 1', but the first column is 'column 0'?"
,10,44,"Interesting suggestion: ""a new link on the splash screen which invited users to customize some of the most fundamental aspects in which the default Emacs behaviours conflict with the typical behaviour of newer applications with which the user may be more familiar."""
,12,44,Emms 5.0 released
,0,45,Blogging with Hugo and Emacs Org | ZCL.SPACE
,5,43,Diffing and merging in Emacs
"(Re: exwm, the Emacs X Window Manager)

Looks like [Chris Feng](https://github.com/ch11ng) has been busy!  I just checked [exwm](https://github.com/ch11ng/exwm) and saw a whole lot of stuff's landed, and a version up to 0.17.

From reading the log it looks like a bunch of window handling has changed to make it compatible with third party compositors.

He's also added a lot of customization interface, that should help with discovering what can be changed, even for those who don't like the customize interface.

Not sure if he does Reddit to give an overview of what's new or what the changes mean.",23,42,exwm version 0.17 - looks like things have been happening
,16,40,Emacs adds support for a second (read earlier) init file
"Hi,
I do know a bit about programming(while loop, if etc.) but I would like to learn elisp to make my emacs more functional.  Would this be a bad idea? 

The elisp/lisp syntax is much different than regular syntax. Lots of parentheses and very different syntax to conventional languages(ie. Python)


I found some youtube videos that give basic explanation on syntaxes and some tutorials. Are there any good books or online material to learn more about  Elips? 
",54,45,As a Beginner Programmer would it be a bad idea to delve into elisp?
"For anyone curious how the soon-to-come emacs 26 looks in 24 bit colors in terminal - here's a [screenshot](https://i.imgur.com/5x53nBc.png)  

The theme is leuven.  

On the left - GUI, in the middle - 24 bit colors, on the right - 256 colors",7,44,"Here's a sample of emacs in 24 bit colors in terminal, next to a GUI emacs, next to a 256 colors emacs"
,4,44,Magit: Git in Emacs - Grumpy Gits SG [2016]
,3,42,Ripgrep · (or emacs
,8,44,Using Emacs 36 - A Touch of Elisp
,7,42,Using Emacs Series
,2,43,Synthesising Elisp Code
"Although I've used emacs for over 25 years, I've never used orgmode.  Part of the reason is that I'm too disorganized and undisciplined; my notes and reminders consist of a mixture of computer files, emails, calendar entries, and bits of scribbled paper which get left lying about the house.  And of course sometimes I'm at a computer with emacs; other times I'm not: I might be at a Windows computer at work, or on my (Android) phone or tablet.  The perfect reminder and note system for me would be some way which neatly integrates all of these environments.  I've tried a few Android solutions (including orgzly) but none seem quite to work.  One looked good, but it would only sync with Dropbox, and I run ownCloud on my VPS.  

The few times I've tried to use orgmode I run into the problem of needing its facility when I'm on another system.

So I'm curious, how do you use orgmode in a way which integrates notes, reminders, calendars etc from different systems?  ",32,45,Workflow for using orgmode?
,13,42,New Java Develop Environment for Emacs
,21,41,Why I started learning Emacs in 2016
,12,43,Blogging with Orgmode
,1,43,"Org-jira now supports rest api, since jira 7.0 removed soap/xml-rpc"
,7,43,Emacs Chat - Graphics in Emacs with wasamasa
,3,43,Merry Christmas: Flycheck 0.22 released
,42,44,"The future of Emacs, Guile, and Emacs Lisp summary on LWN"
,4,42,An Emacs Foreign Function Interface
,16,40,Most frequently enabled Emacs packages
,24,46,"Emacs package using Clang for C & C++ completion, on-the-fly syntax checking and more!"
,0,40,Wanted: New Emacs PHP Mode Maintainer
"I've run into a couple of general techniques to speed up startup of emacs.  Here's a summary of what I've found to work well.

* Use emacsclient.  The most obvious thing to do is to use emacsclient instead of emacs; if you do that, a pre-existing emacs ""server"" instance will be used, if available.  That way, there *is* no emacs startup.  If you want a new graphical window each time, `emacsclient -a """" -c` is probably what you want; the `-a """"` will cause a new emacs instance to be started if one isn't already running, and `-c` will cause a new frame to be opened.

    I like running emacs in a terminal only, with a new xterm popping up containing an emacsclient instance if emacs is launched from, say, Firefox.  If you think you'd like the same behavior, I've just [posted a script](http://www.reddit.com/r/emacs/comments/1auowq/script_for_using_terminalbased_emacs_as_editor_on/).
    
* Many packages require loading for use to be made of them.  Since this often requires modifying one's ~/.emacs.d/init.el file to contain a `(requires 'foo)` snippit, it adds to the difficulty of using emacs for new users.  Many Linux distros simply have emacs packages that must be loaded drop off a file in `/etc/emacs/site-start.d`.  Every time emacs is started, it executes every file in here, and loads every package installed on the system.  This makes things simpler for a user — he doesn't have to see any elisp.  However, it also means that every emacs instance startup runs slower as more packages are installed on the system.

    If you're comfortable with loading up what you want and don't like the startup overhead, you can run `emacs --no-site-file`.
    
* Where possible, use `autoload` instead of `require`.

    It's possible to tell emacs in your ~/.emacs.d/init.el, ""if anyone tries to run function `foo` and it hasn't been loaded yet, load `bar.el`, and then try again to execute `foo`"".  This is done via a statement like the following:

        (autoload 'ibuffer ""ibuffer"" ""List buffers."" t)
        (global-set-key (kbd ""C-x C-b"") 'ibuffer)

    The `global-set-key` function will tell emacs to run the fancy colorized, grouping `ibuffer` package instead of the simpler `list-buffers` when a user his `C-x C-b`.  The `autoload` function says ""if the user tries running function 'ibuffer, and that function hasn't yet been loaded, try loading a file called ""ibuffer.el"" or ""ibuffer.elc"" and then repeat the attempt.
    
    This way, if you don't actually use ibuffer in a particular emacs run, ibuffer is never loaded up.
    
    I use autoloading heavily in my init.el:
    
        (autoload 'gid ""idutils"" nil t)
        (autoload 'gnuplot-make-buffer ""gnuplot"" ""open a buffer in gnuplot mode"" t)
        (autoload 'ansi-color-for-comint-mode-on ""ansi-color"" nil t)

    So on most emacs sessions, these packages never need to load.

    Another really common time I need to autoload something is if I install a package to handle a particular filetype.  Then, whenever I open that filetype, I want emacs to load up the package with the mode required to edit that filetype, and switch to the mode...but I don't want emacs to read through code to handle a bazillion different filetypes unless it really needs to do so.  Sometimes, I have multiple possible modes to edit a filetype, and some systems have one mode and others another...I'd like to load up only the mode that is actually installed on the system and that I most like.  Heres' the function I use, and some examples:
    
        (defun find-in-list (f list)
          ""Find an element for which f returns true in list and return that element""
          (let ((templist list))             
            (while (and templist (not (funcall f (car templist))))
              (setq templist (cdr templist)))
            (if (null templist)
                nil         
              (car templist))))

        ;; Given a list of ((filetype-regex, (""libname"", ""Description"",
        ;; 'function-symbol)...)...), for a given filetype, finds the first
        ;; libname that is present, and sets filetype-regex to autoload the
        ;; specified function-symbol in libname for that filetype-regex.
        (defun autoload-filetype-with-preference (regex description list)
          ""Autoloads for given regex a preferential list of libs/function pairs""
          (let ((mode-pair (find-in-list (lambda (x) (locate-library (car x))) list)))
            (if mode-pair
                (let ((mode-name (cdr mode-pair))
                      (mode-file (car mode-pair)))
                  (autoload mode-name mode-file description)
                  (add-to-list 'auto-mode-alist (cons regex mode-name))))))

        ;;; Autoloads

        (autoload-filetype-with-preference
         ""\\.wiki\\'""
         ""Major mode for editing documents in Wikipedia markup.""
         '((""wikipedia-mode"" . wikipedia-mode)))

        (autoload-filetype-with-preference  ""\\.\\(gp\\|plt\\)\\'""
                                            ""Gnuplot major mode""
                                            '((""gnuplot"" . gnuplot-mode)))

        (autoload-filetype-with-preference  ""\\.m\\'""
                                            ""MATLAB major mode""
                                            '((""matlab-mode"" . matlab-mode)))

        (autoload-filetype-with-preference ""\\.\\(pov\\|inc\\)\\'""
                                           ""PoVray scene file major mode""
                                           '((""pov-mode"" . pov-mode)))

        (autoload-filetype-with-preference ""\\.lg\\'""
                                           ""LOGO major mode""
                                           '((""logo-mode"" . logo-mode)))

        (autoload-filetype-with-preference ""\\.twiki\\'""
                                           ""Twiki major mode""
                                           '((""erin-mode"" . erin-mode)))

        (autoload-filetype-with-preference ""\\.ml[iylp]?\\'""
                                           ""CAML major mode""
                                           '((""tuareg"" . tuareg-mode)
                                             (""caml"" . caml-mode)))

        (autoload-filetype-with-preference ""\\.smb\\.conf\\'""
                                           ""smb.conf major mode""
                                           '((""smb-mode"" . smb-mode)))

        (autoload-filetype-with-preference ""\\.\\(sml\\|sig\\)\\'""
                                           ""SML major mode""
                                           '((""sml-mode"" . sml-mode)))

    In the above example, I'm loading up tuareg-mode for Ocaml files if it's available on a system.  If not, I fall back to sml-mode.  If that's not available, I just use whatever emacs defaults to.
    
    All code released to the public domain.

* Use locate-library to only use a particular feature if a system has it installed.
    
    I often work with older systems; some don't have, say, ibuffer installed.  I'd hate to have to maintain a different init.el for those systems.  What I do is make the load conditional on the library being present, so that my init file won't fail while trying to autoload a package that isn't present:
    
        ;;; ibuffer
        (if (locate-library ""ibuffer"")
            (progn
              (setq ibuffer-saved-filter-groups
                    (quote ((""default""
                             (""shell"" (mode . shell-mode))
                             (""dired"" (mode . dired-mode))))))

              (add-hook 'ibuffer-mode-hook 
                        (lambda ()
                          (ibuffer-switch-to-saved-filter-groups ""default"")))

              (setq ibuffer-show-empty-filter-groups nil)

              (autoload 'ibuffer ""ibuffer"" ""List buffers."" t)
              (global-set-key (kbd ""C-x C-b"") 'ibuffer)))

* Timestamp your load messages to profile loading time

    This one doesn't actually speed up loading, but it does help you see what is hogging your startup time.  Normally, packages print messages in your \*Messages\* buffer as emacs loads up; you can ask emacs to timestamp these so that you can see what it is that's causing the slow startup.
    
    Thanks to [other /r/emacs users](http://www.reddit.com/r/emacs/comments/16tzu9/anyone_know_of_a_reasonable_way_to_timestamp/) for helping me put this one together:
    
        ;;; timestamps in *Messages*
        (defun current-time-microseconds ()
          (let* ((nowtime (current-time))
                 (now-ms (nth 2 nowtime)))
            (concat (format-time-string ""[%Y-%m-%dT%T"" nowtime) (format "".%d] "" now-ms))))

        (defadvice message (before test-symbol activate)
          (if (not (string-equal (ad-get-arg 0) ""%s%s""))
              (let ((deactivate-mark nil))
                (save-excursion
                  (set-buffer ""*Messages*"")
                  (goto-char (point-max))
                  (if (not (bolp))
                      (newline))
                  (insert (current-time-microseconds))))))

EDIT: modified `find-in-list` to not eat stack space linear in the size of the list, as per nitroll's comment below.  Elisp doesn't do tail-call optimization!  Unlikely to break in the usage here here (since the list is unlikely to be long), but bad for a general-purpose list-processing function.
",20,43,Speeding up your emacs startup
,19,39,GNU Press releases new edition of the Emacs manual!
,0,42,Let us welcome our new brother Abstruse Goose who found the true way from the pits of vim
,12,43,Emacs Rocks: Ace Jump Mode
I'm reasonably new to emacs and i'm looking to check out some cool stuff. So what're all your favourite emacs feature? :),41,45,What is your favourite emacs feature?
"Hi, I'm looking for Emacs Users in Buenos Aires to create a proper Emacs Users Group, capable of holding meaninful and helpful meetings. 
I'm not a programmer, I am a writer and I mostly dedicate my usage to producing books using emacs. That I can contribute fully, so hackers are more than welcome, so we can all share at least a day with like minded people and sharing elisp recipies. 
If you are here in Buenos Aires and you feel like being part of a Free Software Community feel free to contact me via reddit message.
(EDIT) For those who want to join: There is an irc room on Freenode #EUCARG so we can gather and sort the initial steps over!
Thanks for all the support ",16,41,Looking for Emacs Users in Buenos Aires - Argentina to create an Emacs Users Group
"Just wanted to say thanks to the authors and maintainers of [poporg](https://github.com/QBobWatson/poporg), Joe Rabinoff and François Pinard.  It's a great tool that is very easy to use.  It was just what I needed when I needed it, and, being in MELPA, it was only a few keystrokes away.  `poporg-dwim` did the rest.  Thanks, guys!",17,45,poporg is great
"I've found many people who use emacs for (almost) everything that they do. A majority of those people are found on this sub-reddit, of course.

I just want to know if there are any particular advantages to using emacs for as many things as possible. For example, instead of using emacs as my music player, text editor, e-mail client etc. why wouldn't I just download individual apps that do what I need (i.e. cmus for music player, emacs only for text editor, and neomutt for e-mail client instead of using emacs for all of those things)?",63,41,Why use emacs for everything?
"I want to write my thesis (""recepcional document"", but it is almost the same) in emacs using org-mode. I  need to use the Times New Roman font size 12 (I'll use Liberation  Serif), 1 ""margins, double-spaced text, 5-space indentation, the title  of each chapter must be on a separate page, the first subtitle of each  chapter should begin in the middle of the page and, of course, apa style references.  


I  know I can use `#+latex_class: [options]{book}` and configure the  margins using the `geometry` package (I've used it with beamer) but the  separate titles, apa style references (I've seen that LaTeX references  are something like \[1\] and not in apa format) ... is it possible to do all this with org-mode?  


I  do not want to use pure LaTeX because it is difficult to read, write  and learn, but I can learn the basics (or more if necessary) to use it  in org-mode.  


Has anyone used org-mode for a thesis or a similar document that can guide me? Thank you very much.",53,40,Write a thesis using emacs and org-mode?
"Hello Emacs people,

&#x200B;

A while ago I announced [Peach-Melpa.org](https://Peach-Melpa.org) and I've intermittently been doing work and trying to observe some of the feedback I got back from you (and thanks by the way, it was quite positive overall). The quick changelog:

* HTTPS, yay! With Certbot, was a lot easier than I thought;
* More themes available: I was assuming ""single"" type for themes packages, but there are also ""tar"" , so now both are correctly retrieved and parsed;
* A proper test suite to stop developing in the dark;
* Some CSS fixes, even though someone in another thread described it as quite ugly :'(
* **Multi languages!** Lisp is the default displayed in the listing page, but if you enter a page theme you will see there is now Javascript, C, Ruby and Org-Mode alongside. It's been quite hard to find samples that reflected nice code and practices and even though it's entirely subjective, I'm happy with them at the moment.

It's not very much but the goal is to display all MELPA themes properly and that means the next big piece is handling all themes that have light/dark variants before I can start adding features like brightness/darkness (already have some code for it), other fonts, which modes are implemented (org, magit, ediff etc), custom input and what you have.

&#x200B;

I do hope some of you pay a visit once in a while, and in the meantime have a nice day.",24,43,PeachMelpa v0.4: multiple languages!
,0,42,Reproducible Research and Software Development Methods for Management tasks
,2,43,2018-04-09 Emacs news | sachachua.com
,10,43,Using Emacs 46 Auto Yasnippets
"I don’t know what it is but going through my workflow and adding little performance improvements here and there feels great. Discovering new things too. 
What about you?
Is this a pattern in emacs users?
",27,42,I find tweaking my emacs config a soothing activity
"Hi r/emacs! I just open sourced a theme I've been playing around with over the past few months – [https://github.com/kunalb/poet ](https://github.com/kunalb/poet) which I've been using while writing prose (particularly for org-mode & markdown documents).

This is my first theme/any released elisp for emacs outside [my configuration](http://explog.in/dot/emacs/config.html) and It's still very rough, has only been aimed at emacs GUI, hasn't been added to any package manager and has several issues – but I thought I'd share it here to get feedback on the code, packages, etc. and suggestions on making it more usable.

Thanks in advance for any suggestions/comments!",21,42,[RFC] New theme for prose / org-mode / markdown-mode
,5,42,Writing Emacs's dynamic modules in Rust
,10,42,Emacs Conceptual Architecture - Chris Mennie (2003) [pdf]
,0,45,Deep dive into writing a major mode - Part 2 (IDE Features)
,18,43,Sunburn — a new low-contrast theme
"This has been asked a hundred times before, I know, but it is a never ending topic.",93,45,What Emacs themes are you using?
,1,41,Using graphviz in Emacs
,12,42,Helpful: Adding Contextual Help to Emacs
,13,43,The Emacs Package Developer's Handbook
,4,45,emacsdojo: Tons of Great Packages Listed by Category
When is `#'` used over `'` when referring to a function (not evaluating it)? And why isn't the former used more often? I've read that in some cases like with keybindings it's technically more correct and that the former allows some things like byte-compilation.,13,44,When is #' used over '?
,6,42,Making eshell your own
,3,40,Kaolin theme: A dark jade Emacs theme inspired by Sierra.vim
,15,42,A year with Notmuch mail - a super-fast email client available on Emacs
,5,41,Customizable Lisp reader for Emacs
,1,44,Blogging using org-mode (and nothing else)
,8,42,Create Github PRs from Emacs with Magit (again) ·
,34,45,This new keyboard design might work really well with Emacs.
,28,46,"My emacs.d/ after 1 year, featuring readme.org"
,16,42,Famous Emacs Users
,18,40,A package on a league: Helm - Introduction to Helm
,31,39,The Sorry State of Emacs Lisp Package Archives
,34,42,Flycheck versus Flymake
,15,44,Help me keep the shell people alive
,13,45,What about spicing up our sub-reddit a little bit?
,12,39,"Meet Magit -- intro, remote, reflog, rewrites - 20min"
,18,42,Elnode (emacs webserver like node.js) is nearing a release.
,3,42,"The Mastering Emacs Reading Guide | Mastering 
Emacs"
,3,44,[maybe OT] R.I.P. John McCarthy
,18,43,"Eclim makes Eclipse's language support available for 
other editors and there is an Emacs interface too. 
That means you can have intelligent Java, C++, etc. 
code completion in Emacs"
,1,45,Some .emacs tips from Hacker News
,28,44,"That's a funny way of spelling ""org-mode"""
"I work in an environment where 95% of the people are using some “other” editor (mostly vim). Because of this, I sometimes get asked why use Emacs. I try to answer best I can, but then I found this great [summary](https://github.com/Wilfred/remacs/blob/master/README.md#why-emacs) of some of Emacs unique features and strengths. I was wondering if there are any other good resources out that that answer the question “why emacs?”",23,43,Good summary’s of Emacs strong points
,7,39,"Reddit, Emacs style"
"hello all, I have recently started using Emacs again for development after a few years away and am happy to be back. But while learning about what's new in the last few years I came across several links that led me to make this post. Such as:

[https://www.reddit.com/r/emacs/comments/8sykl1/emacs\_tls\_defaults\_are\_downright\_dangerous/](https://www.reddit.com/r/emacs/comments/8sykl1/emacs_tls_defaults_are_downright_dangerous/)

[https://glyph.twistedmatrix.com/2015/11/editor-malware.html](https://glyph.twistedmatrix.com/2015/11/editor-malware.html)

[https://lwn.net/Articles/759370/](https://lwn.net/Articles/759370/)

In addition I read some comments by developers whose opinions I respect that they will not use package.el because of security concerns. 

So far I have not found an article that lays out sane defaults for the average Emacs user. So my question is, am I reasonably secure with a vanilla Emacs 26 install on Ubuntu 16.04? Should I take additional steps? The article on twistedmatrix is a few years old so I thought there might be updates in that time. 

At this point all I'm doing is using https in my package-archives urls. 

&#x200B;",17,43,What should the average Emacs user do in 2019 to download packages in a reasonably secure way?
,9,43,GNU Emacs Sink Icon Sticker Pack
"In [https://www.reddit.com/r/emacs/comments/9rvboq/what\_emacs\_packages\_have\_upped\_your\_game\_recently/](https://www.reddit.com/r/emacs/comments/9rvboq/what_emacs_packages_have_upped_your_game_recently/) a lot of people mentioned the eyebrowse package, which apparently is to do with managing window layouts.

I'm curious how it's normally used, because I pretty much only have a horizontally split frame and that's it. Not that much to manage...

What window layouts do you have that makes eyebrowse a good idea? What are your workflows with it?",23,41,What do you do with eyebrowse?
,18,42,How do I select a rectangular area like in this gif?
"[The first of two major PRs](https://github.com/alphapapa/outshine/pull/17) is about to be merged on the [Outshine](https://github.com/alphapapa/outshine/) package.  For historical reasons, Outshine used to (re)define a lot of functions and variables in the `outline-` pseudo namespace, conflicting with the built-in Outline it extends, and reintroducing long-fixed bugs in the process (because some of the `outline-*` functions it defined were actually provided by Outline, but Outshine redefined them using older definitions!).  This PR removes most of these definitions, and renames those that no other package provides.  This is the first step in making Outshine a polite citizen of modern Emacs world.

We (/u/github-alphapapa and myself) believe the changes should have absolutely no effect beyond fixing some bugs and quirks in Outshine but... it's a big refactoring, so you never know.  We thus kindly ask Outshine users to give [thblt's `leave-outline-alone` branch](https://github.com/thblt/outshine/tree/leave-outline-alone) a try before it gets merged, and [report](https://github.com/alphapapa/outshine/issues) any issue you encounter --- try to make it reproducible if you can, but report anyway!

Merge will happen on October 20th, 2018, around 12:00 UTC, should be picked up by Melpa the usual way, and will be tagged so that Melpa Stable picks it up as well.

Thanks!
Adam (Alphapapa) & Thibault (Thblt), co-maintainers of Outshine

------ 

PS: If you're feeling especially adventurous, you may even give a try to the *second* big PR.  This one will turn Outshine into a real minor mode, isolating its effects using the regular Emacs mechanisms, instead of the big override it currently is.  It may be a bit more tricky, but it will be merged later, not before November.  If you're interested, [begin reading here](https://github.com/alphapapa/outshine/pull/19). ",11,43,"Outshine users: big changes ahead, some testing needed!"
"A ""stable release"" of [org-super-agenda](https://github.com/alphapapa/org-super-agenda) has finally been tagged.  From now on, it will follow ""semantic versioning.""  

It also gained a few minor improvements recently, including that an info page is now included in the package for quick reference to the usage guide.",0,44,org-super-agenda 1.0
,10,42,A company front-end with icons
"I've spend the day berserk-coding on a bunch of features I had in mind for a while for the upcoming release of
[Emms](https://www.gnu.org/software/emms/) 5.0.

It should hit MELPA any minute.

In short:

- The [mpv](https://github.com/dochang/emms-player-mpv) backend has been merged.
- Opus tags can be read properly if `opusinfo` is installed.
- Info/Tag queries are an order of magnitude faster (customizable).
- Org-style TAB / SPC bindings: they cycle through the different levels of expansions.
- `emms-browser-move-up-level` is now interactive and bound to `^`.
- `emms-add-tracks` (bound to `<return>`) has been extended to add all tracks
  in the region.  It's also possible to use a numeric prefix argument to add
  that many tracks.  The point now moves forward so that you can keep pressing
  `<return>` to add a series of tracks.
- Use the new `emms-browser-remove-tracks` function to clean-up Emms browser
  manually.  (Call with a prefix argument to delete the associated files.)
- Or use the more radical `emms-cache-reset`.  (This won't delete any file.)
- The Emms browser tree now also uses `albumartist` instead of only `artist`.
- I've fixed an issue with cover thumbnails not always showing.
- I've fixed `emms-smart-browse` so that it does not cascade endlessly when a browser search is on.

For the newcomers, here is my setup (roughly):

	(require 'emms)

	(emms-all)
	(emms-history-load)
	(setq emms-player-list (list emms-player-mpv)
	      emms-source-file-default-directory (expand-file-name ""~/music"")
	      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
	      emms-browser-covers 'emms-browser-cache-thumbnail)
	(add-to-list 'emms-player-mpv-parameters ""--no-audio-display"")
	(add-to-list 'emms-info-functions 'emms-info-cueinfo)
	(if (executable-find ""emms-print-metadata"")
	    (progn
	      (require 'emms-info-libtag)
	      (add-to-list 'emms-info-functions 'emms-info-libtag)
	      (delete 'emms-info-ogginfo emms-info-functions)
	      (delete 'emms-info-mp3info emms-info-functions))
	  (add-to-list 'emms-info-functions 'emms-info-ogginfo)
	  (add-to-list 'emms-info-functions 'emms-info-mp3info))

	(defun ambrevar/emms-play-on-add (old-pos)
	  ""Play tracks when calling `emms-browser-add-tracks' if nothing
	is currently playing.""
	  (interactive)
	  (when (or (not emms-player-playing-p)
	            emms-player-paused-p
	            emms-player-stopped-p)
	    (with-current-emms-playlist
	      (goto-char old-pos)
	      ;; if we're sitting on a group name, move forward
	      (unless (emms-playlist-track-at (point))
	        (emms-playlist-next))
	      (emms-playlist-select (point)))
	    (emms-stop)
	    (emms-start)))
	(add-hook 'emms-browser-tracks-added-hook 'ambrevar/emms-play-on-add)

Let me know what you think!
",31,38,"Emms updates: mpv backend, opus, org-style bindings, performance boost and more!"
"I have a very specific question: what can emacs do that vim cannot?

I am destined to make emacs my new OS to improve productivity. I have been using vim for about 15 years now. I have seen all corners or vimscript and my vim config reads like prose. But then I hit the point where the plugins do 80% of what I want and the rest of the 20% requires me to patch upstream plugin code. No thanks.

I already made the switch to emacs, with evil-mode and my familiar vim mappings. And I have discovered that emacs provides fine tuning for about everything. I have severe ""editor OCD"" so if it doesn't work just right, I will end up tweaking for hours on end. For example, in org mode you can just set a var org-cycle-separator-lines that allows you to specify the amount of newlines between closed/opened folds/headings. Now that is the fine tuning I want.

But overall... what can emacs do that vim can't? Is it the fact that emacs really can be your OS, with org-mode, calendar, gmail, etc. right from within emacs?",114,41,"What emacs has to offer over over vim, besides evil and elisp"
,7,41,Debugging Emacs or: How I Learned to Stop Worrying and Love DTrace
"So there's tons of threads containging endless debates on the merits of emacs/vim compared to atom/vscode/sublim/etc.

They're usually 100% unbearable to read, because basically boil down to people wanting 

1) syntax-aware real-time error-checking
2) quick auto-completion
3) git-integration
4) integrated debugger

And sadly, ""emacs does not have any of these featues."" But obviously, mine does, with functionality that probably was surpasses most IDEs. Sure, my workflow took hundreds of hours to enable, and I still feel like I'm just getting started. But for those of you who are fine fine this, who have found helm, counsel, magit, org, avy, irony-mode, flycheck, projectile, git-gutter+, multiple cursors, eshell, tramp, dired, yasnippets, hydras, evil, semantic, company, lispy and all the other amazing packages.

I am asking you, who truly UNDERSTAND the emacs philosophy, what is YOUR take on Atom/vcode and their place in the hierachy? I just feel I am close to workflow zen and I'm struggling to see what switching would give me.

Have you guys tested them and went ""hey this IDE is pretty much as good as emacs, I may change one of these days""? If not, why not?",85,38,Can we have a thread were emacs afficionados discuss atom/vcode/sublime/etc?
,7,44,Org Jira - Bringing together org-mode and Jira.
"I'm starting to get into org-mode, and am wondering if anyone's got a good blog or otherwise educational resource to point me to. I know I can just read the emacs/org manual, but a more enjoyable exposition would be pretty cool ",18,39,Anyone got any good advanced org-mode resources?
,11,42,If you make themes for Emacs ...
,9,41,emacs-jit: Emacs with an Emacs Lisp JIT Compiler
,6,42,An Emacs Lisp implementation of Example Driven Development
,7,41,Emacs Org-mode - a system for note-taking and project planning
,3,44,A friend got an Emacs Flag and I'm just very happy. M-x open-door
"Having used Emacs for the past 6 months, the only part of my work that i haven't replaced was shell. I still use iTerm2.
My issues with shell-mode, multi-term, eshell .. etc are:
1) Clunky colors and weird cursor behavior when i use zsh and oh-my-zsh in my ~/.zshrc (agnoster theme).
2) Alot of shortcuts that i use such as Ctrl-R were available in some (but the mode wasn't convenient) or it wasn't and the mode was ok.
3) Lack of documentation and discussions according to my search about configuring shell to the level where it's usable.

Have you had similar experiences? do you use emacs whatever-shell-mode, or are you sticking to iTerm2 like me? Did someone write a better ""sensible-defaults"" for shell that work close to what iTerm2 can offer?",24,43,Emacs shell configuration for 2016?
"It is for NeoVim, but apparently like in case of Eclim it has a client and server part and an emacs client can also connect to the server. AFAIK IntelliJ is snappier than Eclipse, so it can be an alternative of Eclim, using IntelliJ as an excellent completion backend. If you know Elisp and think it can be useful then you may want to hook it up to company or some other completion backend and post your experiences.

https://github.com/vhakulinen/neovim-intellij-complete

Edit: looks like in addition to completion the intellij plugin also implements problems listing and fixing, and code smells too.",6,39,"New plugin which hooks into IDEA, Android Studio or other Jetbrains IDEs, so Emacs could use it for completion"
"Once upon a time, @mathpunk [wrote on Twitter](https://twitter.com/mathpunk/status/694405249042219008):

> The period key on my keyboard has come off This is a problem It means that when I talk online it sounds like I talk face to face I'm sorry

I [replied](https://twitter.com/howardabrams/status/694418313024176128) with a joke:

> Sorry… Have a few from my keyboard ………………………..

And [then another](https://twitter.com/howardabrams/status/694418074481496064):

> Quick, advise the new-line function to insert a period… #emacs ftw!

Since I know that @mathpunk uses Emacs, he asked for details. While I wasn't sure I wanted to attempt late-night Lisp Incantations on an iPhone, I came up with this code:

    (advice-add 'newline
                :before
                (lambda (&optional arg int)
                  (when (> (current-column) 0) (insert "".""))))

With [this follow-up](https://twitter.com/howardabrams/status/694421572174479360):

> You may have to resort to Unicode to insert that one period. ;-)
>
>     C-x 8 RET full stop RET

It must have scared him, since [he replied](https://twitter.com/mathpunk/status/694421778597175297):

> ok THAT is made up i'm certain, good day sir

I mention this story as it explains some strange and odd approaches to both solving problems, but in innovative ways.  Now, I'm looking for similar goofy, but technical wizardry that would be at the fringes of typical Emacs usage.

So what is yours?  Got any more ideas for me to stew on, and if so, perhaps I will collate and expand them for an entertaining talk at this years EmacsConf.",52,43,What's the weirdest thing you've done with Emacs?
,12,42,"Just heard that a company in Taiwan bought Sharp, and it reminded me of an old friend..."
,8,43,Realtime markdown preview as you type with Eww
Does anyone know what's going on with the effort to integrate Guile?  [It seems like progress has stopped](http://git.hcoop.net/?p=bpt/emacs.git).,48,43,Guile Emacs Status?
,11,37,New in Emacs 25.1: seq.el
"So, Helm is too heavy weight because it uses the header line and a source header line that can cost you 2 to 3 lines of screen estate in total. You want something that look like [this screenshot](https://camo.githubusercontent.com/51729e91b2aa7378bc54b7a8ce8ec597584a6ae1/687474703a2f2f692e696d6775722e636f6d2f6e3345776556332e706e67) of [grizzl](https://github.com/grizzl/grizzl)? Now you have it. With the current latest Helm, you can disable the header line in a Helm window with:
    
    (setq helm-display-header-line nil) ;; t by default

Then, you can turn off the source header line with:
    
    (set-face-attribute 'helm-source-header nil :height 0.1)

Helm window is too big? That's why you have `helm-autoresize-mode`: 
    
    (helm-autoresize-mode 1)

The resizing is too annoying and you only want the window to be less varied or even at a different fixed size rather than the default size? It can be done with:
    
    (setq helm-autoresize-max-height 30)
    (setq helm-autoresize-min-height 30)

Now, you have a Helm window that always takes 30% of your frame height.

One of the thing that annoyed me with Ido is that it is always at the bottom in the minibuffer and raise the mode line. If you are like me, you may want to open Helm window in the current window where point is in, so you don't have to move eyes far away from the upper-half of the window to the minibuffer. This is problematic if you have large monitor (i.e. 24 inches or above).

By setting this:

    (setq helm-split-window-in-side-p t)

Now, Helm always opens a small window right inside and at the lower half of current window. No more random Helm window!

This is [the end result](http://i.imgur.com/SeRjOiH.gifv).

**Update**: You may want to remove the header line for Helm command with only one source. For Helm command with multiple sources, the header line appears as a very thin line. This is fine, but if you want Helm to be a bit smart, that is, keep the full source header line when multiple sources and hidden when there's a single source, you can add the following function to `helm-before-initialize-hook`:

    (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
    (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
    (defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))
    
    (defun helm-toggle-header-line ()
      (if (> (length helm-sources) 1)
          (set-face-attribute 'helm-source-header
                              nil
                              :foreground helm-source-header-default-foreground
                              :background helm-source-header-default-background
                              :box helm-source-header-default-box
                              :height 1.0)
        (set-face-attribute 'helm-source-header
                            nil
                            :foreground (face-attribute 'helm-selection :background)
                            :background (face-attribute 'helm-selection :background)
                            :box nil
                            :height 0.1)))

Now, Helm appears as usual when there's multiple sources.",35,43,Lean Helm window
"I love Org Mode, but I haven't read all or even most of the manual. I just read this passage:

> Important: Scheduling an item in Org mode should not be understood in the same way that we understand scheduling a meeting. Setting a date for a meeting is just a simple appointment, you should mark this entry with a simple plain timestamp, to get this item shown on the date where it applies. This is a frequent misunderstanding by Org users. In Org mode, scheduling means setting a date when you want to start working on an action item.

I had previously had this misunderstanding. Now I don't, but I suspect I'm still misunderstanding / under-utilizing other parts of Org. What did you misunderstand or not know about for a long time? ",24,42,Org Users: What did it take you a long time to understand about org-mode?
,7,39,The awesome of web browsing with Emacs: Using Emacs as primary web browser
,2,41,Org-Mode Food List
,20,42,Emacs is Dead (translated from Japanese)
,15,41,Google Reader alternative for Emacs Ninjas
,5,43,Emacs Reference mugs are back!
,0,42,Emacs For OS X . com gets a new Mac Mini (a success story of David Caldwell tapping the help of emacs community especially those on Macs to help him buy a new emacs nightly build server). Congrats David.
"[Previous Offering](http://www.reddit.com/r/emacs/comments/fst37/i_designed_and_am_selling_limited_quantities_of/)

http://www.amazon.com/dp/B004N1TRLA/

Long story short, I have created an Emacs Mug! It is for sale on Amazon. It is also Fulfilled by Amazon, which means **free delivery** for those of you with Amazon Prime or if you order a total of $25 or more qualifying items. 

**All profits are going to the Free Software Foundation**. (I'm not making any money off of this). 

More information about the project located [here](http://www.rudzitis.org/refmug/). This is an open source mug so you're encouraged to download the source and make your own!",25,37,Buy a GNU Emacs mug and help raise money for the FSF!
,11,43,"""I have finally done the impossible: embedded a fully-featured web browser in Emacs."""
,7,42,[Live stream] Configuring Emacs [almost] from scratch
"Hello,

Continuing the series with 12th Video on configuring Emacs from scratch:

[https://www.youtube.com/watch?v=jJhePiH\_8o4](https://www.youtube.com/watch?v=jJhePiH_8o4)

&#x200B;

This one is having demo of 2 things:

1. adding org contrib to the repo (I use taskjuggler for exporting the effort palnning & stuff; org-export-taskjuggler is shown).

2. some keybinding for paredit is shown.",2,41,Configuring Emacs from scratch -12 : (org contrib package repo)
,16,42,A fast Org tangling solution using Nim
