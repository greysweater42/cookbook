body,comms_num,score,title
,58,796,Priorities
,46,724,I know Vim Fu
,265,686,"I am Tim Pope, crafter of plugins. AMA."
,30,579,I'm surprised this wasn't taken yet in California
"Well, it's the 25th anniversary of the creation of vim. There just a small mention in the news section of http://www.vim.org/ but I think it's nice to have a small celebration anyways.

Happy editing everyone.",42,512,Today is the 25th birthday of vim. Happy editing everyone.
,53,477,Problem solved
,31,477,This sums up vim for me
,186,466,Upgraded my git for windows client and was disappointed to see this note
,11,452,"It was a dark and stormy night.,. And only pico was installed!"
,100,449,Vim 8 Release
,108,440,Alright gonna learn Vim properly this time
,100,429,The struggle is real.
,29,428,Vim’s Registers
,21,415,Anyone have this poster and want to sell it to me?
,88,407,When Vim leaves a trail
,30,405,Vim wallpaper to quickly peek at with Show Desktop gesture when unsure [2560x1600]
,125,392,"Can't believe this is regular old VIM 8.0 , on SSH (!), looking so sexy"
,31,387,Dat moment when you customize vim
,20,383,"First conversion. Finally, he is woke"
,31,385,i create open source related pics and upload in high resolution for free usage. this is the vim print in playing cards style. the links to github for hi-res are in the comments.
,18,363,one of us
"Hey everyone,

Today I participated in an IBM coding competition at my university. It was a 3 hour long competition with 19 teams competing having a max of 3 people per team. The environment we were given was a Unix VM, with eclipse(java) and PyCharm(python)(those were the only two languages we were allowed to use for the competition) preinstalled for development. I thought screw those options and fired up one terminal for using VIM and a second terminal for compiling and executing my java code. My team was doing good, and we were just doing our thing. The competition ends, and everyone goes to get their well earned pizza break before the awards ceremony.

We wrap up pizza break and they have us come in for the awards

before handing out the rewards, they wanted to hand out prizes for honorable mentions(cool things they noticed during the competition and wanted to reward)

The first one was best team name

The second one was for a team that decided to communicate with another team for communicating and sharing ideas.

Lastly, they handed out a prize to the team for going old school and using VIM and the terminal for coding(which was my team)

It felt really good to be recognized for using VIM, and it makes me ever so happy I decided to start learning the text editor.

Lastly, my team ended up placing 3rd in the competition and got some rewards for that too, so I have to say it was a good Saturday.

This is an awesome community, thanks for letting me share my story with you guys :)

Edit:

proof(the cup was the extra award for using VIM) https://imgur.com/a/uzxSb

'RNG' was my team name and I would also like to thank J and A for being awesome teammates that both contributed a ton for making our success set to true.

",72,357,Got an award for using VIM today
,97,344,"I'm new to vim and, Life is so much easier now. And Faster. Day 12. #vim"
,94,336,The most important key on the keyboard :)
,94,342,"Apparently, anybody using Vim in India is a top engineer."
,69,328,Vim is moving to GitHub
,56,334,My mechanical keyboard tribute to my love for Vim
,102,332,neovim
,14,323,One of us at Kroger!
,67,321,Vim keyset.
,92,315,Neovim first public release! 0.1.0
,36,312,"Since I put this on the door of my toilet, my Vim skills have increased exponentially"
,14,303,vim cheatsheet desktop wallpaper
,10,292,The best explanation on registers I've read so far
,100,292,Vim 8.1 released
,30,289,Emacs: now with four times more Satan than the other leading brand.
,39,280,"My boss is leaving today, so I'm giving him a Vim-themed mechanical keyboard as a farewell present!"
,28,277,The Hottest Editors
,70,279,"Pickachu - A Color, Date, and File chooser for Vim! (Linux)"
,34,275,Drew is back with new Vimcasts!
,148,275,Neovim now has a full :terminal emulator mode. I love what it does for my workflow.
,32,272,Vim Tips & Tricks
,79,268,"My friends and I just released Vim Awesome, a new directory of Vim plugins"
,22,266,Gotta love colours
,39,264,This is my favorite vim cheat sheet. Does anyone know who created it?
,81,263,Linuxquestions.org Text Editor of the Year - vim (28.32%)
,21,261,"I'm the furthest thing from being able to make art, but I smile when I use this cup"
"I can barely read a single thread without some ""real vim user"" scolding someone about using plugins.

If someone uses plugins blindly, without consideration of the idiomatic vim way to solve their problem, then yes, by all means scold them.

But please don't forget that there are many of us who use plug-ins quite conscientiously.

Some of us don't give a fuck how lean our vimrc is. What an arbitrary metric. I care about stability/speed/maintenance/etc. all of which are entirely possible with responsible plug-in usage.

Some of us know we can ""do without a plugin"" with some vim scripting of our own. It's pretty fucking obvious. In the same way most software can ""do without"" third party libraries. Doesn't mean it's a beneficial fucking decision in any way, often the contrary.

Some of us don't care how many dependencies we have. We are comfortable depending on things out of our control. Not because we are naive, but because we weigh the consequences BEFORE we install them, and value convenience rather than paranoid reassurance.

Just drop the condescending attitude which often amounts to ""I don't value this plugin so you shouldn't either"".",132,259,Please stop with all this plugin shaming
,48,254,How to use friendship.js
,71,256,Vim is moving to Github
,38,252,Had to implement my first love into my second <3
,24,248,Vim Airline
,22,251,On Vim and Hell
,28,246,Vim Cheatsheet - Everything you should know in one single file 🚀
"Certainly I save sometime repeating commands and using macros, but that alone wouldn't justify spending time mastering this text editor.

Being able to do everything without moving too far away from the homerow is the real reason why I use Vim. Combine that with a keyboard\-based window manager and browser and you get a very soothing programming experience. I'll leave my mouse for activities such as image editing, 3D modelling and music production.

Of course, being avaliable by default on Unix systems and running in terminal are also big pros. But comfort is what makes me stay.

What do you think? What is your main reason for using Vim?",109,245,"I don't use Vim because it's faster, I use it because it's comfortable."
,26,238,Anyone here use vim?
,34,241,Vim Exit% Speedrun [WR - 2.50:13]
"I've been managing [ALE](https://github.com/w0rp/ale) for a while, and it's been pretty fun. I and a lot of other people have written some Vim plugin code which has been useful for a lot of people, and so the usage of the plugin has grown considerably. Up to this point, I've been the only GitHub user with the access rights to manage issues, merge pull requests, etc. I'm thinking about changing that.

I just got (sort of) back from an Easter holiday where I put my emails to one side, and I noticed that I've got at least 32 emails with associated GitHub issues and some pull requests to look at. If I work for a few hours, I might get through a good few of them. During any time where I'm away, the issues aren't really being looked at, and nobody is merging the pull requests. I think the time has come to seek out some help from someone who feels like helping with the management of a free software project.

I've been reluctant to ask for this kind of help openly before, because it's hard to ask strangers for help, and to trust strangers to help manage a project in a way that I'd find to be agreeable. I quietly wrote three simple requirements on my wiki page a while ago, and I think what I wrote is still applicable, so I'll repeat them here.

* ""Do you know your way around VimL?""
* ""Do you like this plugin, and want to help?""
* ""Are you generally an okay dude or dudette?""

If you can answer ""yes"" to the above three questions, and you're interested in contributing, then please send me a message. Apologies for the advertisement on the Reddit board, but I couldn't think of any other way to make this kind of announcement where people would see it. That is, outside of a newsgroup, and I've never been a newsgroup kind of guy.",35,237,A call for ALE contributors
,69,239,12 tips on how to boost your Vim productivity
,75,236,Some lesser-known vim tips from 8 years of use
,32,230,vim-db: Modern database interface for Vim by tpope
,68,230,~26% of the Stack Overflow Developer Survey 2016 respondents use vim
,35,229,:syntax on
,171,231,Vim is slated to hit version 8
,30,226,Writing in Vim
,140,229,Why Kakoune — The quest for a better code editor
,58,226,N00b learning to use vim
,209,227,Apple just destroyed the escape key.
,47,228,Talk I gave on going mouse-less with Vim / Tmux / Hotkeys a year ago
,23,225,Did you know you could pipe vim into other utilities? (like lolcat)
,22,222,The Rap on Vim's Registers
,44,221,Stack Overflow: Helping One Million Developers Exit Vim
,116,216,Geoff's site: Why Neovim is Better than Vim
,76,215,"NeoVim 0.2.0 has been released, now with Windows support and platform binaries!"
,12,212,Github lists Tim Pope as a placeholder in the advanced issues search
,32,211,"Vim User, Year 6"
"There are two ways to interact with this thread, you can either:

- Post your built-in replacement for a popular plugin
- Request help finding the built-in replacement for a specific plugin

Thanks to /u/Hauleth for this idea!",248,211,“You Ain’t Gonna Need It”: Your replacement for popular plugins
,30,210,4chan on editors [xpost /r/linux]
,55,207,"Friend asked me to show some vim tricks, decided to start recording some small gifs for her"
,23,206,The power of diff [Vimways 1/24]
,34,208,Where Vim Came From
"[romainl](https://www.reddit.com/user/-romainl-) and I are putting together a Vim advent calendar for this holiday season, hopefully with the help of you wonderful people and the #vim community on Freenode.  If you are unfamiliar with the concept of an advent calendar, here are some examples: [https://adventofcode.com](https://adventofcode.com), [http://perladvent.org/2017/](http://perladvent.org/2017/), [https://github.com/patrick91/awesome-advent](https://github.com/patrick91/awesome-advent).  The domain will be announced closer to December.

So, what are we looking for from **YOU**?  We are looking for 22 (or more) contributors to help us fill out the calendar.  The format is fairly simple:

* A little about yourself (system administrator, developer, professional blogger, etc)
* Link to where people can find you online (twitter, fb, personal page, reddit profile, etc)
* Article about your favorite Vim feature or plugin (and obviously why you love it)
* Screenshots encouraged
* Contributed with CC 4.0 license: [https://creativecommons.org/licenses/by/4.0/](https://creativecommons.org/licenses/by/4.0/)

The schedule is fairly laid back:

* Sept 1st: at least 22 contributors signed up, hopefully a bit more because life happens
* Oct 1st: finalization of topics (no overlap) and light sketch of article
* Nov 1st: significant work shown (article content) and starts of integration into site
* Nov 15th: final versions checked in / handed over with proper license included
* Nov 20th: domain goes live
* Dec 1st: first article goes live

We are flexible in how you contribute, if you are familiar with github, you can contribute directly to the project on Github.  That is the easiest way for us, but we don't want to exclude anyone.  If you are interested in contributing, we will find a way to work with you, from Github to email.

We might also consider other types of content, from cute art to videos -- if you are interested in getting involved and contributing just let us know.  I look forward to hearing from you publicly on this thread or privately, just message me.

Thanks!",57,207,Vim Advent Calendar - Call For Authors
"Q: How do you generate a random string?

A: Put a Windows user in front of vi, and tell them to exit",18,203,Finally found a vim joke!
,18,206,Accidentally tried to create more browser tabs than atoms in the observable universe
,38,205,You don’t need more than one cursor in vim
,15,203,Before seeing the posts here I actually taught this subreddit was solely dedicated to this fictional beverage.
,16,208,:set lemons
,63,200,Bram Moolenaar: Plans for Vim 7.4
,29,201,Special key caps for my favorite hjkl
,11,200,Twitter account for vim tips in gif form.
"Hi, I'm [Shougo](https://github.com/Shougo).  I have created/maintained Vim plugins(unite.vim, neocomplete, neocomplcache, vimfiler, vimshell, etc).
I have sent some patches for vim_dev.

I have read [Tim Pope's AMA](http://www.reddit.com/r/vim/comments/267vrv/i_am_tim_pope_crafter_of_plugins_ama/).  And it seems good.
I created this AMA for Vimmers.

Note: My English level is very poor.  My main/favorite language is VimL.  I cannot long reply, sorry.

Time limit: ~~Almost UTC 5/26 0:00  Though it may be changed.~~ -> ~~UTC 5/26 12:00~~ -> finished

~~Edit in UTC 5/26 0:00 : Sorry, I have not much time to response them.  So, I extended the limit.~~

Edit in UTC 5/26 12:45 I responced to most of questions and finished the AMA.  Thank you for your questions!",126,199,"I am Shougo, Dark Vim Master / 暗黒美夢王 (Uncock Vim Awe), Ask Me Anything?"
,26,199,vim-anywhere
,19,194,This is how I feel when I sit down to use vim.
,44,193,Vim-centered VSCode-like GUI editor (powered by Neovim)
,39,191,New color scheme gallery for Vim
,47,195,"How I Take Notes with Vim, Markdown, and Pandoc"
"It just makes sense, you know, that the cursor has to be within the object you are trying to change for it to work. But no, vim actually hunts down the line and and looks for the first thing in ""quotes"" to change. Same goes for the other change inner/outer commands.

EDIT: As /u/-romainl- points out this only applies to identical characters in vanilla vim, and can be extended to include brackets by the [targets.vim](https://github.com/wellle/targets.vim) plugin suggested by /u/Popeye_Lifting",25,192,"I can't believe it's taken me this long to realize that you don't have to be between the quotes to use ci"""
,12,192,"Reading ""Practical Vim."" Probably the best figure in the book so far."
,33,191,A vim cheatsheet built straight into your keyboard's keycaps
,97,192,Why Atom Can’t Replace Vim
,65,188,Made an alias for an all-to-common mistake.
,7,189,Neovim 0.3 released
"If you add a line to your bashrc that says ""set -o vi"" then you can push escape to enter a vi-featured normal mode



Yep, that's it.  All the awkward text manipulations I had to do over the last several years, unnecessary.  No plugins, nothing to build or download, just three words in the config file.",66,186,TIL bash ships with a vi mode
,19,186,Now that's a new way to exit vim
,9,190,Google's vim plugins
"Hi there!

Might be useless to share this story here but hey, I'm sort of proud.

I started using Vim in college but had to stop afterward as my first job was on Windows Visual Studio and the version manager did not see work done outside of it at the time.
Was able to switch to Vim again when I started a PhD and continued when I got my current position.

So, here I am, using Vim as my only text editor for 4 years in a row now.
Most of my coworkers made fun of me because of my Vim/Tmux workflow but it did not matter: I was efficient at my task and that's the only thing I care about.

Last Friday, one of them came to asking for some code related stuff and, of course, I fired up Vim and, of course, he said a joke about it.
While discussing, I edited some code lines at his will.
At first, he didn't even see it was done.
But when he asked me to apply a simple modification at multiple places and saw me doing it in a few keystrokes he paused for a few second and said something like: ""OK, you definitively have some magic keybindings here.""
I answered him it was simply vanilla Vim commands with a smile but was laughing on the inside.

So yeah, I'm proud to say that, at least one of my coworkers won't be kidding about Vim anymore because of a simple but efficient real-life demonstration of its power.",86,185,Vim pride
,56,183,I forgot to escape forward slashes in my code on one line. So I typed this command to fix it.
,10,190,Best cheatsheet ever
"TL;DR: Select several lines containing 0 and type `g<C-a>`.

I often need a column of incrementing numbers.

In the past, I've used [vim-speeddating](https://github.com/tpope/vim-speeddating)'s blank incrementor which lets you select a line with a number and several lines without and it fills in the blanks with incrementing numbers. But speeddating needs the numbers to be 'words', so code like this doesn't work:

	pos_0.x += delta_0;
	pos_0.x += delta_0;
	pos_0.x += delta_0;
	pos_0.x += delta_0;

I'd have to insert spaces around the 0s:

	pos_ 0.x += delta_ 0;
	pos_  .x += delta_  ;
	pos_  .x += delta_  ;
	pos_  .x += delta_  ;

Which is annoying because I'm usually copypasting the same line to make a sequence.

But Vim now includes `g<C-a>` to accomplish this task! Instead of blanks, it looks for the same number on each line. It also doesn't require block selection.

Combined with [textobj-word-column.vim](https://github.com/idbrii/textobj-word-column.vim), I can `vicg<C-a>` to convert that first code block to:

	pos_1.x += delta_0;
	pos_2.x += delta_0;
	pos_3.x += delta_0;
	pos_4.x += delta_0;

For more info:

	:help v_g_CTRL-A

Hat tip to /u/chrisbra10 for [highlighting this new feature (among others)](https://www.reddit.com/r/vim/comments/a0q8dv/id_like_to_update_to_modern_vim_practices_what/ealltrc/) (and for a long history of contributing to vim).
",32,183,TIL: g<C-a> for creating a column of incrementing numbers
"##Vim Essentials
At the time of writing this, I've been a Vim user for almost 3 month now, and truly deeply love. And a passionate, burning love it is, no platonic relationship. As such, I have tried to intensify and deepen my knowledge as much as I can, reading all the articles, watching all the videos and following all the tutorials. Now, as I feel at home, I started to proselytize my fellow nerds, as all Vim users do, and noticed that I keep linking to the same spread out articles, videos and tutorials. So I
want to create such place, mostly for my own convenience for future missionary work, and as a starting point for beginners.
**Redundancy should be avoided**, for example, multiple tutorials explaining the very basics are only confusing, only the very best should be linked (I realize this is strongly biased). Only one entry per topic, per medium. So, if you disagree with a choice, **please elaborate why your alternative is better**.
It would be great, if you, dear reader, could help supply valid content to fill this post. **I want this to be a colaborative work from this subreddit**, as such it is *work-in-progress*.

This should for now be limited to a certain type of content:

- essential reads, which every vim user should have read at some point, explaining a concept, introducing a hidden feature, etc.
- essential(-ish?) plugins, which you *literally* can't live without, improving base vim features. Lots of [tpope](https://github.com/tpope)
- essential ressources, platform specific
- maybe exceptionally documented or maintained dot-file repos, which may serve as an example

Things that do not belong:

- one-line reddit commments hinting at a certain feature or mapping, without extensively explaining it
- exhaustive lists of various plugins which absolute necessity is debatable
- colorscheme or font choices

Note: As an alternative (or in addition) to this list, use 

- [mhinz/vim-galore](https://github.com/mhinz/vim-galore), a well maintained and authored ressourcelist.

##SETUP
Medium|Description|Link
:--|:--|:--
Website|vim homepage|[vim.org](http://www.vim.org/download.php)
Repository|Official vim github|[github.com/vim/vim](https://github.com/vim/vim)
vimrc|vim-sensible, a simple baseline vim config|[github.com/tpope/vim-sensible](https://github.com/tpope/vim-sensible)
Website|Neovim, strong out-of-the-box vim|[neovim.io](https://neovim.io/)
#Windows
Medium|Description|Link
:--|:--|:--
Binary|x86,x64 (stable)|[sourceforge.com/projects/cream/files/vim](https://sourceforge.net/projects/cream/files/Vim/)
Binary|x64 (stableish)|[bintray.com](https://bintray.com/veegee/generic/vim_x64)
Repository/Binary|x84,x64 (nightly)|[github.com/vim/vim-win32-installer](https://github.com/vim/vim-win32-installer)
Binary|x86,x64 (nightly)|[tuxproject.de/projects/vim/](https://tuxproject.de/projects/vim/)
#Linux 
#Mac
Medium|Description|Link
:--|:--|:--
SO-Post|""Gvim or MacVim?""|[stackoverflow.com](http://stackoverflow.com/questions/21012203/gvim-or-macvim-in-mac-os-x)
Repository|MacVim|[github.com/macvim-dev/macvim](https://github.com/macvim-dev/macvim)

##THE BASICS
Medium|Description|Link
:--|:--|:--
Video|Derek Wyatts vim introduction|[vimeo.com](https://vimeo.com/6999927)
Article|vim basics|[dititalocean.com](https://www.digitalocean.com/community/tutorials/how-to-use-vim-for-advanced-editing-of-plain-text-or-code-on-a-vps--2)
Shell|`$ vimtutor`, getting started, ships with vim|-
Game|Vim-adventures, learn vim interactively|[vim-adventures.com](http://vim-adventures.com/)
Article|Basic vimrc explained|[vim.wikia.org](http://vim.wikia.com/wiki/Example_vimrc)
Repository|The patient vimmer, a written guide|[github.com/romainl/the-patient-vimmer](https://github.com/romainl/the-patient-vimmer/)
Video|Thoughtbot: Improving vim speed|[youtube.com](https://www.youtube.com/watch?v=OnUiHLYZgaA)
Resource|vim cheatsheet|[paulherron.com](http://paulherron.com/blog/vim_cheatsheet/)
Image|vim cheatsheet, made by [vimchatsheet.com](http://vimcheatsheet.com/)|[shopify.com](https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png)
Article|Search and replace|[usevim.com](http://usevim.com/2012/03/30/search-and-replace/)
Article/Video|Accessing the system clipboard|[vimcasts.org](http://vimcasts.org/episodes/accessing-the-system-clipboard-from-vim/)

##INTERMEDIATE
Medium|Description|Link
:--|:--|:--
Video|Drew Neil showcase, [vimcasts.org](http://vimcasts.org/) guy|[vimeo.com](https://vimeo.com/53144573)
Article|7 habbits of effective text editing|[moolenaar.net](http://www.moolenaar.net/habits.html)
Article|You don't need more than one cursor in vim|[medium.com](https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db#.cesoa4dvn)
Article|12 tips to improve productivity|[sheerun.net](https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/)
Article/Video|Using named registers|[vimcasts.org](http://vimcasts.org/episodes/using-vims-named-registers/)
Article/Video|Pasting from insert-mode|[vimcasts.org](http://vimcasts.org/episodes/pasting-from-insert-mode/)
Article|The power of `:g`|[vim.wikia.com](http://vim.wikia.com/wiki/Power_of_g)
Article|Regex introduction|[vimregex.com](http://vimregex.com/)
Webapp|test regex patterns (not vim-flavoured though)|[regexr.com](http://www.regexr.com/)
Article|Writing prose in vim|[drbunsen.com](http://www.drbunsen.org/writing-in-vim/)
Article/Video|Using spell check|[vimcasts.org](http://vimcasts.org/episodes/spell-checking/)
Article/Video|Comparing buffers with `:vimdiff`|[vimcasts.org](http://vimcasts.org/episodes/comparing-buffers-with-vimdiff/)
Article/Video|arglist introduction|[vimcasts.org](http://vimcasts.org/episodes/meet-the-arglist/)
Article/Video|Using `:argdo` to manipulate multiple files|[vimcasts.org](http://vimcasts.org/episodes/using-argdo-to-change-multiple-files/)
Article/Video|Project wide search with `:vimgrep`|[vimcasts.org](http://vimcasts.org/episodes/search-multiple-files-with-vimgrep/)

##ADVANCED
Medium|Description|Link
:--|:--|:--
Resource|Extensive (slightly overwhelming) list of regex patterns|[zzapper.co.uk](http://zzapper.co.uk/vimtips.html)
Article|Extensive Article on Vimscript (VimL)|[learnvimscriptthehardway.stevelosh.com](http://learnvimscriptthehardway.stevelosh.com/)
Video|Showcase of command-line-only editing|[vimeo.org](https://vimeo.com/15443936)

##LANGUAGE/TOOLCHAIN SPECIFIC
Medium|Description|Link
:--|:--|:--
Video|Thoughtbot: vim for Rails Developers|[youtube.com](https://www.youtube.com/watch?v=9J2OjH8Ao_A)
Article/Video|5-part-series on using [tpope/fugitive](https://github.com/tpope/vim-fugitive) as a git wrapper|[vimcasts.org #1](http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/) [#2](http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/) [#3](http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/) [#4](http://vimcasts.org/episodes/fugitive-vim-browsing-the-git-object-database/) [#5](http://vimcasts.org/episodes/fugitive-vim-exploring-the-history-of-a-git-repository/)

##PLUGINS
*may not be considered essential*

*for now this lists plugins which greatly improve vanilla features,*
*without interfering with the out-of-the-box workflow*

Name|Description|Link
:--|:--|:--
vim-plug|Minimalist Plugin Manager|[github.com/junegunn/vim-plug](https://github.com/junegunn/vim-plug)
targets.vim|Provides additional targets for motions|[github.com/wellle/targets.vim](https://github.com/wellle/targets.vim)
vim-surround|Provides mappings to manipulate surrounding objects|[github.com/tpope/vim-surround](https://github.com/tpope/vim-surround)
vim-repeat|Greatly improves scope of repeat mapping (`.`)|[github.com/tpope/vim-repeat](https://github.com/tpope/vim-repeat)
matchit|`%` now matches more than just single characters|[github.com/vim-scripts/matchit](https://github.com/vim-scripts/matchit.zip)
visualstar|`*` works in visualmode|[github.com/thinca/vim-visualstar](https://github.com/thinca/vim-visualstar)

##HOW TO GET HELP
Medium|Description|Link
:--|:--|:--
Wiki|HTML version of vim `:help`-files|[vimhelp.appspot.com](http://vimhelp.appspot.com/)
Article|How to join the #vim IRC channel|[vim.wikia.com](http://vim.wikia.com/wiki/Vim_on_Freenode)
Help|Vi Stackexchange|[stackexchange.org](http://vi.stackexchange.com/)
Google Group|Vim-use mailing list|[groups.google.com](https://groups.google.com/forum/#!forum/vim_use)
Google Groups|Vim-dev mailing list|[groups.google.com](https://groups.google.com/forum/#!forum/vim_dev)

##RESOURCES/MISC
Medium|Description|Link
:--|:--|:--
Article|Unix as IDE|[blog.sanctum.geekz.nz](http://blog.sanctum.geek.nz/series/unix-as-ide/?)
Resource|Popular vim Plugins|[vimawesome.com](http://vimawesome.com/)
Resource|Github Colorscheme crawler|[vimcolors.com](http://vimcolors.com/)
Reddit|Weekly Vim Tips And Tricks by /u/cherryberryterry|[reddit.com/r/vim/](https://www.reddit.com/r/vim/search?q=Weekly+vim+tips+and+tricks&restrict_sr=on&sort=relevance&t=all)
Website|Collection of vimrc snippets|[vimrcfu.com](http://vimrcfu.com/)

*I will edit this as I go*",64,190,"Vim Essentials (Articles, Videos, Ressources)"
"Greetings, /r/vim!

Last month, you all [helped me compile](http://www.reddit.com/r/vim/comments/2ip7e4/heres_your_chance_to_ask_bram_moolenaar_a_question/) a list of questions for Bram Moolenaar. Bram got back to me with his answers, and I've published them [right here](http://www.binpress.com/blog/2014/11/19/vim-creator-bram-moolenaar-interview/). Take a look! :)

Thanks again!

-Alexis

PS I'll be giving Redis' creator, Salvatore Sanfilippo, the same 10-question treatment next. Have any questions for him?

PPS Who else should I interview?",34,182,Bram Moolenaar answered your questions!
,18,187,nvim -> :terminal -> nvim: maximum recursion depth exceeded
,40,184,rainbow_levels.vim: A different approach to code highlighting. [plugin]
,37,182,"Was looking at vim mugs, what kind of savage made this?"
,38,183,I begin all my keyboards with the essential keys
,96,181,MRW I discovered you can use Ctrl+[ instead of ESC
,36,184,An experimental mini-screencast in the form of a GIF - good? bad? want more? (Source code in comments)
,58,185,How I feel when someone sees me using Vim
"What have you learned about ways NOT to use Vim?

Top level posts will have one anti-pattern (or will be removed) so we can discuss them!

Thanks /u/iBurgerr for the idea!",325,181,Anti-Patterns: What Not To Do
,99,178,My vim screenshot business card
,77,180,The problem with Vim
"I am super surprised that everybody talks about Vim 8 but almost nobody mentions that...

- Bram Moolenaar did the last major version ten years ago

- The recent years of Vim's development were almost stalling

- Bram publicly questioned the Neovim team's efforts creating a fork and bringing new essential stuff like async to Vim—he even made kind of fun of them  

- After Neovim came out and has been developed at fast pace, Bram surprisingly presents Vim 8 with the stuff we wanted which before he decided against—all the stuff Neovim did and of course incompatible to the fork. 

Bram's decision on being incompatible should be challenged and discussed, would love to hear his thoughts. Since no money is involved, his decision feels even more awkward, why not welcome competition or potential contributors, being a team player, work together or merge? Or is it Bram's injured pride, the fear of getting irrelevant with some piece of ancient software?

Whatever 'meaningful reasons' Bram chose not to support a fork, now we are left with incompatible Vim variants which damage the entire Vim ecosystem. I guess that most distributions will package Vim 8 with their distributions, just because not everybody has followed all the happenings, and Vim 8 sounds like a solid choice, like going with the mainstream. So, Vim 8 might get the next standard and an awesome fork could die which I find sad. The Neovim team has been disrupting, they went ahead and it's a community developed software which is a huge differentiator to Bram's work and codebase of controversial quality.

What are your thoughts? Should we support both versions and should we write plugins for both or focus on one? Or is competition good and the Neovim team will deliver more and prove that still a community developed Neovim will outperform Vim in the long run?
 
Don't get me wrong, this isn't a rant, Bram created with Vim an fantastic piece of software—this is about the question how we should keep competition which helps the entire ecosystem so we don't end up with a dying fork and original Vim's development slowing down again for the next ten years.

One idea is that all distributions should either still package old Vim 7.x only to let people decide themselves or always package *both* Vim 8 and Neovim together. But how should we get there?


 
",160,174,About Vim 8 and how to keep the Vim ecosystem healthy
,57,178,A Year of ALE
,63,176,Fibonacci indentation for Vim
,45,176,Switch To Vim For Good
,39,174,"File preview with FZF, RG, Bat, and Devicons"
,71,173,And the text editor of the year is....
,33,171,"I'm sure it has been posted before but it never ceases to amaze me: Damian Conway, ""More Instantly Better Vim"" - OSCON 2013"
,28,171,The site hosting this great cheat sheet is gone. Does anyone know where it went? I'd love to have the PDF.
,39,170,Vim's learning curve
"https://github.com/whatyouhide/vim-gotham

I'm quite happy with the first vim colorscheme I made. What do you think?

It probably has some flaws here and there, but there's no better way to handle them than sharing its code here!

### Update
A lot of people wanted a 256 colors version. **OP delivers**!

The 256 colors version is now available in the same [repository](https://github.com/whatyouhide/vim-gotham). Be sure to `PluginUpdate|PlugUpdate|NeoBundleUpdate|whatever` to get the latest version.",97,167,"Gotham, a very dark vim colorscheme"
,55,172,Vim After 11 Years
,11,172,Two decades of productivity: Vim's 20th anniversary
,10,167,vim.org now completely on https
"I was shocked to see vim coming in as the 4th most widely used editor in the [2017 Stackoverflow developer survey](https://stackoverflow.com/insights/survey/2017#technology-most-popular-developer-environments-by-occupation).

I work in web development, Ruby, Javascript (React) and almost everyone I come in to contact with is using Sublime or Atom.

It's great to see there are still developers keepin' it real with vim.",82,172,Vim - The 4th most widely used editor
"[He said ""I'd do it""](https://twitter.com/tpope/status/464785453502435328), so let's get this scheduled!

**Status:** [It is done](http://www.reddit.com/r/vim/comments/267vrv/i_am_tim_pope_crafter_of_plugins_ama/)",19,169,Get Tim Pope to do an AMA
,29,172,From .vimrc to .vim [Vimways 3/24]
,65,170,Vim 7.4 released!
,199,169,What was the latest vim feature you've discovered?
,36,168,The Power of Recursive Macros in Vim
,6,162,Vim GIFs
,26,161,"""Modern Vim"" is out!"
"I just realized this today, and figured it may come in handy for others. Sometimes when I'm testing a more complicated regex of things I want to delete, I'll just use the search (/) and build while watching the highlighting to see what's being recognized. Then I hit enter and have to retype it as a substitute command, because :%s/typetypetype doesn't show highlighting while typing, but /typetypetype does.

It occurred to me today that since // means search for last search again, that s// might mean substitute over the previous search, and that s/// might just delete it. It turns out it does, so now I can just hit /complicatedregexhere, and once it's matching what I want, I just hit enter, then do :%s/// and enter to delete it all.",20,167,:%s///
"The relevant section from the help can be found at `:help 'incsearch'`. If you enable the options `'incsearch'` and `'hlsearch'`:

    set incsearch
    set hlsearch

... then all the texts matched by the regex you're currently writing on a search command line are highlighted, even before you validate the search by pressing Enter. IOW, the highlighting is constantly updated while you're writing your regex. If you don't want to enable `'hlsearch'` permanently, but still want to try this feature, the help suggests to install this autocmd:

    augroup vimrc-incsearch-highlight
      autocmd!
      autocmd CmdlineEnter [/\?] :set hlsearch
      autocmd CmdlineLeave [/\?] :set nohlsearch
    augroup END

It should temporarily enable `'hlsearch'` during a search. It seems that it doesn't preserve the state of `'hlsearch'`, so fwiw, I'm going to try this:

    augroup vimrc_incsearch_highlight
        au!
        au CmdlineEnter [/\?] call s:toggle_hls(1)
        au CmdlineLeave [/\?] call s:toggle_hls(0)
    augroup END

    fu! s:toggle_hls(on_enter) abort
        if a:on_enter
            let s:hls_on = &hls
            set hls
        else
            if exists('s:hls_on')
                exe 'set '.(s:hls_on ? '' : 'no').'hls'
                unlet! s:hls_on
            endif
        endif
    endfu

Here's the url of the [patch](https://github.com/vim/vim/releases/tag/v8.0.1238).

Edit:

Thank you very much [itchyny](https://github.com/itchyny) for the original [patch](https://groups.google.com/forum/#!searchin/vim_dev/incsearch%7Csort:relevance/vim_dev/zdp8W-6xUzg/PrqDpP7cilIJ), [haya14busa](https://github.com/haya14busa) for the final patch, [yegappan](https://github.com/yegappan) for adding the `CmdlineEnter` and `CmdlineLeave` events, and all people who send patches and pull requests to add features or fix bugs.",11,166,Vim 8.0.1238 adds highlighting of all matches while incremental searching
"Would it be beneficial to the community to have a weekly ""tips and tricks"" thread? If so, let's make this the first one!

How it would work:

* A new thread titled ""Weekly Vim tips and tricks thread! #{X}"" will be posted every week
* Each new thread will include a link to the previous thread
* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",133,163,Weekly Vim tips and tricks thread! #1
,65,161,/g/ gets it right
,56,157,"Apple commit in Darwin XNU calls swap files ""vim turds"""
,185,161,Vim adds :terminal
,54,161,"Went to a computer museum, found Ctrl key where I map mine for vim"
"I just started seriously using it and I am just blown away. It's amazing in the shell, but fzf.vim in particular is just incredible. Especially the `:Lines` command, which lets you fuzzy search through every line in your open buffers and jump to it. Git commits, command-line mode commands, help tags (waaaay better than `:helpgrep` imo).. I can't speak highly enough of it. And it is so damn fast.

I kind of get why I've seen some people wanting to fzf everything they do.. it's addictive. I generally try to avoid a lot of dependencies with my vim setup, but I think this will be my exception (though I am considering keeping CtrlP as a fallback if fzf is not available)",109,157,I can't believe how good fzf is
,45,158,This picture says it all. Thanks to /u/chrisbra10!
,115,157,"If you could have only ONE plugin installed, what would it be?"
,14,156,I was combing the Vim docs when all of a sudden
,28,152,Coming Home to Vim
,9,152,The Last Statusline For Vim
,60,156,Tmux and Vim - even better together
,23,154,Vim is fun!
,55,159,Vim creep
,35,154,As of 8.1.0360 Vim comes with an improved diff algorithm included and does not need to shell out anymore
There are a lot of vim plugins that I regret taking too late.  For me among them is easy motion.,137,158,What is the most underrate vim plugin you use?
,12,150,Was leaving the Village Inn when I spotted this. The name of the restaurant was not the first thing that popped into my head.
,14,157,Introduction to Vimwiki
,14,154,The Teachings of Vim Master Wq
"Wow **it's been 4 years** since [the last Vim Porn screenshot post](https://www.reddit.com/r/vim/comments/m2k76/vim_porn_that_is_show_me_your_vim/)!

*So how are people's Vim setups looking in 2016?*

> Please provide links to your `.vimrc` (or equivalent) so other people can replicate your setup.


Here's my screenshot: [click here to see my vim :)](http://i.imgur.com/G0rh09G.png)

Here are my dotfiles: [https://github.com/F1LT3R/dotfiles](https://github.com/F1LT3R/dotfiles)",235,152,vim porn 2! (post your vim screenshots)
"Hi everyone,
I'm a fan of the monokai colour scheme, but couldn't find a VIM plugin that I thought did it justice. 'Molokai' is the generally accepted choice, but it, and most other colorschemes just like it, only apply just the basic colour groups and that's it. When looking at Sublime text's monokai and the syntax groups, there are a few really nice highlighting decisions they made that make it just work. Especially for javascript development. So I decided to make a modern monokai colorscheme for VIM. Introducing vim-monokai-tasty!
Install it with your favourite plugin manager ->

https://github.com/patstockwell/vim-monokai-tasty

- Is both gui- and cterm-supported
- Includes a matching lightline.vim theme
- Includes a matching vim-airline theme
- Includes a matching iterm2 colour theme
- _italics_ flag to switch on italics in supported terminals
- Improved highlighting for `ctrlp`, `NERDTree`, and `*.vim` files

Monokai or die",21,148,New Monokai colorscheme for VIM (Inspired by Sublime Text's version) with airline and lightline theme support
,56,151,You can tell a man by his keyboard
"Basically, when you search for ""vim cheat sheet"" on DuckDuckGo, it pulls up a [comprehensive list of commands for vim](https://duckduckgo.com/?q=vim+cheat+sheet&t=ffab&ia=cheatsheet&iax=1). At a quick glance, it seems that it has everything you would need. Does anyone notice anything of importance that should be added?

DuckDuckGo can also pull up cheat sheets for other things as well, such as gdb and C++.",34,149,TIL DuckDuckGo has a Vim cheat sheet.
,45,148,vim is sexy
,40,149,Ten Years of Vim
"I'm not sure how I used vim for years without learning this.

http://vimdoc.sourceforge.net/htmldoc/motion.html#CTRL-O",21,150,TIL: Use Ctrl+O and Ctrl+I to navigate cursor position history
,25,151,"Why Vim, An '80s Text Editor, Is Still The UI Of Choice For Power Users"
,34,146,Check out my vim color theme
,43,143,Somebody has invented a foot pedal for going into insert mode and back
"The following is a power 100% unique to vim's ex mode; you can't do this using editor commands in any other editor -- it usually requires writing a script in editors like Emacs, and you literally can't do it at *all* in unscriptable editors, you just have to do such things slowly and laboriously, manually.

This is powerful enough to drive editor choice, if one embraces it.

This post is intended to motivate people to learn more about ex-mode by showing its power, not to serve as a tutorial to such a large subject.

Ex mode allows doing *arbitrarily* *complicated* repetitive edits to long blocks, a fact which is nearly universally unknown even with people who know all the ex-mode basics for doing *simple* edits.

The disadvantage is that the commands required are complicated, a little hard to debug, and nearly read-only, but that is totally outweighed in the cases where it can save hours or even days of manual editing.

Small example. Say that you're editing a list of page numbers in a table of contents, and the page numbers are all off by 22 (this actually just happened to me in real life, which prompted this post).

The key magic is that one can create a single-line compound command by separating individual ex-mode commands with '|', and then using the resulting compound command on each of many lines via the ex-mode 'g' global command.

(For the uninitiated: vi/vim grew out of a line-oriented non-screen-oriented editor called ex, and vim still has its complete set of ex editing commands in ex mode, that are unlike the usual vim commands. I don't have the time to do a regular expression intro, nor an ""intro to ex-mode for people who previously haven't noticed that it exists let alone that it is worth using"", does anyone have a pointer for people?)

So from here we'll assume the reader knows the basics of both regular expressions and of vim's ex-mode.

Also the bash shell is used in this particular example, although the technique does not generally require the shell. It does however indicate the vast potential of using external programs in combination with editing.

Let's say our text looks like this:

    A......Page 23
    by John Smith
    B......Page 73
    by Jane Doe
    C......Page 131
    by Alice Grey

And so on...but these are wrong -- they actually should start at 1, so each page number needs to have 22 subtracted.

I had 52 such lines, so the prospect of doing 26 edits, each one error prone due to mental arithmetic, seemed do-able, don't get me wrong, but annoying enough to prompt me to use the ex-mode approach, since I'm used to using it.

In other cases I have been faced with tens of thousands of lines of edits vaguely like this, which would take taken literally days or more to do by hand, in which case some form of automation is absolutely necessary, and this ex-mode approach avoids the need for writing a small software script -- which itself would be a nuisance and error-prone and vastly less efficient in terms of my time than ex-mode.

Indeed this approach can make the difference between deciding to do something with a few minutes of complicated editing, versus deciding that the task is just too difficult or time consuming to do at all.

So here goes, here's how to write an admittedly-unreadable but extremely effective ex-mode single compound command for that.

First I vi-mode mark the end of the text (mA to mark it with A), then I use ex-mode global command "":.,'ag/..../"" where "":"" starts ex-mode, "".,'a"" is a range of lines from the cursor to mark A, ""g//"" is the global command, and ""..."" is the global command's regular expression to choose which lines to apply following commands to, skipping any other lines (the ""by ..."" lines in this example).

We want just the lines that start with a capital letter followed by some dots, so that regex is /\^[A-Z]\\.\\.\\./ -- regexes are infamously unreadable but are second nature with enough practice.

We are going to transform each such line into a shell command to do arithmetic while retaining the non-numeric text in those lines. So each line transformed into a shell command will look like:

    echo $(echo ""A......Page"" ; echo ""23 - 22"" | bc -l -q)

The bc command performs the arithmetic (-q is ""quiet"" and -l brings in the bc library and sets the decimal precision -- unnecessary in this case but I type it by habit and is needed if you want non-integer arithmetic).

That line is piped to the shell for execution via "".!bash"" -- ""."" is the current line, ""!"" is the vim command to pipe text to an external process, and ""bash"" of course is which external process to invoke.

The line is then constructed by using the ""s///"" substitute command,with one regex to pick out the first non-numeric part of the text and a second following regex to pick out the numeric part. The substitution text uses \1 to refer to what was matched with the first regex, and similarly with \2, so the first half of s/// is:

    s/^\(.*\) \([0-9]*\)$/

The second half specifies the replacement text to form the echo command shown above to send to bash, so the whole substitute is

    s/^\(.*\) \([0-9]*\)$/echo $(echo \1; echo \2 - 22 | bc -l -
q)/

That uses | in the bash command for piping. In the final command we also use | as a command separator in order to add a command tell vim to pipe the newly-created command to bash.

Putting all of this together creates the horrendous-seeming command:

    :.,'ag/^[A-Z]\.\.\./s/\^\(.*\) \([0-9]*\)$/echo $(echo \1; echo \2 - 22 | bc -l -q)/|.!bash

And voila, we are done, the resulting text is:

    A......Page 1
    by John Smith
    B......Page 51
    by Jane Doe
    C......Page 109
    by Alice Grey

....and so on for 26 entries total.

Despite the unaesthetic scare factor of its appearance, note that this is far, *far* easier to compose than it is to read. I almost never save such things for reuse, because it is typically easier to re-invent a new complex ex command than it is to copy-paste-edit an old one.

I composed and debugged it in stages. First I did a simple global g// command, then I edited it (ex mode has history like the shell, accessible via arrow keys to scroll up and down through it).

I started adding s/// substitute commands to that, so it took a few tries to get the regex right and to finalize the strategy.

Somewhere in there I separately debugged the form of the shell command that would work best.

Total time elapsed probably 3 minutes.

In more complicated cases one might do a whole series of such compound ex-mode commands, to get the final edit done in stages.

Aside from the resemblance to line noise, it is also perhaps slightly boggling in its meta approach, of making commands out of multiple commands to create commands to send to multiple commands.

Now that I'm used to this approach, I use it frequently, not rarely, and again, this was a simple example task, but often what is needed is on much larger blocks of text with much more complicated structure.

A related common pattern is e.g. ""1,$g/.../-2join|join|s///"" to back up two lines from each regex-match, join 3 lines together, and edit the resulting line with a substitute command.

Using relative motion like that with g// is extremely powerful but not at all well-known.

I'm sure someone will say ""that's ugly, I'd prefer to just do 26 manual edits"" -- which is fair, but again this is a simple example of something that is essential when the alternative is thousands of manual edits (or writing complicated scripts).

And again, this is intended to motivate further exploration, not to be a tutorial.

People often argue for the superiority of vim's interactive commands, but although I agree, I think that ex-mode is a widely unknown and *certainly* under-appreciated, but possibly even more compelling, reason to use vim, in conjunction with its interative commands.

Apologies for undoubted typos in the above.
",49,147,Example of vim's ex-mode magic that can make you literally 10 to 1000x more productive on repetitive complex edits
,11,149,"Here's a nickel, Kid"
,37,146,Why I use VIM
"I was doing this all the time:

    vim `git ls-files -m` -p

to open in tabs all files I'm currently working on.
Today I realized that a git alias was simple enough to make so I now simply do:

    git edit

to do the same thing.

The alias (in .gitconfig) is:

    edit = ""!vim `git ls-files -m` -p""

Also, using this same alias I just found I can do:  

    git edit -o
    git edit -O

To open the files in horizontal or vertical splits.

I hope someone else here finds it useful!",31,148,Cool git alias to launch vim
,3,148,Vi Stackexchange Beta now Public!
,16,145,"50 mins of pure gold from Drew Neil, a true VIM master"
,25,145,Vim clutch
I found only one short video like that on Youtube. I want to see how fast it is to code with Vim once you get good at it. I don't want to see tutorials.,41,148,Where can i find screencasts of people ACTUALLY working with Vim (not tutorials)?
"I had quite a large file with names of different companies and I wanted to lowercase them all 

    ggVGu

then I wanted to remove whitelines

    :g/^$/d

and then I wanted to remove duplicates (I was fine with sorting) 

    :sort u

I originally wanted to write a couple of Python scripts but I just learned that vim can handle this stuff as well! Awesome! 

(credits to StackOverflow for these one-liners)",56,148,Woah ... Vim is AWESOME!
,24,145,Percentage of GitHub commit messages with angry words in them (sorted by language) (x-post from /r/coding)
,7,149,PacVim - A CLI Game To Learn Vim Commands
,44,142,Neovim - The road to 1.0
,113,145,When I see someone using Nano this is all I can see
,15,141,Falcon - a new colour scheme for Vim crafted with obsession
,13,143,How to Do 90% of What Plugins Do (With Just Vim)
"Tarruda has pushed some promising commits into neovim, like
[adding support for child processes that run in parallel with the editor](https://github.com/neovim/neovim/commit/4b063ea3adae8b47a16e229bcac53f5d86ad419d)

    Implement job control
    - Add a job control module for spawning and controlling co-processes
    - Add three vimscript functions for interfacing with the module
    - Use dedicated header files for typedefs/structs in event/job modules",72,143,Cool progress on NeoVim
"Today I found a way to use the system clipboard as the default register for yank/paste command:

    set clipboard=unnamedplus

The above line is a huge win compare to what I've been use the whole time:

    vnoremap <leader>y ""+y
    nnoremap <leader>p ""+p",121,144,What are your best discoveries while learning Vim?
,30,143,Drew Neil’s Modern Vim is now available in beta!
"I hate sub-reddit drama, but in this [this thread](https://redd.it/6dz0ti) many people who are active in the community have raised issues about the sub, including dealing with spam posts, access to the wiki, and lack of moderation in general (as seen with the bunch of LQ posts allowed with the mech keyboard saga), as well as no pro active community engagement. 

That thread has then been deleted by the moderator /u/bithead, the only moderator for the /r/vim. As can be seen here: https://redd.it/6e0zel

I think it would be good if more members of the community could be added to the moderation team to help with these issues, but I'm only one voice here so it would be good to see what everyone else thinks. 

/r/vim should be a place with a high quality wiki, where people can get advice on basic usage, configurations, plugins, themes and workflows. It would be good to get weekly beginner threads for the ""How do I quit vim?"" style questions to go into and not clutter up the rest of the sub. We could also have weekly tips threads like before, and other similar stickied threads. ",59,144,[Meta] Moderation of /r/vim
,9,144,Most first time diners must ask how to exit
,9,139,Help! How do I exit from Unreal Tournament?!
,25,141,vim.wasm: Vim editor ported to WebAssembly
,98,138,Learning Vim: What I Wish I Knew
"I have wasted so much time fixing changes to comments, how did I not know about this sooner?

&#x200B;

Edit: Thanks to /u/parnmatt for mentioning formatprg. By doing `set formatprg=par\ -w75j` I can have *justified* text. hnggg",20,138,TIL you can format comments to fit within 80 characters per line with the command gw.
,8,143,"Vim 7.2 celebrated it's 10 year anniversary last month, Interesting to see a decade's differences (and similarities)"
,41,141,Watch me code a Slack clone using Vim and tmux (50 minutes)
,25,141,Couldn't resist registering this domain name
,18,137,Things About Vim I Wish I Knew Earlier (xpost /r/programming)
,44,139,incsearch.vim is dead. Long live incsearch
"Title is self explanatory

:wq

*Update*

TIL :x is the same thing as :wq, so

:x",85,142,"Been using VIM for a year now, but I feel like I only use the basics to get around. What are some more advanced keystroke savers that you use?"
,22,136,"Dracula – A dark theme for Atom, Slack, iTerm, Sublime, Vim, Xcode, and Zsh"
,17,140,Vi/Vim Stack Exchange Beta has Launched
https://medium.com/vim-drops/vim-registers-the-powerful-native-clipboard-19b1c97891bd,26,136,"“Vim Registers, The Powerful Native Clipboard!” (quick tutorial for beginners)"
,28,137,""":syntax on"" in a nutshell."
,41,137,"Pterosaur 0.8 demonstration (makes all firefox textboxes, firebug, etc use vim with your vimrc)"
,15,137,Your problem with Vim is that you don't grok vi
,21,137,Brian Kernighan about GREP (and ED)
"**tl;dr**

Writing a book on Vim is very very hard. 
---

**Almost complete story**

It was December, 2014. I just moved to Berlin, Germany. 
I had a few job offers, and I was about to join one startup.
Those days, I finally decided to realize my idea - writing a book on Vim.

However, unexpectedly things went wrong with my work permit.

Long story short:
My homeland is not part of the European Union. 
The only way to get a work permit was - I had to have a university degree recognized in Germany.

Now, I did have the Bachelor university degree. But, it wasn't recognized in Germany.
Of course, I couldn't get any job in Germany. I had to come back to Serbia.

That's why I had to completely cancel all the work on Mastering Vim Quickly.
I spent a whole year on completing my MSc degree in Computer Science (recognized in Germany). 
I did it! And I finally back to Berlin.

It was a long way. It took a lot of time and effort, but it was worth of it.
I've found a dream job in an awesome startup. 

I got back to the book. It took more time and effort that I could imagine. But I didn't give up. 
Finally, I launched it last week. 


It's called **Mastering Vim Quickly: From WTF to OMG in no time**


**About the book**

I wrote it because I couldn't find a book which I wanted to learn Vim from. 
I wanted a short read, with the most important Vim features/concepts covered, and lots of real world examples.
So that's what I did. This book first covers a powerful learning techniques known to me. And then it introduces Vim, step by step.

Here's more info: https://jovicailic.org/mastering-vim-quickly/

*You don't have to sign up to get some chapters for free, I'll provide you the links here:*

* The complete table of contents is available here: https://convertkit.s3.amazonaws.com/assets/documents/45358/891039/toc.pdf

* Introduction chapter: https://convertkit.s3.amazonaws.com/assets/documents/45358/891042/introduction_free.pdf

* Chapter on Undo and Redo: https://convertkit.s3.amazonaws.com/assets/documents/45358/891043/undo_free.pdf

* (EDIT) Chapter on Macros: https://convertkit.s3.amazonaws.com/assets/documents/45358/891044/macros_free.pdf

I used to come here often few years ago, but I'd mostly read, and less write. I learned a lot here. As my thank you, I can offer you  **15% OFF using promo code: vimreddit**

If you have any questions, I'd be happy to answer.

",45,134,Mastering Vim Quickly: From WTF to OMG in no time
,56,134,Just framed and hung my new vim poster.
"Want some fancy GitHub flavored live markdown preview while editing a markdown file?

No need to reach for a Vim plugin. You can just use a command-line markdown previewer like [grip](https://github.com/joeyespo/grip) and invoke it for the current file with a small function.

- Screenshot of the end result: https://i.imgur.com/04xibWR.png

- Vim code (Neovim job syntax, same idea for Vim 8):

        noremap <silent> <leader>om :call OpenMarkdownPreview()<cr>

        function! OpenMarkdownPreview() abort
          if exists('s:markdown_job_id') && s:markdown_job_id > 0
            call jobstop(s:markdown_job_id)
            unlet s:markdown_job_id
          endif
          let available_port = system(
            \ ""lsof -s tcp:listen -i :40500-40800 | awk -F ' *|:' '{ print $10 }' | sort -n | tail -n1""
            \ ) + 1
          if available_port == 1 | let available_port = 40500 | endif
          let s:markdown_job_id = jobstart('grip ' . shellescape(expand('%:p')) . ' :' . available_port)
          if s:markdown_job_id <= 0 | return | endif
          call system('open http://localhost:' . available_port)
        endfunction

    (for a shorter function, see EDIT 3. The port discovery code above allows multiple vim instances to preview different project files at the same time — something that grip doesn't provide out of the box)

- If you like what you see you can also check out my [vimrc](https://github.com/jeromedalbert/dotfiles/blob/master/.vim/init.vim)

EDIT 1: grip also works on Windows, my tip is specific to Unix only because I use `lsof` to check ports.

EDIT 2: `open` is MacOS specific. If you are on Linux, replace it with whatever works on your distro, like maybe `xdg-open`, or invoke your browser directly

EDIT 3: If you prefer simplicity, here's a short version that doesn't deal with ports

    noremap <silent> <leader>om :call OpenMarkdownPreview()<cr>

    function! OpenMarkdownPreview() abort
      if exists('s:markdown_job_id') && s:markdown_job_id > 0
        call jobstop(s:markdown_job_id)
        unlet s:markdown_job_id
      endif
      let s:markdown_job_id = jobstart('grip ' . shellescape(expand('%:p')))
      if s:markdown_job_id <= 0 | return | endif
      call system('open http://localhost:6419')
    endfunction

EDIT 4: Here's a short version *with* port discovery that doesn't use `lsof`:

    function! OpenMarkdownPreview() abort
      if exists('s:markdown_job_id') && s:markdown_job_id > 0
        call jobstop(s:markdown_job_id)
        unlet s:markdown_job_id
      endif
      let s:markdown_job_id = jobstart(
        \ 'grip ' . shellescape(expand('%:p')) . "" 0 2>&1 | awk '/Running/ { printf $4 }'"",
        \ { 'on_stdout': 'OnGripStart', 'pty': 1 })
      function! OnGripStart(_, output, __)
        call system('open ' . a:output[0])
      endfunction
    endfunction

(it just uses unix port ""0"" which means ""choose an available port for me"")",38,132,"Top-notch VIM markdown live previews with no plugins, just unix"
,35,138,Vim 8 pre-announcement (x-post from /r/linux)
,72,136,Why Atom Can’t Replace Vim
,17,136,Typing with pleasure: Examining typing latency of popular text editors
,72,134,This is Your Brain on Vim
,22,135,Neovim Newsletter Issue #1 - A New Hope
,1,133,Understand Vim Mappings and Create Your Own Shortcuts
,17,132,Vim anti-patterns
,27,136,"Task & time manager synchronised between devices (nvim, vim, browser)"
,65,132,Tabs or Spaces?
,50,129,The best advanced Vim Tutorial I've found. Helped me a ton.
,37,134,Support Neovim
,12,129,Shouldn't the upvote/downvote arrows in this subreddit be swapped for K/J?
,41,130,VIM Adventures - Learning VIM while playing a game
"Hey Vimmers! 

I created a series of interactive [Vim tutorials](https://www.vimlabs.world/), [Vim Labs](https://www.vimlabs.world/), that take you from beginner to a text-editing wizard. 

The idea is to make learning Vim fun by providing instructions next to a live Vim for interactive learning without installation or configuration. 

Give Me Feedback

* What do you like? 
* What would you change? 
* Do you find the medium an effective way to learn Vim?",40,132,Interactive Vim Tutorials: from beginner to wizard
"I am currently considering some changes to how /r/vim is run.  Nothing has been decided yet, but here are the current ideas being bounced around. 

- De-emphasis of stickies and sidebar, they are generally not seen / overlooked.
- More focus on building out evergreen answers on the wiki (opening up wiki a bit maybe?).  I am concerned this will possibly end as pointless duplication and competition with http://vim.wikia.com/wiki/ -- what do you think?  The goal is to be able to quickly link to answers rather than having to rehash them. 
- Implementing a fairly firm no assholes rule.  This means banning people with a **pattern** of poor behavior, not for a one off bad comment / day.  This will **not** be backward looking but from implementation point forward, everyone will have a clean slate.  Disagreement isn't being an asshole, personal attacks are.  Sincere arguments focused on the tech will always been allowed.  ""I recommend instead of plugin $X you use feature $Y"" isn't being an asshole.  ""You are stupid because you use plugin $X instead of feature $Y"" is.  No more platform/language/gui shaming, etc. 
- Weekly DYK (Did You Know) -- to point out things Vim already does out of the box, and discussion around it. 
- Weekly Tip -- this can be a plugin, workflow or general tip and discussion around it. 
- Monthly Vimrc review thread -- obvious enough!
- Bring on the bots -- the tips, DYK and Vimrc review thread will be automated by bots (pre-loaded) and various other tasks as well as can be will be automated.

... looking for more ideas ... 

Some ideas from the community likely to be done as well!

- Weekly Everything About ____  -- /u/sudo_bang_bang
- New Theme and Banner -- /u/AGodWithNoName",96,131,[meta] /r/vim improvements
,27,133,Neovim Newsletter #5 - Out of the Box
"When in insert mode using alt + key sends escape first so that you can then use all movement commands. Also, when you for example use Alt+o/O, you can insert multiple lines fast, switch from insert mode straight to visual, etc.",64,131,Alt is a pretty neat trick
,26,131,Got bored and made my MacBook keyboard backlight indicate Insert mode
,12,129,A sorted list of the most popular .vimrc options out of 155 .vimrc files.
,13,128,Talks on VimConf2018 are now published here. You can watch Bram Moolenaar's keynote too!
"Sometimes you feel like showing off your vim setup -- here is your chance, for the next month post your screenshots here.",212,131,Screenshot Showcase 2.0
"This is my sneaky way of trying to scoop some unused vim secrets out of you without causing too much headscratching if I asked ""what's the best vim secret you wish you knew earlier"".

My answer to this is pretty simple: I had a colleague who was using vim the other day, and repeated pressing h/l to go over several words.  Told him about w & b and blew his mind.  Simple stuff, but I love unlocking that productivity (in myself or others).

Any good stories out there?",130,129,What was the last thing you taught/learned in vim?
,8,133,Brainfuck interpreter implemented with vim's Turing-complete copy/paste/search/replace
,15,127,Vim vs Emacs comic strip - [X-post from /r/emacs]
,13,131,VimGifs: Using a file format from the ‘80s to explain a text editor from the ‘70s
,191,129,Vim patch 7.4.1274 adds job functionality (not compatible to Neovim)
,26,126,Vimtips! 24 years worth of tips from a Vim user
"For a long time, I have been wishing if i could have vim keybindings in my bash terminal. 

Hitting control keys everytime was becoming a pain in the butt for me when I knew that i could do it easily with vim bindings. I tried to get used to terminal shortcuts  but it just wasn't working for me. Alt + f, alt +b suck for me.

Little did I know a simple solution was out there waiting for me to discover it. 

Today I just came across a technique that makes the bash terminal have vi key bindings.

To enable the command-line editing with vi keys. Run the following command(put in your .bashrc if you like):

    set -o vi

There you have it, all the vim key bindings on your finger tips.
By default you will be in insert mode. Hitting ctrl + [ or esc will put you into normal mode. And then, you can enjoy the vim magic.

k brings up previous typed commands(it scrolls up through history). h,l,dw,dd,d$,A,0,$ etc all work as expected.

I hope it helps someone out there.
",52,129,OMG!! How come i did not know this.
,45,128,Alduin - dark Vim colorscheme for Terminals and Gui. Enjoy!
,33,127,vim 1.24 from 1993 vs Atom opening a 100MB file
"Hey Vim peeps.
I kinda like listening to music and programming stuff using Vim. 
When finding Mustafa Ansari's (https://github.com/MuAnsari96) Vimify plugin last year I was completely sold.

Then I think it was 4 or 5 months ago Spotify decided that their search API would only be accessible for people with active user sessions... so suddenly the plugin stopped working. Going trough oath every time i wanted to use Vimify was kind of a pain too.

seems a few weeks ago, Spotify opened up their search paths to applications. So I took a copy of Vimify, cleaned it up a bit and integrated the ability to search for music again.

Put the plugin up at https://github.com/HendrikPetertje/vimify
It's still a spaghetti mess, I need to reintegrate Linux support and allow to search for albums and artists specifically... but it's a start.

Love to know your thoughts!

(Again Mustafa Ansari did the big work here with his initial plugin)

.  
..  
Edit 15:45:
I love the discussion here!

to be quite honest, I just wanted to try what is possible (while also shitting on some friends/colleagues that thought that code-linting was the most elite function in their sublime/atom installs). Vim is a pretty powerful platform that allows a lot of tweaking, I mean creating a complete spotify-interface that works, in 100 or so small lines of code (if you forget the comments for a sec) is pretty nice though obviously perverse. 

The fact that I can quickly switch music while not leaving my full-screen terminal is just a nice bonus at this point. 
If you feel like it's too much, then yeah I completely agree and will mainly just tell you to... not install it, I'm just having fun.


On a less serious note: I'll cancel the ascii-youtube-player-inside-vim project then?",71,129,Spotify in Vim
,31,128,Tips and tricks for the intermediate Vimmer (aka. Stuff I've got in my .vimrc that most people don't.)
,13,130,Officially Settled: vim 5x more popular than emacs [X-Post from r/linux]
"I created [a post](https://www.reddit.com/r/vim/comments/89ytgb/a_call_for_ale_contributors/) 4 months ago asking if anyone wants to help manage [ALE](https://github.com/w0rp/ale) issues and pull requests on GitHub. So far, no one has really come through and started managing issues and pull requests other than myself. If anyone feels they are competent enough with VimL, generally agrees with how I want to develop ALE, and is generally an okay person, please let me know if you want to help. It would be nice to get issues answered faster and get improvements in faster.",29,126,I still need help with ALE
What was that addition that when you thought of it or have seen it somewhere you were amazed and it ended up being an integral part of your workflow?,228,124,What was your best vimrc addition?
,54,125,Forgetting you're in insert mode.
,15,123,"vim-markbar - A sidebar showing your marks, their locations, and the contexts in which they appear!"
"Here's my beloved [dotfiles](https://github.com/huyvohcmc/dotfiles), been improving and cusotmizing them for nearly 5 months, I think it's a good time to share it to all the experts out there.

Please have a look, tell me whether you like it or not, and don't forget to share your dotfiles too.",108,126,Dotfiles are meant to be shared
"Use "":set nopaste"" to return to normal behaviour.",37,128,"If Vim keeps screwing up your indentation when pasting code, use "":set paste"""
"I've used ""Tabular"" for a long time, but always missed proper text object support. Today I set out to find out some kind of a solution for that, or build something myself.

After some googling I stumbled upon [vim-easy-align](https://github.com/junegunn/vim-easy-align) and was blown away by all the features and how ""polished"" that plugin is.

* first things first: vim-easy-align has text objects built-in and they come as the ""first class"" feature. ~~They are definitely not an afterthought.~~ Ups, the plugin author said text objects actually are a feature that was added on. Still first class though.

* you'd maybe think that built-in text objects are just shortcuts to commonly used alignment patterns (like align on colon, or equals), but no: the text object API is incredibly feature rich and intuitive!
It's incredible how that API makes sense to perform an operation like: ""center align only the 3rd column by the comma character""

* the ""feature polish"" is **incredible**! Apart from the support for text objects it works with visual and block visual modes. There is also an command line interactive mode, something I haven't seen in any plugin so far (I'm still learning about this).

* But it's the little things too - lots of nice little things. For example when aligning, it respects commented lines (does not align them). Equals sign ""="" alignment will work on other similar operators like ""=="", ""==="", "">="", ""+="".... Different alignment characters have different default alignment settings: for example equal signs are center aligned by default, but colon has left default alignment (this is totally intuitive). Works with repeat.vim.

* not a feature in itself, but worth mentioning: the plugin has a big test suite. This will hopefully make it less susceptible to ""bit rot"". I also hope this means the time I spend learning it will be paying off for the longer time.

As for learning how to use the plugin: I re-watched the [slow gif](https://raw.githubusercontent.com/junegunn/i/master/vim-easy-align-slow.gif) half a dozen times to ""grok"" the fundamentals. After that, documentation is much more understandable.

So I just wanted to share this with the community because I think it's awesome! And I hope others find it helpful.",26,124,vim-easy-align: the most ingenious plugin I've discovered in a while
,53,126,why I stopped contributing to vundle
"Exactly what it says on the tin, what is your favorite font for Vim?  Screenshots and links appreciated.   ",154,125,Your favorite font for vim?
,31,124,Vim's new hybrid line number mode (NB - requires vim 7.4)
,108,123,What are some lesser know tips and tricks in vim that you use very often and make your life easier and your editing faster?
,35,119,8cc.vim: C Compiler written in Vim script
"Only recently did I find out that `tmux` wasn't displaying 256 colours because I failed to pass `-2`! Now that I've aliased it properly, it's as if I've got new colour vision. I wasted no time in searching for some colour schemes (`desert` was what I was using; `desert256` looks so different!). I prefer dark background, and wanted to see what your favourites are.

(Aside: for some reason, some of the colour schemes what [vimcolors](http://vimcolors.com/) show doesn't look the same on my terminal.)",129,123,"Vimmers, what are your favourite colorschemes?"
,22,122,How to freak out your fellow programmers (`ggg?G...`)
,17,123,Silly little easter egg I found in the vim helpfiles. Know any others?
,12,119,Time traveling in vim
,18,122,Learn Vim Progressively
"As a new moderator of /r/vimporn, I am happy to announce it's again open for business. The purpose of the subreddit is to:

1. Post pics and/or gifs/videos of your Vim setting.
2. Include your .vimrc and config/description of what you did (in case of video).",17,119,/r/vimporn is open again!
,40,121,I wrote a vim plugin for Razer Chroma
,35,124,"Practical Vim, Second Edition (November 25, 2015)"
,26,123,WASD now has a full set of VIM keycaps [/r/MechanicalKeyboards]
,54,122,Junegunn's 1500-line vimrc -- more good ideas than I'll ever have time to steal
,23,121,Vim Croquet - finding inefficiencies in your usage of vim
,61,122,startify kills children !
,8,121,Block-breaking game in vim 8.0
,28,124,Afterglow colorscheme released!
,21,119,Vim 25 years anniversary presentation by Bram Moolenaar on 2. November 2016
,75,118,Vim8 supports GUI colors in the terminal
,9,118,Quora: what are the most amazing things that can be done with Vim?
"You try to use 
    <esc> : wq 
to exit Word.",91,119,You know you're a vim user when...
,11,119,"Learning the vi and Vim Editors, 7th Edition available in Humble Book Bundle for $8 along with bunch of other unix books"
,31,120,Redacted.vim - an invaluable new plugin for your consideration
,11,117,The new Vim assistant!
,58,119,vim-airline: a lightweight statusline light as air
,44,121,My Vim flavored keyboard.
"Over the time I'm relying heavy much on vim.wikia.com for various vim tips. I love how it goes from simple command to do X thing and then move towards more complete solution with different cases.
For example:
http://vim.wikia.com/wiki/Search_and_replace_in_multiple_buffers

first it mentions command to search and replace in open buffers
```
:bufdo %s/pattern/replace/ge | update
```
then later on, gives fully fledge function

I'm very thankful those maintain and contribute to it",2,118,Just want to show gratitude towards community maintaining vim.wikia.com
,63,118,Vim: you don't need NERDtree or (maybe) netrw
,17,118,How I Vim:- Damian Conway
,41,117,TimL: Clojure-like compiler down to VimL by Tim Pope
,48,121,Bram responds to Neovim
,65,117,Got some vim-related stuff in the mail today
,33,117,What features are you missing from Vim (poll)?
"It handles decompresing and recompressing. I'm no vim expert, but this blew me away since I've never come across it until now. Hopefully it's useful to other new folks. That is all. ",28,117,TIL you can vim gzip files directly without manually extracting
,50,116,"Tender: A dark and fresh 24bit colorscheme for Vim, Airline and Lightline"
,32,113,Using Vim as a password manager
,31,115,Vimbits.com - Submit and vote on .vimrc tricks
,42,113,You Should Be Using Tags In Vim [Vimways 2/24]
"So I recently started building my first vim plugin.  Links:

- Main repo: https://github.com/flipcoder/decadence
- Plugin: https://github.com/flipcoder/vim-decadence

I'm trying to make vim a midi sequencer/tracker.  The syntax is a little more theory-oriented than a classic tracker since each track can (in addition to just playing notes and effects) parse and arpeggiate specific chord voicings, scales, etc. You can also route the midi data out to a  DAW or VST host via virtual midi adapter.  Eventually I think it would be cool to use this to write music instead of a DAW.  I'm looking into headless VST instrument racks and other music tech stuff to use with it to make this possible.

It's very early and rough despite number of features, but I think this is too cool to not show off already.  Let me know what you guys think and if anyone would be interested in being involved building/testing.

All feedback welcome.",16,115,Decadence - Vim music sequencer
,6,113,Someone is streaming an instance of vim on Twitch
"I'd like to know which routines, configurations and plugins you are using for writing and proof reading with vim.

I have to write a plethora of reports and I'd like some features to ease the writing and editing process.
Maybe we could make a list of cool and helpful tools together :) 

Edit: Thank you very much for all the cool and valuable contributions! In the next days I will try to structure and list everything below:

* a vim plugin that highlights overused words: [ditto](https://github.com/danielbmarques/vim-ditto)

* a list of helpful writing plugins [here] (https://github.com/reedes?tab=repositories)

* a unite.vim integration of redpen for proof reading [here](https://github.com/rhysd/unite-redpen.vim)
(though I couldn't make it run)

* a Vim plugin for looking up words in an online thesaurus: [vim-online-thesaurus] (https://github.com/beloglazov/vim-online-thesaurus)

* Distraction-free writing in Vim: [goyo](https://github.com/junegunn/goyo.vim)

* Hyperfocus-writing in Vim: [limelight] (https://github.com/junegunn/limelight.vim) (can be combined with Goyo)

* an undo history visualizer for VIM: [undotree] (https://github.com/mbbill/undotree)

* handy plugin when you're doing a lot of copy/paste: [peekabo] (https://github.com/junegunn/vim-peekaboo)",25,112,Enhance vim as a writing environment
,32,112,PSA: If you're using CtrlP use this maintained fork
,13,112,A clever vim cheatsheet
"Hurrah! I'm putting the link in a text post because I want to make it **absolutely clear that I don't know much about this stuff, won't be able to help or liable for any damages!** Good. Here's [the link](http://www.commandlinefu.com/commands/view/5888/edit-a-google-doc-with-vim).",17,113,I just discovered that you can edit Google Drive docs with Vim!
"I took a screenshot for another thread; then I thought, ""hey, I want to see what everyone's vim looks like!!""  So, show me your vim!  Here's mine, with a C file, a perl file, and a bash file; the three file types I edit most often.

[screenshot](http://i.imgur.com/30fk6.png)

EDIT: C'mon people!! The number of screen shots should equal to or greater than the number of votes!! ;-)",192,118,"vim porn (that is, show me your vim!)"
,55,112,Why I love vim :)
,22,111,3 Vim Skills To Learn After Finishing Vimtutor
"I don't have any big tips or tricks, just wanted to share a short story.

I'm sure a lot of you are familiar with the thought ""Why the hell does it say 'recording' on the bottom of my vim session?""
My usual reaction to that is to hit <esc> a couple of times hoping I won't break anything I was working on.

But a couple of minutes ago I was working on a somewhat repetitive task and my mind went to that 'recording' thing I had never really fully investigated what it does...

Let's google that:
> [One of Vim's most useful features is its ability to record what you type for later playback. :help recording This is most useful for repeated jobs which cannot easily be done with ""."".](http://vim.wikia.com/wiki/Recording_keys_for_repeated_jobs)

Perfect, that's exactly what I need right now.

So I hit **qa**.

'recording' appears at the bottom.

I perform all the steps of my repeating task.

I hit **q**, move to the next line, hit **@a**

OMG it did exactly what it said on the box! It applied all my recorded steps on the next line!
So I repeat this sequence of moving to the next line and hitting **@a** a couple of times when a thought occurred to me:

>  This is vim, and I'm still doing repetitive work...

I hit **5@a**

YES! YES! it repeated my recording to the next 5 lines!

Man, I fucking love vim!",28,114,my first recording
,59,112,Crowdfunding for qutebrowser v1.0 (a vim-like browser) with per-domain settings
,59,115,Vim After 11 Years
,25,115,I made a random color theme generator for Vim!
,17,115,Creating Your Lovely Color Scheme #vimconf2017
,39,109,"Asynchronous Linting using Vim8. Almost like Syntastic, but checks while you type"
,13,109,emacs user at work by EarlColour on DeviantArt
,81,108,Stack Exchange has decided to shut down the Vi/Vim proposal
"She’s actually named after her great grandmother, whose name was “Violet”. But she never liked being called her full name, so for her whole life she was called “Vi”. Thus, our daughter’s name is Evelyn Vi.

HOWEVER

I am a vim user. Should my daughter grow up to show any predilection to programming in general (she's only six months old but I have a good feeling) I will teach her vim. I would do this on the very slim chance that she ends up in a high stakes situation along these lines:

“Oh no, the only way to stop the bomb/virus/monkeys is to edit this UNIX script on an ancient terminal!”

“My brain wave controller isn’t working, what do we do?” (Remember, this is like 2040)

“Are there any text editors on this thing? Who is ‘Ed’?”

“I think this one would work… does anyone know vi?”

That’s where my daughter kicks in the door and says: “Please. Vi’s my middle name.” And then she’ll save the day.

(And yes, I know most people say ""vee"". It's my story. Also, in the future, no one will know any better.)
",44,111,Some Friday fluff: My daughter’s middle name is Vi
,59,115,A quick tour of Steve Losh's massive vimrc
,31,113,"Maktaba: A library for writing vim plugins, by Google"
"I've been using vim (pretty much vanilla) for the past ten years and I've not been following any of the interesting developments of the ecosystem. I see now that there are awesome new features that make vim as powerful as an IDE (I've become used to not rely on one, but I'd like to change that).

&#x200B;

As I'm updating my main dev machine, I might as well update my dev environment. What would you recommend to try for someone still stuck in 2010 vim?

&#x200B;

(I develop in various languages if this is relevant: I would use scala/java almost every day and c, js, python sometime every month and I'm looking to get seriously into rust.) 

&#x200B;",79,107,"I'd like to update to ""modern"" vim practices. What are your absolute go-to features recently introduced?"
"I found it in an [old thread from six years ago](https://www.reddit.com/r/linux/comments/9zq8h/vim_users_what_are_some_interesting_hacks_or/c0f75fl), figured I'd post it here in case anyone isn't aware:

    "" Read-only .doc through antiword
    autocmd BufReadPre *.doc silent set ro
    autocmd BufReadPost *.doc silent %!antiword ""%""
    
    "" Read-only odt/odp through odt2txt
    autocmd BufReadPre *.odt,*.odp silent set ro
    autocmd BufReadPost *.odt,*.odp silent %!odt2txt ""%""
    
    "" Read-only pdf through pdftotext
    autocmd BufReadPre *.pdf silent set ro
    autocmd BufReadPost *.pdf silent %!pdftotext -nopgbrk -layout -q -eol unix ""%"" - | fmt -w78
    
    "" Read-only rtf through unrtf
    autocmd BufReadPre *.rtf silent set ro
    autocmd BufReadPost *.rtf silent %!unrtf --text

You'll need to install `antiword`, `odt2txt`, `pdftotext` and `unrtf` if you don't have them already.

If anyone has some other cool ones to add, or a more elegant solution, please share!

I'm going to start reading `.pdf` books in vim, marking my spot with `ma` (for example), that way, when I open the file again, and want to resume reading where I left off, I simply type `'a`! :D

Edit: TIL `'""` resumes the cursor position before you last closed the file!",47,111,"I just found a simple method to read .pdf, .doc, .odt, .rtf, etc. in vim!"
,45,109,Neovim Gets True Color Support in the Terminal
,84,111,Vim Survey Results
,46,108,"Unite.vim, the plugin you didn't know you need"
,12,110,Proving vim macros are turing-complete using bitwise cyclic tag
,77,109,Vim Is The Perfect IDE
,11,107,Advanced Vim registers
,25,107,Short Vim screencasts (episodes #1-3) for non-beginners
,98,111,Stop the Vim Configuration Madness
,105,107,"One man dedicated to making a browser for the people who can't shake the Vim off their fingers, would you crowdfund it?"
,31,108,I've ported my favourite emacs themes to vim. Enjoy !
,12,108,Allomancer: A vim colorscheme inspired by two-firewatch and apprentice - any suggestions/pull requests are greatly appreciated
,85,106,Vim Zero
"Been lurking for a year learning everything I can from this community, just wanted to join up to say thank you all very much for all of the help you never knew you were providing!",4,106,Thank You
,4,105,Build your own Vim statusline
,50,107,Vim without NERD tree or CtrlP
,137,105,"[xpost /r/linux] Vim pint glasses, straight out of the laser cutter! Get one to look stylish, promote FOSS, and help needy children in Uganda!"
,75,108,Bash has a vi mode. I can't believe I didn't know that. $ set -o vi
,35,107,I've done this many times.
"[https://github.com/RRethy/vim-illuminate](https://github.com/RRethy/vim-illuminate)

Second plugin I wrote. Looking for any feedback and thoughts. Thanks!  
",47,104,vim-illuminate: selectively illuminate other uses of current word under the cursor
,23,108,My fairly popular vim plugin for managing tagsfiles automatically is now using Vim8/Neovim's background job system.
,27,107,A collection of Black Metal inspired base16 schemes. \m/
"Let's say you see them using external applications for switching between files and searching for variable and function references.

You're itching to take the blinders off this friend of yours and really open the doors to a much broader world. All the while taking into consideration not to overwhelm them while simultaneously keeping their interest.

Where would you start? Maybe they've already been shown many of the beginner's guides and the famous ""because you don't grock Vi"" write up.

You get the impression that they're  probably just timid and have no real guidance. You're now frothing at the mouth to open their eyes to more. So you think carefully as to what you're going to reveal to them and keep their interest.

The power is in your hands. Give it your best shot.",43,107,If you realized somebody was only using Vim for it's advanced text manipulation and motions - What mandatory features would you show them that would increase their productivity?
"Adding this to your shell rc dotfile makes Vim your default man pager. It has syntax highlighting, navigation keybindings (`C-]` goes to man page on cursor, `C-o` goes back, same as in Vim help) and all the other Vim goodies.

    For bash,zsh,ksh or dash by adding to the config file (.bashrc,.zshrc, ...)

        export MANPAGER=""env MAN_PN=1 vim -M +MANPAGER -""


This is a built-in feature. As far as I know, previously people used shell script wrappers for this purpose.

Source `:help manpager`, version `7.4.2143`.",44,105,TIL: Built-in man pager in Vim
,35,104,Editor Wars: The Revenge of Vim
,11,108,"How I Vim - Andy Stewart, a.k.a airblade"
,21,110,"An old, humorous Tim Pope tweet about forking vim plugins"
,18,104,"Found this on 4chan, fizzbuzz in vim"
,25,107,vim-dispatch: I should have used this years ago!
,45,104,Vim After 15 Years
"Been using it for few days now, love it, but y'all Vim Superdupers, are there some features that you wish you knew about when you started using Vim or would recommend for new users?",140,105,"Vim veteran, what is something you wish you had known when you started using vim?"
,30,104,Vim Plugins I Like
,16,101,Best of My vimrc
,29,105,Watch Dogs 2 DedSec uses VIM! (And it's my setup!)
,31,107,New favorite restaurant
,17,103,The most helpful keyboard cheat sheet I've seen.
,37,104,[Easter Egg] Kevin Flynn (in TRON) used vi
,11,105,wikipedia on emacs
"There are a lot of great console tools that are easy to lightly integrate with via filter (:h filter), read (:h read) or just by running them.

If you have some to recommend, put each individually in a top level comment along with any (minor) integration you have with vim.

The great thing about console tools is they often have easy to use flags  to customize behavior and hey, you didn't have to write them in the first place! ",115,100,Favorite console tools to use with vim
"I'm still learning the ropes with vim - and discovering new little features all the time. It really is an amazing piece of software, and so powerful!  
**:!** is fantastic! No need to close out the terminal or change between multiple tabs/windows.  
What's a function that you just recently discovered?",50,106,Just discovered :! while writing a little bash script. What's something you just recently discovered?
,10,105,vim/neovim: Arbitrary command execution (CVE-2016-1248)
,43,105,vis: a vim-like editor
,31,106,"Vimmers, You Don’t Need NerdTree"
,28,103,Using Vim to View Git Commits
,16,103,Literate Vimrc
,44,101,saw this in another editor - is there a way to do it in vim?
,15,102,[xkcd 1806] Would it be possible to implement the scroll undo/redo from the title (mouse hover) text?
,75,105,This is very cool ! Can Vim have something similar to that ?
,110,102,"Poll: Do you use vim in the terminal, or Gvim?"
"I came across this recently and I should have had it in my`.vimrc` all along. 

    "" swap files
    
    "" swap files (.swp) in a common location
    "" // means use the file's full path
    set dir=~/.vim/_swap//
    
    "" backup files (~) in a common location if possible
    set backup
    set backupdir=~/.vim/_backup/,~/tmp,.
    
    "" turn on undo files, put them in a common location
    set undofile
    set undodir=~/.vim/_undo/

Anyone got a similar story?
",202,104,What's one thing everyone should have in their vimrc?
,49,102,Full vim editing (not just vi-mode) for bash and anything that uses readline
,71,102,Updating 40 plugins in 4 seconds
,17,103,tpope's NYC Talk
,6,102,The Dharma of Vi
,5,102,I didn't know we had a house of worship
"Since this ended up way longer than expected...  
TL;DR: slammed face on keyboard to make macros, saved myself an hour or so of copy-pasting

---

So I thought I'd share this here, since I don't know who else to share it with.

Over the past couple days, I was asked to put in a bunch of logging calls for tracking statistics on CTR, etc. on a website.  The header alone has nearly 150 links in it (two hamburger menus of doom... shitty design, but not my problem).  I checked the format with my boss, then dumped it into a python script I wrote to generate all the log calls.  I pasted them into the .ftl file one by one, tested it on dev, stg, and prod00 (I don't actually know what the English name for this is.  Basically it's prod, but only deploys to an IP accessible in house.  You change the `hosts` file to point to it instead of live), and everything looked great.  Then I was told ""hey, actually, can you change some of these?""  Fack.

I was left with about 150 strings, most of which looked like

`amb-mine-click=""${tapContents('foo-bar-baz', '', content.qux!'')}`

That needed to be replaced with  

`amb-mine-click=""${tapContents('foo-bar-baz-qux', '', '')}`

Sometimes it was already

`amb-mine-click=""${tapContents('foo-bar-baz-qux', '', content.qux!'')}`

that just needed the last `content.qux!` taken out, sometimes they didn't need to be changed at all.  I couldn't think of any smart regex to do this for me, so I resigned to doing the first dozen or so by hand.  Then I remembered: vim has macros.  I closed eclipse, opened up the ftl file in one split, fired up my aforementioned python script and put the output in another split, then got to work delicately constructing the macros I'd need.

At first I just had one: `df}`, which I'd use to delete the old log call.  But then I learned the hard way that `yy` also copies the carriage return, so I made a second macro, `^y$`.  I used these two for a while, but then got a bit annoyed that I had to delete, change to my list of logs, copy the new one, change to the ftl, and paste it in.  But I couldn't start with the copy because `d` automatically cuts to the same register as `y`.

A little bit of stackoverflow-fu later, I came up with `""_df}P`, which cuts to the blackhole register, then pastes.  Awesome.  But this is still a lot of C-w C-w to change splits.  Macros became  `^y$C-wh` and `""_df}PC-wl` respectively.  But I still have to go to the next line in my list of new log calls, and the next log call in my ftl.  `/amb-mine` in the ftl file made it so that `n` automatically jumped to the next one, so my delete macro turned into `""_df}PnC-wl`, and my copy macro turned into `^y$jC-wh`.  

In the end, I was mildly amused at how much my macros looked like someone just slammed the keyboard with their face.  I had been showing a friend a while back the cool things you can do in vim, and now I could say ""Today I made two commands by typing `qw^y$jC-whq` and `qq""_df}PnC-wlq`, and it made my tedious job of copy and pasting 150 strings done in about a minute.""

Let's not talk about time spent on stackoverflow or making sure my macro worked.  I was proud of myself for using vim to do the boring stuff for me.",25,103,Vim eliminated so much tedium from my life today
,12,102,pyvim -- A Vim clone in pure Python (xpost from /r/Python)
"Sorry for my poor English. But in the spirit of the Reddit posts recently about how great Tim Pope is... 

I would like to place another Vimplugin creator in spotlight. I'm impressed by the quality of the Vim plugins from [Shougo Matsushita](https://github.com/Shougo)

I use a lot of his plugins, so I started to notice that the plugins are very sophisticated.

For example, Ctrlp and Fuzzyfilefinder are by far one of the best/most popular plugins. So to be replacable is no easy feat. But I see more and more Vim developers are replacing their Ctrlp with Unite, created by Shougo. When I looked into the code, Unite uses [vimproc](https://github.com/Shougo/vimproc.vim) (maintained by Shougo) too behind the scenes, which affords for searching/fuzzing while it asynchronous populates the file list in the background, whoa! 

And Unite detects if you're using grep, ack, or ag. If so, it will executes them too. And can buffer switching like LustyJuggler, and integrates your Git commands. So it's more all-in-one plugin combined. 

His another plugins are even more ingenious. For example, [Vim-shell](https://github.com/Shougo/vimshell.vim), a full fledged terminal in your Vim buffer, written in pure Vimscript, works like charm. It has
built-in functionalities to act same as zsh. So bash/Zsh like commands, like Git will work without any trouble in Vim-shell inside your Vim without the need to connect to external terminal. 

You can even connect with another plugin [SSH](https://github.com/Shougo/neossh.vim) inside Vim. 
Another example is [Vimfiler](https://github.com/Shougo/vimfiler.vim), which is more powerful than the NERDTree, or Neocomplete which is fully written in Lua, to be faster than his Neocomplcache. 

Or manage all the plugins I named earlier with his another creation, [Neobundle](https://github.com/Shougo/neobundle.vim) which I found truly better than Vundle. You have even the possibility to lazy update asynchronously.

Shougo writes his plugins for Windows environment, but he manually tests his plugins thourughly in different environments like Ubuntu, Fedora, Cygwin and even Solaris, before he makes it publicity. 

Whenever I open an issue about one of the plugins, I get always a direct response in some hours. But there is even more. For example, Tim Pope is an American. So reading latin characters like Vimscript would not be too hard. 

When I take a look at Shougo's Twitter:  https://twitter.com/ShougoMatsu, I see he writes mainly in Japanese. Imagine how hard this would be for Shougo. The Latin nature of Vim and coding in latin character. He write his documentation well in Japanese, English and even Mandarin, if I'm not wrong. 

When I asked of I could donate some bitcoins for his tremendous work, he declined my offer. He just don't want anything, but more help to expand the Vim scripts for everyone would be welcome. 


**TDLR;** Look at the different purposes of his plugins, and how easily they could contest many popular Vim plugins from many different Vim developers... all from *one* person.... I must admit, this guy is awesome!

**EDIT:** Shougo responded to this reddit. Look below for his response. ",44,105,Another Vim developer in spotlight: Shougo
"im going to be making a new workflow around using only one right hand now , my current setup was pretty minimilistic very few plugins(themes and powerline) 
any plugins i should know ? any tips to get started with one handed usage?",37,100,"lost one hand , any vim tips for making new workflow"
"Post a **link** to your vimrc in a top level comment and let the community review it!

**NOTE:** This thread only works if people take the time to do some review, if you are posting a request, maybe return the favor and review someone else's. 

When giving feedback, remember to focus on the vimrc and not the person.

*Custom flair will be given out for our brave vimrc janitors who take the time and effort to review vimrc files!*

Tips:

- https://www.reddit.com/r/vim/wiki/vimrctips
- **Check the bottom of thread, some vimrc's get buried without replies**

The sad no reply list :( 

- Entirely fixed by /u/bstaletic (Thanks!)

[vimrc review thread 1.0](https://www.reddit.com/r/vim/comments/6znskl/vimrc_review_thread/)",403,101,vimrc review thread 2.0
,20,100,Can Emacs do this?
,16,103,TIL there is a Google style guide for vimscript
"Hugely useful when dealing with multiple vim/neovim instances running between different terminal tabs, or just when trying to copy something in a vim instance which is split into panes.

Explanation:

- `""` tells vim to copy data to a register

- `*` is the system-wide register, AKA the clipboard

- `y` is the yank command

This makes it easy to `Ctrl+p` or `Cmd+p` your selection into another file. Alternatively, you can use `""*p` for pasting from the system-wide clipboard.

EDIT: as pointed out by /u/Grisk13, OS X's default vim doesn't ship with this feature for some reason.

EDIT2: per /u/denilsonsa's [explanation](https://www.reddit.com/r/vim/comments/3i7lv1/til_using_y_yanks_a_visual_selection_to_the/cue7etg), this behaviour is different under X11.",41,97,"TIL: using `""*y` yanks a visual selection to the system clipboard"
,17,99,vim.ink – A vim color scheme designer
,86,104,Build your IDE with Vim and Tmux
,40,99,A Vim start screen? Here it is: vim-startify
,23,100,Orange hjkl (xpost /r/mechanicalkeyboards)
,24,102,Pentadactyl — A fork of Vimperator
,95,98,Vim is a usability nightmare
,72,98,Vim apparently now have a built in functionality to load plugins?
"I've begun using unblevable's [quick-scope](https://github.com/unblevable/quick-scope) along with cszentkiralyi and VanLaser's [cool little hack](https://gist.github.com/cszentkiralyi/dc61ee28ab81d23a67aa).

Press f in normal mode and it will highlight the first unique letter in each word in the current line. If there is no unique letter it will highlight another colour indicating how many times you have to press ; to reach it. An awesome 4 day old combination that I can't recommend enough. Thanks guys.

Edit: cszentkiralyi and VanLaser's ""hack"" has been implemented into the plugin! So good. Go get it: [quick-scope](https://github.com/unblevable/quick-scope)",38,104,Navigating my files never felt so good
,35,102,Vim's speed is not really the point
,9,100,Vim 7.4a ready for beta testing
"Getting the window layout you want can be a bit frustrating sometimes.

One reason for this is that vim does not offer many ways to move windows
around.  `:wincmd H`, `:wincmd J`, etc., are useful but only work when
you want to move a window to the far left, bottom, etc.  It is also very
difficult to ""convert"" a horizontal split into a vertical one when there are more
than two windows.

Take the following example:
 
    +-------------+-------+-------+           +-----------------+-----------+
    |             |       |       |           |                 |           |
    |             |       |       |           |                 |           |
    | current win |       |       |           |                 |           |
    |             |       |       | ctrl-w gj |                 |           |
    |             |       |       |           |                 |           |
    +-------------+-------+-------+           +-------------+---+-----------+
    |                             | +-------> |             |               |
    |                             |           | current win |               |
    |                             |           |             |               |
    +-----------------------------+           +-------------+---------------+

Going from the first layout to the second would normally would require you to
move to the window below, vsplit it, open the correct buffer, and then finally
close the original window.  That's what this plugin does in one command.

https://github.com/andymass/vim-tradewinds

This is a pretty simple plugin.  There are only four maps:

    <c-w>gh: soft move left
    <c-w>gj: soft move down
    <c-w>gk: soft move up
    <c-w>gl: soft move right

Each can be summarized as follows: move the cursor to the window
in given direction, make a split (vertical if moving up/down and horizontal if left/right),
edit the buffer form the previous window, and close the previous window.

This sounds a bit unintuitive at first, but is actually very natural after you start using it. 
There's also some logic to determine whether to make splits left/above or
right/below which tries to make moves as frictionless as possible.

Unfortunately, the plugin isn't perfect as it's only _emulating_ moving windows.
Opening and closing windows and switching buffers can have any number of
horrible side effects.

This would be much better built into vim-

## As a vanilla command

So, I [wrote a patch](https://github.com/andymass/vim/commit/54ae8fe2ca1b7e7012f235c6e09e34fb22ce4952)
to vim.  It turned out to be quite simple to implement using existing functions as a generalization of
the Ctrl-w HJKL movements.  I'm hoping to see if there's some interest before submitting it.
",8,102,vim trade winds - the missing window movement
"Post a link to your vimrc in a top level comment and let the community review it!  Please read https://www.reddit.com/r/vim/wiki/vimrctips before posting. 

NOTE: This thread only works if people take the time to do some review, if you are posting a request, maybe return the favor and review someone else's.

When giving feedback, remember to focus on the vimrc and not the person.

Custom flair will be given out for our brave vimrc janitors who take the time and effort to review vimrc files!

Tips:

 - https://www.reddit.com/r/vim/wiki/vimrctips
 - be patient, reviewing a vimrc takes far more effort than posting a request for review
 - check the bottom of thread, some vimrc's get buried without replies

[vimrc review thread 2.0](https://www.reddit.com/r/vim/comments/7bamoj/vimrc_review_thread_20/)
",364,98,vimrc review thread 3.0
,19,97,"""Vim, Me and Community"" #vimConf2017"
,15,97,[ANN] vim-plug 0.8.0
,23,100,Vim Colors
"I woke up in the middle of the night because of a dream in which I had forgotten to delete a `set nocp` somewhere in my `~/.vimrc`.

Fuck you, Vim.

*(edited for clarity)*",52,99,This is a sign i'm broken.
,33,96,List of vim plugins I use - with mini tutorials 
,28,98,Vim Warrior: use hjkl to survive incoming Emacs and Sublimes
"I was browsing r/vimcommands and I found this:

http://www.reddit.com/r/vimcommands/comments/kb12a/gpattern_command/

but I wasn't able to comment on that post, so I decided to say this in a separate post because I found this amazing when I first learnt about it.

That post describes a Vim command that executes another command in all lines that matches the given expression:   g/<expression>/<command>

The fact is that this is not a Vim exclusive.  It wasn't even new in Vi.  It's an ancient Ed command that people used a lot to print all lines containing a regex.  (Remember that Ed was a line editor -non visual- and people needed to print parts of the buffer all the time).

Back then it was known as:

:g/<re>/p

""g"" for global search (""global"" for all buffer, in contrast to ""current line""), p for print, and <re> for Regular Expression.

So, being ""grep"" the mnemonic, somebody decided that a shell command that do the same thing should be called the same, and so ""grep"" was born.",40,97,The origin of grep
,12,98,Vim speed is not really the point
,35,97,Layout your .vimrc like a Boss
"I just finished reading this book.  Now I'm going back and doing some of the tips. This book has some great stuff in it. It's definitely worth the $20 for the ebook. Have any of you Vim redditors, read it? What did you think of it?  ",35,97,Practical Vim is great!
,40,102,The Smyck color scheme tries to be pleasant for your eyes. You should try it out!
"[**SLIDES HERE**](https://speakerdeck.com/csswizardry/vim-for-front-end-developers)

I’ve just got off stage at [Awwwards Berlin](https://conference.awwwards.com/berlin/) where I decided to give a talk to the very design-centric crowd about how they could make use of Vim in their day-to-day work. I was keen not to bore them with too much in the way of fundamentals, or ‘the Vim way’, so I dove right in with specific examples of problems and Vim’s solutions. I was also less focused on being technically correct, but more on being correct enough to make sense. My ultimate aim was to get them interested in learning more in their own time.

It was very well received! Hopefully some of them might take the leap.

**Edit:** Unfortunately the slides make a little less sense without the animated GIFs in them, but there isn’t much I can do about that.",24,100,[SLIDES] Vim for Front-end Developers
,20,96,vim + tmux
,19,101,The Yet-to-be-Learned Lesson of Vi
"I'll start with mine,

I had an issue with Vim crashing on startup. I had just recompiled a new version and had also made a few vimrc changes earlier that I thought were minor so I had ruled out if that was the problem. 

This particular issue took me a few hours to figure out. In the process I'd explored the Vim Debugger, the `verbosefile`, and even `strace`. 

Finally decided that I'll need to double check my vimrc when I found this gem in there.

    :qa!

Turns out I had tried to exit vim in insert mode and put this into my vimrc. Then forgotten about it and exited again properly leaving this in!!
",82,96,What is the stupidest mistake you have made in Vim?
,23,93,For vim and git users
,27,97,How to make you feel like it's your first time using vim
"I started using vim for development around a year ago and at this point it's ""in my fingers"".  This is great when in a vim environment but terrible when using any other sort of editor!  I came across this when a friend asked me to help troubleshoot some code.  I couldn't navigate around the editor for the life of me!  I never realized how hard it would be to go back to a mouse based navigation once learning vim movements.

TLDR; I used vim for long enough where the movement commands became second nature, hampered my ability to use an editor other than vim. I guess I'm stuck with vim!",100,92,Can't not use vim...
"I was browsing some OmniSharp documentation and saw this:

	function! OSCountCodeActions() abort
		if OmniSharp#CountCodeActions({-> execute('sign unplace 99')})

At first, I didn't believe it was vimscript?! That arrow must be a typo!

Nope. Turns out vim's [had lambdas since 7.4.2044](https://github.com/vim/vim/commit/069c1e7fa9f45a665064f7f2c17da84d6a48f544)! (It has closure functions too!)

`:help expr-lambda` explains:

	{args -> expr1}		lambda expression

I'm not sure this will change my vimscript much, but maybe how I configure plugins.",14,98,TIL Vim supports lambdas
,12,99,Vim Anywhere - Use vim when editing any text field. [macos/gnome/i3wm]
"I've written a neovim plugin for GhostText.   GhostText is
a plugin that lets you edit text areas in your favourite 
text editor. Plugin homepage is [here](https://github.com/raghur/vim-ghost).

Here's a quick demo:

[Demo Gif](https://i.imgur.com/yitnBrU.gif)

**PS**: It's neovim only but I'm posting here since many
vim users use neovim as well",22,97,[neovim only] vim-ghost - edit browser text areas in (n)vim!
,9,93,Awesome vim plugins for writers
,23,99,The Bram Moole-Laaw: There Will be Attempts to Rewrite Vim in Nearly Every New Language
,21,99,Found this on perl.org
"[Vivify](http://bytefluent.com/vivify/)

Ok, so I was a little obsessed this weekend. There still isn't a proper 'download' button/link so you'll have to copy and paste the generated scheme into a file. Sorry for that inconvenience.

Let me know if you have questions or suggestions!",57,99,Vivify - Now with 400+ schemes to get you going. Or upload your own.
"[Vimways Advent Calendar](https://vimways.org/2018/)

&#x200B;

I've been reading the Advent Calendar on daily base and even though I use vim a lot, there is ALWAYS something new to learn, understand and improve. And so far I've learnt really cool things and I haven't even had time to go into detail with all the content so far. It will last for quite some time.

&#x200B;

I just wanted to say 'THANK YOU' to the people who took their time to write articles and deliver little mind blows. I appreciate it so very much!!!

&#x200B;

Have a nice Christmas time everyone!",11,99,I just want to say a BIG BIG THANK YOU to everyone involved in the vimways advent calendar
,8,95,Simple Vim session management: Part 1
,54,98,Why is vim background different inside tmux?
"I messaged the mods about this but got nothing.

Can we get one sticky, mega thread for these types of posts? I believe they are valuable learning experiences and should be kept, but seeing one every other day is starting to feel ""spammy"". It'd be nice if we had one location for these.

Edit:  Oddly enough, it looks like this post got stickied. I guess people can start now(?). Any mods to chime in/verify?

Edit2:  If any mod sees this, we would like a biweekly "".vimrc critique"" thread, not a stickied thread. Even a cursory look over this thread shows how it's starting to fail with this format.",72,93,Sticky request: .vimrc critiques
"A few years back, I decided that my usage of Vim was analogous to a gamer using a 70"" 4K TV to play Pong.  I've been lurking here ever since and while I'm no master, I'm far more productive than I was.

Several nights ago, a massive software installation went sour at work.  Eighteen Linux servers had customer configurations heavily mangled.  And, like the nerdiest action movie ever, we had less than 10 minutes until we were required to have those systems available and I was on my way out the door, having just finished up a completely different set of maintenances.  Using ranges, macros, regular expressions, Tmux, and elephant-strength caffeine, I was able to massage the files back to their original state before the window closed. 

So thank you, kind folks of /r/vim.  You encouraged me to improve a critical skill-set, and are indirectly responsible for preventing a massive amount of mayhem at my place of employment. 

",22,94,My Testimonial
"What are some useful applications with Vim keybindings?  Here is my list so far:

File Managers:

 * vifm
 * ranger
 * [ncdu](http://dev.yorhel.nl/ncdu) - disk usage browser (ncurses)

File Viewers:

 * less
 * xzgv - Image viewer
 * feh - Image viewer
 * apvlv - PDF viewer
 * pdftools - PDF viewer
 * [zathura](http://www.linuxandlife.com/2012/03/zathura-minimalistic-pdf-reader.html) - PDF viewer
 * xpdf - PDF viewer w/configuration

Music Players:

 * cmus - (ncurses)
 * [vimus](https://github.com/vimus/vimus) - (ncurses)
 * [vimpc](https://github.com/boysetsfrog/vimpc)

Organizers:

 * [TuDu](http://code.meskio.net/tudu/) - To-do list manager
 * [calcurse](http://culot.org/calcurse/manual_en.html#options_keys) - Organizer

Web Browsers:

 * Firefox w/[vimperator](https://addons.mozilla.org/en-US/firefox/addon/vimperator/) or [pentadactyl](https://addons.mozilla.org/en-US/firefox/addon/pentadactyl/) or [VimFx](https://github.com/akhodakivskiy/VimFx)
 * Chrome w/[Vimium](http://vimium.github.com/) or cVim
 * [vimprobable](http://www.vimprobable.org/) - webkit-based browser
 * [dwb](http://portix.bitbucket.org/dwb/) - webkit-based browser
 * [jumanji](http://pwmt.org/projects/jumanji/) - webkit-based browser
 * [luakit](http://mason-larobina.github.io/luakit/) - webkit-based browser
 * [uzbl](http://www.uzbl.org/) - webkit-based browser
 * [xombrero](https://opensource.conformal.com/wiki/xombrero) - webkit-based browser
 * [vimb](http://fanglingsu.github.io/vimb/) - webkit-based browser
 * [w3m](http://w3m.sourceforge.net) - browser (text)
 * [qutebrowser](http://qutebrowser.org/) - browser
 * lynx - ncurses web browser

Mail Clients:

 * [notmuch](http://notmuchmail.org/) - mail indexer
 * [sup](http://supmua.org/) - mail client (ncurses)
 * [mutt](https://en.wikipedia.org/wiki/Mutt_%28email_client%29) - mail client

Window Managers:

 * i3wm (kinda)
 * wmii
 * [howm](https://github.com/HarveyHunt/howm)

Shells / Terminals:

 * tmux
 * [Termine](https://github.com/thestinger/termite) - Terminal
 * [Bash](http://www.hypexr.org/bash_tutorial.php#vi) and zsh
 * [all apps using readline](https://wiki.archlinux.org/index.php/Readline)

Misc clients:

 * [tig](https://github.com/jonas/tig) - Git interface (ncurses)
 * [weechat](https://weechat.org/) - IRC client (text)
 * [newsbeuter](http://newsbeuter.org/) Feed reader (text)
 * [rtv](https://github.com/michael-lazar/rtv) Reddit terminal viewer

Office:

 * [viemu](http://www.viemu.com/) extension for [Word](http://www.fastcodesign.com/1669530/why-microsoft-word-really-sucks-it-was-invented-in-a-paper-powered-world), [Outlook](http://outlooksucks.com/), [SQL Server](http://www.brentozar.com/archive/2013/07/sql-server-2014-standard-edition-sucks-and-its-all-your-fault/)
 * LibreOffice w/[Vibreoffice](https://github.com/seanyeh/vibreoffice)
 * [Abiword](http://recycledelectron.blogspot.com/2009/01/vi-and-emacs-key-bindings-in-abiword.html)
 * [Evince](http://ezod.livejournal.com/27552.html)
 * [sc](http://www.linuxjournal.com/article/10699) - spreadsheet (ncurses)
 * [sc-im](https://github.com/andmarti1424/sc-im) - spreadsheet (improved version of previous)

Text editors / IDEs:

 * vim, gvim, neovim, vi  (of course!)
 * vi clones: elvis, [vis](https://github.com/martanne/vis), [pyvim](https://github.com/jonathanslenders/pyvim), [Yzis](https://github.com/chrizel/Yzis), [kakoune](https://github.com/mawww/kakoune), [jVi](http://jvi.sourceforge.net/), [nvi](https://en.wikipedia.org/wiki/Nvi), [Stevie](http://nosuch.com/tjt/stevie/), [vile](http://invisible-island.net/vile/), [BusyBox vi](https://en.wikibooks.org/wiki/Learning_the_vi_Editor/BusyBox_vi)
 * bviplus - Hex editor
 * Misc Editors: sublime text, atom, Emacs (evil mode)
 * Eclipse w/vrapper
 * Eclim - Headless Eclipse for vim
 * XCode w/Xvim or viemu
 * IDEA, Rubymine w/ideavim
 * Visual Studio w/viemu or vsvim
 * Misc IDEs: Gnome builder, QtCreator, monodevelop

No games listed as I don't game much.

Any more you know?  

UPDATE: 10:30pm EST: Hey everyone thanks for the additions!  It's now twice as big as my original  
UPDATE 2015-12-28: more apps from feedback, and other minor edits.  
UPDATE 2016-01-03: Reorganized by category  ",40,93,My list of applications with vi keybindings
,22,93,Vundle Takeover (call for maintainers)
,44,97,Cycle of Vim
"I've always wanted to pipe stuff to vim, but vim invariably replied that 

    Vim: Warning: Input is not from a terminal

and it wouldn't work. Turns out, what I wanted to do is possible: simply pipe your stuff to vim -:

    find . -name complicated_condition | vim -

Very handy, isn't it?",43,97,"Did you know about ""vim -""?"
`10ifoo<Space><Esc>` inserts `foo foo foo foo foo foo foo foo foo foo`. Looks useful to me at the first glance and I wanted to share with you folks.,34,94,"TIL: a, A, i, I, o, O such keys take counts"
,64,96,Why I switched to VIM from Visual Studio Code
"This is my sneaky way of trying to scoop some unused vim secrets out of you without causing too much headscratching if I asked ""what's the best vim secret you wish you knew earlier"".

My answer to this is pretty simple: I had a colleague who was using vim the other day, and repeated pressing h/l to go over several words.  Told him about w & b and blew his mind.  Simple stuff, but I love unlocking that productivity (in myself or others).

Any good stories out there?",135,94,What was the last thing you taught/learned in vim?
"... [and it saved me lots of time](http://imgur.com/qcn1iyY).

...*edit* [version with video controlls](http://gfycat.com/SeriousPepperyIchidna)

I tried to figure out how to do a macro, not knowing `:normal` and it sort of worked, but felt akward. Some minutes browsing the docs later, I tried this version *with* `:normal` and it was awesome! I realize everyone who is even remotely experienced will yawn. I'm still very new, so I'd love to hear how to get even more out of `:normal`.

For those who don't know, `:normal` executes a sequence of keystrokes or commands, including custom keymappings, **and it accepts a range**!
Makes it super useful when crafting little timesaving macros. 

Hope this isn't considered a waste of a post, I'm just so happy about everything new I discover in Vim.

Cheers!

*edit* If anyone is using targets.vim or similar plugins which add wordobjects, is there a way of making 

`f""""ap` *find next `""`, put register a* 

more precise? Something along the lines of: 

`""ani""p` *take register a, put into next inner `""`*?",36,97,I just discovered the power of :normal
,57,95,Vim Paper Color Theme Inspired By Google's Material Design
,26,94,What is this little command window and How do I use it?
,34,91,NerdTree replacement by Tim Pope
,21,96,Vim 7.3 Released!
,32,92,vimade - eye pleasing plugin that fades text in inactive buffers
,36,94,Vim easter egg
,8,96,"""Vim Macros, Create Your Own Automations!"" (Quick tutorial for beginners)"
"Hey r/vim,
I wanted to introduce a sub Reddit I started called r/WatchPeopleVim a sub dedicated to videos of individuals using vim! I was inspired by r/WatchPeopleCode and hope the sub will help others. Please let me know what you think. It's my first time starting a sub Reddit. ",15,93,Introducing r/WatchPeopleVim
,35,91,Vim video lecture at Harvard
,7,94,[humor] A great tool to help wean Vim newcomers towards keyboard only movement.
,64,95,Eigenvimrc - Scrape github for vimrc's and rank most popular options
,17,96,Tmux and Vim: the perfect combination
,25,94,Vim for people who think things like Vim are weird and hard
,23,92,Unix as an IDE
,10,92,Learn Vimscript the Hard Way is up to 46 chapters
"I started by just adjusting my vim config and then fell down a rabbit hole that ended with me spending the whole week writing plugins

1. [vim-subversive](https://github.com/svermeulen/vim-subversive) - Adds two operator motions to quickly replace text.  The first is pretty basic and just replaces the given text object with the given register.  The second is more interesting because you can specify both the text to replace and the range of lines to replace the text over by providing two text objects (see the gifs for how this actually looks in practice)

2. [vim-yoink](https://github.com/svermeulen/vim-yoink) - Automatically stores a history of yanks and allows cycling between them after a paste.  Similar to Yankring or miniyank if you know those

3. [vim-cutlass](https://github.com/svermeulen/vim-cutlass) - Very simple plugin that just makes the delete keys actually just delete instead of also yanking.  Based on some [old posts by Drew Neil](http://vimcasts.org/blog/2013/11/registers-the-good-the-bad-and-the-ugly-parts/). Similar to [vim-easyclip](https://github.com/svermeulen/vim-easyclip) except a lot less bloated.

Happy to hear any feedback  :)",22,93,Spent the extra time over the holidays making three new vim plugins!
,1,92,Unified navigation of splits and tabs in vim and tmux
,59,91,"ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}"
"In patch [8.0.1206](https://github.com/vim/vim/releases/tag/v8.0.1206), Vim has added 2 new events: `CmdlineEnter` and `CmdlineLeave`.
To help me remember when they can be useful, and how to use them I wrote [a gist](https://gist.github.com/lacygoill/88437bcbbe90d1d2e2787695e1c1c6a9) about it.

Unrelated, but there's also [a PR on Vim's github repository](https://github.com/vim/vim/pull/2198), which could highlight all matched text while incremental searching.

And on Neovim's repository, there's [a PR](https://github.com/neovim/neovim/pull/7422), where they mention more
generic events, maybe called `ModeEnter` and `ModeLeave`.
",16,93,"Vim 8.0.1206 has added 2 new events, CmdlineEnter and CmdlineLeave"
,26,92,Dues - A better color scheme for the late night coder
,31,95,patch 8.0.0609: some people still don't know how to quit
,28,93,completor.vim - Async completion framework made ease.
,34,92,"Vim You, Autocorrect!"
,46,90,The Oldest Rivalry in Computing - Forget Apple vs. Google. Emacs and Vi have been battling for text-editor supremacy among programmers for 40 years.
,58,92,Announcing: vimrcfu - Share your best vimrc snippets
,40,91,Why I use Vim (in GIF form)
,17,91,I wrote a vim syntax file to add syntax highlighting for my lecture notes. Conceal is an awesome feature!
,22,87,"Hacker News seems to like my .vimrc, maybe you will too"
"Just a quick tip…

    $ vim -q <(command)

starts Vim with the quickfix *list* populated by the results of `command`. This can be useful with `grep` (or `ag`):

    $ vim -q <(grep -Rn foo *)

Add `+cw` to also open the quickfix *window*:

    $ vim -q <(grep -Rn foo *) +cw",32,93,vim -q FTW
,16,87,"Hi /r/vim, I've made a Vim colorscheme generator, check it out."
"I have started noticing how painful non-vim editing is (like in this very text box posting to reddit!). Feels like I really have my vim ""sea legs"" and it feels good! That is all, just wanted to share with folks who will understand :-)",53,90,A nice realization after a few months of using vim
,54,87,"Commented the heck out of my .vimrc; lots of plugins, settings and mappings explained."
,42,92,"Vim is love, gvim is life"
,22,89,(Not only) Google Calendar in Vim
,13,86,:Sex
"I'm looking for a theme that supports both vim and iterm2. Here are a few examples:

\- [Dracula](https://draculatheme.com/), this is probably the biggest theme family that I've found. They have everything, from slack, xcode, vcs, atom, sublime to vim, emacs, iterm2, zsh,... Just wow.

\- [Nord](https://github.com/arcticicestudio/nord), similar to Dracula, they support colorscheme for a ton of different tools.

\- [Tender](https://github.com/jacoborus/tender.vim), they only have vim and iterm2 colorscheme, but it's pretty good and currently used by myself.

\- [One dark theme](https://github.com/rakr/vim-one), this is probably the most popular colorscheme for all tools, but I don't like it because it's so mainstream and therefore doesn't have anything special.

\- [Material](https://github.com/jdkanani/vim-material-theme), I used to be a fan of this theme when I still use Sublime, but then got bored because of its blue-green color or whatever the hell you call it.

\- [Challenger deep theme](https://challenger-deep-theme.github.io/), pretty unique but the iterm2 colorscheme doesn't look so good.

\- [Snazzy](https://github.com/connorholyday/vim-snazzy), Dracula's twin.

\- Grubox, Base16, Tomorrow and Monokai: I tried all of them, too bad I don't like any.

That's all I know so far. If you guys know any pretty theme which has:

\- Vim colorscheme with lightline support

\- Iterm2 colorscheme

\- (optional) zsh colorscheme or dircolors

Then please share with me, I would be much appreciated.",39,89,Vim theme family
"
What are your tips for doing it better? 

Are you using markdown? Latex? 

What is your file structure? 

What plugins do you use? 

Any ideas for changing keyboard layout? 

Using phonetic language?",43,88,Is there anyone else using Vim to take notes?
"I'm a CompSci University student. I've been using Vim as my source code editor solidly for about the past year. I was slowly introduced to Vim, beginning with using it to quickly edit config files in Linux. Once I got use to the motion keys I fell in love with not having to reach over for my mouse every two seconds. At the time I was using Sublime Text, and I set up the Vim keybindings there and used that for a long time.

Eventually I just fully switched over two Vim. Once I learned how to install plugins I was off to the races. I've never tried NeoVim though. I'm using Vim8 now, so I'm able to use plugins which utilize asynchronous execution. I've always been curious about NeoVim, but with all of the time and configuration tweaking that I have poured into Vim I'm reluctant to switch. I notice on forums, and other places online that allot of developers seem to be using NeoVim. What are the advantages, if any, of NeoVim over Vim8? ",134,88,Should I be using NeoVim instead of Vim8?
"Ever since I started using terminal Vim I simply use gnome-terminal. It makes sense since I have only worked in Ubuntu and Debian distributions. Using it with solarized-light theme it now [looks like this](https://imgur.com/a/45tYJ).

My question is: Besides gnome-terminal,  what other terminal emulators do you guys use?",187,88,"Terminal Vim users, what terminal emulator are you using?"
"From `:h shell-window`:

""There have been questions for the possibility to execute a shell in a window inside Vim.  The answer: you can't!  Including this would add a lot of code to Vim, which is a good reason not to do this.  After all, Vim is an editor, it is not supposed to do non-editing tasks.""

Might want to update that part :p",70,89,"""After all, Vim is an editor, it is not supposed to do non-editing tasks."""
"[match-up](https://github.com/andymass/vim-matchup) provides motions
between matching words like if/else/endif (`%`, `g%`, `]%`, `[%`),
corresponding text-objects (`a%`, `i%`), and general highlighting between
matching words.  Vim's standard matchparen only supports highlighting of
single characters `(),{},[]`, but with match-up anything that can be
navigated with `%` will be highlighted ([screen animation](https://raw.githubusercontent.com/wiki/andymass/vim-matchup/images/match-up-hl1.gif)).
It will also display matches which are outside the extents of the screen
in the status line, which turns out to be surprisingly helpful when
dealing with large code blocks.

If you have used matchit, the motions `%` and `g%` should be familiar.
The other motions and text objects were partially implemented by matchit,
but it did not handle many cases correctly (this is pretty tricky to do
with counts, operators, repetition, etc.), and has suffered some bit-rot
with newer vim versions.  match-up is designed to be a drop-in replacement
for the old matchit plugin and it should already work with any language
supported by matchit through `b:match_words`, although it has only been
thoroughly tested by me with vim script.  The eventual goal is to support
even languages which don't use matching words (like python).

match-up requires a fairly new version of vim (needs `reltime()`), and it
will be a bit slower than the old plugins because it is doing a lot more.
I would be happy to receive any feedback regarding performance or anything
else.

",24,85,match-up: a modern enhanced matchit replacement
,6,89,"Vim Creator Champions Charityware: Bram Moolenaar Discusses Developing the Popular Text Editor, How He Uses It, and Version 8"
,20,89,A Good Vimrc
,40,89,"codi.vim - An interactive coding scratchpad, like Numi for your favorite interpreted language."
,11,88,A seriously helpful interactive Vim cheat sheet
,14,86,An experimental Vim fork with multi-threading capabilities
,23,85,I made a website that looks like it's from a vim session. Opinions?
,29,89,VIM Table Mode
,8,88,Bill Joy's greatest gift to man – the vi editor
,41,90,SpaceVim release v0.7.0
,28,88,Vim + Firefox: FZF + Navigate Tabs As Buffers
,13,88,"PSA: You can get some of the same feedback from the ""vimrc review thread"" by using a vim script linter"
,57,89,"My (NEO)VIM workflow (some classmates wanted to see, so I thought why not share it here too?)"
"I've been using Vim for more than 10 years as my primary text editor and for everything I do.

We all know Vim development is slow and conservative to changes, there is Neovim for more progressive development.

So at this rate of vim development, what do you think the future of vim looks like?

There have been many converts to Neovim already; my question is, is the future of Vim good in your eyes? Would the community end up splitting? How is this going to affect Vim and plugin development?

Are you switching to Neovim or have you switched already?

Do you think Vim can still benefit from Neovim and refactor/fix some of its code?",179,90,What the future lies for Vim?
"Im using SFmono for now.
How about you guys??
",146,84,Your favourable font?
,20,90,Persistent Undo in Vim
,24,84,Profiling and Optimizing Vim
"https://twitter.com/tpope/status/460154033572155392

It's even the tagline on his account now. Is this some eat pray love kinda jackassery?",30,87,"Can anyone explain Tim Pope's ""vim, tan, laundry"" joke?"
"Apart from the occasional cryptic message 'mark not set', when I get ham fingers, I have never used marks in vim. I don't even know how I would do that. Am I missing much?

Do you use marks? Are they useful?",43,83,Something I have ignored for years: marks
"Welcome to the third weekly Vim tips and tricks thread! Here's a link to the previous thread: [#2](https://www.reddit.com/r/vim/comments/4b9hg5/weekly_vim_tips_and_tricks_thread_2)

Thanks to everyone who participated in the last thread! The top three comments were posted by /u/begemotz, /u/SurpriseMonday, and /u/ronakg.

Here are the suggested guidelines:

* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, please explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",100,85,Weekly Vim tips and tricks thread! #3
,25,86,vim-airline: Call for maintainer(s)
"The most geeky social network in the world doesn't have what Google+, Twitter and Facebook have?

It is hard for me to browse the web without vim keybindings :(",38,85,Reddit should add vim keybindings to its web interface
"I'm just wondering what the community at large feels about NeoVim.

When it was first announced I was a little bit skeptical, along the lines of Bram's thinking, I thought it was a noble task that would be to big of a task and would fizzle out after 12 months. 

Now, I'm not so sure, it seems to be gaining traction and mindshare and progress seems to be good and the promise of new language  interfaces appears to be bearing fruit. 

I'm wondering what Bram feels about this really, he seems rather skeptical and he's either right to be because he's wise (which seems likely) or he's wrong because too invested in the current code base and he's not willing to participate in this reboot (which seems possible).

For example, one of the arguments against NeoVim is dropping support for certain systems. I think it's a shame to lose that support, but the existing Vi/Vim code bases aren't going anywhere and NeoVim will cover the ""main"" operating systems, so if it's a case of holding NeoVim back, then I think we can and should lose that support. 

Basically, I originally thought this would be a flash in the pan, but now I'm wondering if it will become the de facto Vim. What are your thoughts? Do you think it will replace Vim? Do you want it to succeed? Do you think it will fizzle out?",89,88,What's the word on the street about NeoVim?
,38,88,"wasavi: vi in browser text areas, but not everywhere else"
"I wanted to give a speech on Vim for a while now. But I figured, I could talk about Vim for hours.


So instead I've decided to start this project. The idea is simple: create short, sequential videos and try to cover as many topics as possible. So a newcomer to Vim can just fly thru them and get as much insight as possible.


I believe that even more experienced users will learn something. This project is also for me, as it will allow me to refresh some of the knowledge as well as learn how to teach.

This is my [channel](http://www.youtube.com/MinuteVimTricks), so it may not be great (was a bit grumpy and nervous too), but its a start.

EDIT: I made another video on topic of [colorschemes](http://www.youtube.com/watch?v=9pX9zMIKeuY). Felt a bit more confident this time. Feedback appreciated.",19,88,I've started making Vim video tutorials
,12,86,Planning Vim 7.3
,21,89,Death by a thousand files [Vimways 13/24]
,12,90,International Vim conference VimConf 2018
,17,86,Auto pairing your Vim theme with your terminal theme
"In the tabs versus spaces debate I have always been a huge fan of tabs. I've been coding Python for a year in Vim now, and have always been using tabs. Until I realised that Vim converts tabs to four spaces. It does it so smoothly that I didn't notice I have been using spaces for the past year.

I feel betrayed!",98,87,Vim betrayed me!
"I recently discovered that vim8 is almost there, but vim.org looks like back in the 90s. I think it would be awesome to give to vim a new showcase. 

What do you guys think?",77,85,Do you think vim deserves a whole new website?
,56,85,"ELI5: Why is NERDTree discouraged, but everyone loves vinegar?"
,8,83,VimL looks like everyone's little secret
,22,86,Neovim new funding campaign hits first goal in 48 hours
,18,87,Your problem with Vim is that you don't grok vi
"Much of the success and popularity of vim-airline can be attributed to powerline, which paved the way for making the statusline vibrant and full of information, and I owe much thanks to Lokaltog for such a brilliant idea.

Many of the features of vim-airline piggyback on things exposed by other plugins, like the tagbar extension which displays which function the cursor is in (useful when you work on project with 1000+ line functions).

Today, I'd like to announce a completely original idea: [a smart tab line](https://github.com/bling/vim-airline/tree/dev#smarter-tab-line).  

This resolves the age-old question of how does Vim work with buffers and tabs.  I hope you guys like it!  :-)",70,83,A vim-airline original feature: smarter tab line
,14,86,Got a vim-poster for christmas this year
,13,88,Seven habits of effective text editing
"I was looking for how to replicate external editing in vim.  Found the plugin vim-ghost and decided to try it.

The problem is that it depends on a direct (not pypi hosted) install from github of this: `https://github.com/dpallot/simple-websocket-server`

Right, that's strange, but I have a safe-ish firewalled area to test it in.

The first thing I noticed is that simply importing that SimpleWebSocketServer immediately opened an https server publically.

    from .SimpleWebSocketServer import *

And one of those imports is `SimpleHTTPSServer.py`:


    '''
    The MIT License (MIT)
    Copyright (c) 2013 Dave P.
    '''

    import BaseHTTPServer, SimpleHTTPServer
    import ssl

    # openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem
    httpd = BaseHTTPServer.HTTPServer(('', 443), SimpleHTTPServer.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile='./cert.pem', keyfile='./cert.pem', ssl_version=ssl.PROTOCOL_TLSv1)
    httpd.serve_forever()

I changed it to this, just to test the plugin (which I'm using right now).

    '''
    The MIT License (MIT)
    Copyright (c) 2013 Dave P.
    '''

    import BaseHTTPServer, SimpleHTTPServer
    import ssl

    # openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem
    # no no no no do not do this
    # httpd = BaseHTTPServer.HTTPServer(('127.0.0.1', 443), SimpleHTTPServer.SimpleHTTPRequestHandler)
    # httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile='./cert.pem', keyfile='./cert.pem', ssl_version=ssl.PROTOCOL_TLSv1)
    # httpd.serve_forever()

    def getSimpleHttpServer():
        httpd = BaseHTTPServer.HTTPServer(('127.0.0.1', 443), SimpleHTTPServer.SimpleHTTPRequestHandler)
        httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile='./cert.pem', keyfile='./cert.pem', ssl_version=ssl.PROTOCOL_TLSv1)
        httpd.serve_forever()

Even so, I still got the firewall warning with a pseudo-random port.  So I took a look at vim-ghost.

In `ghost.py` (under rplugin/python3) lines `94-110`:

    @neovim.command('GhostStart', range='', nargs='0')
    def server_start(self, args, range):
        if self.server_started:
            self.nvim.command(""echo 'Ghost server already running on port %d'""
                              % self.port)
            logger.info(""server already running on port %d"", self.port)
            return

        if self.nvim.funcs.exists(""g:ghost_port"") == 1:
            self.port = self.nvim.api.get_var(""ghost_port"")
        else:
            self.nvim.api.set_var(""ghost_port"", self.port)

        self.httpserver = MyHTTPServer(self, ('', self.port),
                                       WebRequestHandler)
        http_server_thread = Thread(target=self.httpserver.serve_forever,
                                    daemon=True)

Again, unless you intend to let people on other machines edit your reddit posts in McDonald's or Starbucks, you really do not want top open a public web socket.  I'm not sure how windows does it, but if you open an unbound socket and don't allow it with the firwall, it blocks it for localhost as well.  That means it's either insecure, or will not work.  That's probably not a good idea.

I changed the code on my copy (that I'm using now) like so: (and got rid of that pesky firewall warning for Python.app)

    @neovim.command('GhostStart', range='', nargs='0')
    def server_start(self, args, range):
        if self.server_started:
            self.nvim.command(""echo 'Ghost server already running on port %d'""
                              % self.port)
            logger.info(""server already running on port %d"", self.port)
            return

        if self.nvim.funcs.exists(""g:ghost_port"") == 1:
            self.port = self.nvim.api.get_var(""ghost_port"")
        else:
            self.nvim.api.set_var(""ghost_port"", self.port)

        self.httpserver = MyHTTPServer(self, ('127.0.0.1', self.port),
                                       WebRequestHandler)
        http_server_thread = Thread(target=self.httpserver.serve_forever,
                                    daemon=True)
",18,83,If you have used or are using vim-ghost you should probably stop until you read this and patch it.
"I'm new to vim and it's amazing what this editor can do, I'm working on a system to keep track of the finances of a small company and the accountant sent me all the invoice data from the last 3 years in excel, needless to say it was really badly formatted, dates were in a weird format, invoice numbers were prepended with weird stuff sometimes, etc...

So i needed to get this data neat and tidy into the database and I picked vim to format it, for the dates i managed to reorder them with `:%s` and some regex, then created a macro to add the parenthesis around the line, add the commas between each field, and remove extra spaces, after recorded it was amazing doing `3000@r` and watching everything get formatted, I'm in love with vim now and will use it for any text editing needs",23,87,Vim is awesome for editing sql files
"The alt-text from  https://m.xkcd.com/1806/ reads: 

""If used with software that could keep up, a scroll wheel mapped to send a stream of 'undo' and 'redo' events could be kind of cool.""

/r/emacs did this: https://www.reddit.com/r/emacs/comments/5xi92h/a_scroll_wheel_mapped_to_send_a_stream_undo_and/

so I thought we might want something too.

    set mouse=a
    map <ScrollWheelUp> <C-r>
    map <ScrollWheelDown> u
    
is working in terminator on ubuntu 6.10 for me :)",17,85,Vim scroll wheel idea from XKCD
,28,84,How to Do 90% of What Plugins Do (With Just Vim)
,9,82,Google's VimScript Style Guide
,51,83,I didn't know you could do this with the mouse.
,25,85,Villustrator - Vim Colorscheme Generator
,7,86,Vim Creep
,20,86,"Nice youtube channel about vim (with cool mutt + vim tricks, too)"
"My friends use Discord RPC for Emacs and Sublime, and I wanted to join them. ^I ^know, ^my ^code ^is ^terrible. ^^suggestions ^^for ^^good ^^code ^^plz?

Link: https://gitlab.com/betseg/vim-dcrpc",24,85,"My friend used Discord RPC in Emacs, so I did one for Vim."
"I got curious the other day and apparently `quit` works in `.vimrc` as well. So you can do:

    echo 'quit' >> ~/.vimrc

while your friend is AFK and then sit back and enjoy the show. For an extra level of riddle add some fake segfault messages before quitting.",85,86,An evil trick to prank vimsters
"I used to use bitmap fonts like gohufont, tamzen, zevv-peep, etc to name a few. However, due to my current situation, I'm sort of forced to use ttf font at the moment. 



Now, I've sort of realized just how spoiled I was, because I can not for the life of me find a good ttf font to use :(




Could you guys show me what ttf font you use? 
screenshot included if possible! thanks in advance!
",94,83,What's your Favorite ttf Font for terminal or text editor?
"Are there videos of Vim users showing off how quickly they can type? I'm having trouble finding any. 

Bonus points for recording one and uploading it yourself!

*edit: thanks for all the sources!*",29,84,YouTube videos of vim users showing off
,30,86,vim-galore: everything you need to know about Vim
,21,87,How to boost your Vim productivity (repost but awesome)
,14,86,Microsofts competitor to vim
,21,86,CoVim Plugin Just Released! (Adds Real-Time Collaboration to Vim)
,26,81,A smarter statusline (code in comments)
"Hello everybody. I want to present my first attempt to write a vim plugin, in order to reduce my day-to-day context switching. I've been Vim user for more than 10 years, but I always try to stick to the vanilla Vim. Until recently.  


In my day-to-day work I have to switch between psql and Vim and I thought: 'Ok, isnt't it nice to have a way to execute queries to the DB directly from Vim?'. I searched around for similar solutions, but I didn't feel that they are my thing. And this is how the vim-pg plugin was born. So basically, it's a wrapper around PostgreSQL's psql and it sends visual selection directly to the DB, returning a result in another split. Now I'm using this small thingy in my work and I'm pretty happy with it. This is the repo: [https://github.com/vpenkoff/vim-pg](https://github.com/vpenkoff/vim-pg)

Any comments, suggestions, critics... all is appreciated. Cheers! ",25,83,My first VIM plugin to ease my life
"Saw a thread, about 5 month old, discussing the coming end for vimfx and other vim-like addons for firefox. Just wanted to see an update from you, guys.

As for me, I'm lost, really. Looked at Qute, LuaKit, palemoon and waterfox in terms of different browsers altogether. Waterfox had a strange bug, could not be bothered to fix it, luakit has youtube limitations apparently (only 720p videos), qutebrowser is nice but I need to figure out its addblocker. So far palemoon seems to be my future browser of choice.

As for addons, tried some, lost my patience, probably tomorrow i'll sit with determination to really look at the options.

Anyways, how you guys doing? What choice did you make? ",78,84,Life post Firefox 57
"Add this to your .vimrc

    au BufNewFile,BufReadPost *.md set filetype=markdown
    let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']

Now when you open markdown files all fenced code blocks like so:

    ```javascript
    alert(0);
    ```

will have syntax coloring.

This is also great with Scratch plugin (https://github.com/mtth/scratch.vim), when you set this:

    let g:scratch_filetype = 'markdown'

Should work ootb with new VIM versions, but if not, then you can use tpope markdown repo:
https://github.com/tpope/vim-markdown",15,86,Markdown with fenced code blocks is great
,71,81,"Spacemacs: The best editor is neither Emacs nor Vim, it's Emacs *and* Vim!"
,21,85,NeoVim Newsletter - Issue #2
,37,80,"Somehow, I made it a year into using Vim without learning about omni-completion. If you're not already using it...highly recommend (with Supertab plugin)."
,8,81,How I boosted my Vim
"From `help |`:

[This is not a pipe.](https://i.redd.it/xqfjdw15srv11.png)

:-D I found it by myself. I was reading F/f. Looked around and found it.",18,83,Ceci n'est pas une pipe.
"I learned about [anonymous snippets in UltiSnips](https://www.sirver.net/blog/2011/07/26/anonymous-snippets-in-ultisnips/) and it inspired me to write snippets at home, as a hobby. For those who don't know, [UltiSnips is a snippet plugin](https://github.com/SirVer/ultisnips) and an anonymous snippet is a string of text that you can build dynamically and then send to UltiSnips. The result gets inserted directly into Vim. Since it's all just strings, you can get pretty fancy with it.

&nbsp;


Here are videos of my top 3 snippets:


**Automatic docstrings**

https://asciinema.org/a/192305

Once you're done writing a function, a docstring can be generated using the function body, as reference. This one's unexpectedly a huge time-saver on big projects.

I implemented it for Google-style, Numpy, Sphinx, and Epydoc style. Any style could be supported without that much effort though.


**Function auto-completion**

https://asciinema.org/a/192301

It's simple. Start writing a function, wait a fraction of a second and UltSnips will auto-fill all the args in for you. It requires jedi-vim and UltiSnips though.

I saw someone do this using OmniSharp and thought ""Dope, can I do that?"". Turns out, the answer is ""Yes! Easily!""


**Dunder methods**

https://asciinema.org/a/192306

PyCharm and Sublime both have this feature so I figured I'd bring it to Vim, using UltiSnips. To be honest this didn't need to ""auto-generated"" but it was a good first test for using anonymous snippets.

&nbsp;


As you can see, UltiSnips is awesome.

Unfortunately, I've kind of ran out of ideas of things to do so I was wondering if anyone else has been using UltiSnips and, if so, please share what you've been using it for. It'd be great if this post inspired more people to use it.",36,82,Anyone else (ab)using UltiSnips?
"I've been using vim for a few months, and I'm fairly fast, but I've stayed at this speed for weeks. I know that I'm not fully utilizing vim's power. How do I keep learning new tricks and improving? Most Google results for ""get better at vim"" are just rehashing the basics.",32,84,How to continue to improve at vim?
"This is a thread all about Vim's powerful undo, give us your best tips and favorite features. ",38,83,Everything About Undo (and Time Travel)
"**Announcement: If there are no objections, these threads will transition from weekly to biweekly (every two weeks) to space them out a bit. Does this sound like a good idea or should we stick to weekly?**

Welcome to the sixth weekly Vim tips and tricks thread! Here's a link to the previous thread: [#5](https://www.reddit.com/r/vim/comments/4e6d0f/weekly_vim_tips_and_tricks_thread_5)

Thanks to everyone who participated in the last thread! The top three comments were posted by /u/robertmeta, /u/MisterOccan, and /u/Godd2.

Here are the suggested guidelines:

* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, please explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",58,82,Weekly Vim tips and tricks thread! #6
,20,84,Sublime-like minimap for Vim
"I've been a sublime-text fan for a little over a year. It was my first Python IDE / Editor, and I loved it. I kept on hearing people talk about vim, and it looked interesting. Since I do freelance work, it doesn't matter if I take a few days off to learn something (like Vim), especially if it'll make me faster in the long run. So, over the past few days, I've been learning Vim. Here's some stuff I found out about:


Many people (including me) used their old text-editors like Notepad with syntax highlighting. Vim forces you to use commands, and these commands make you way faster than when using Notepad with syntax-highlighting. When learning vim, learn the **very basics**, and then find some small commands that'll increase your productivity a-lot versus your previous editor. This will let you start working faster right away, and keep you coming back to vim. For me, it was ""change inner [something]"", or ci[something]. This finds the next two [something] characters, removes the text between them, and then puts your cursor between them in insert mode. O, o, and a are also really great.


Don't use the arrow keys. It's really not hard to start using hjkl, and it's great when you just need to move your cursor a little bit. I used to hate having to reach for my mouse or the arrow keys whenever I had to move my cursor only a few characters.


If you're using whitespace properly, { and } are pretty great. They'll jump to the next ""paragraph"", or section of text surrounded by whitespace. Great for quickly skipping through some functions or class definitions.


Find, at max, five plugins for your first week. You don't want to load up vim with a bunch of plugins you barely use. Find a few that are really good and learn how to use them well. For me, so far, I've been using:

* [Supertab!](https://github.com/ervandew/supertab)
* [Transparency Windows!](https://github.com/mattn/transparency-windows-vim)
* [Vim-Airline!](https://github.com/bling/vim-airline)
* [Vim Multiple Cursors!](https://github.com/terryma/vim-multiple-cursors)


Don't use Nerdtree. [Use netrw. It does everything NerdTree does, and it's already in vim.](https://medium.com/@mozhuuuuu/vimmers-you-dont-need-nerdtree-18f627b561c3) Really though, [you should be using buffers.](http://vim.wikia.com/wiki/Vim_buffer_FAQ)


Get a nice colorscheme, and a vim cheatsheet. I use [monokai](https://github.com/lsdr/monokai) and [this cheatsheet wallpaper.](https://github.com/LevelbossMike/vim_shortcut_wallpaper) If you use a wallpaper like that, set it as your desktop background and set your vim transparency to 15 (you might need a plugin for this, like I did). It lets you look at the commands while editing in vim.


If you've done this, you know the basics, and you've learned a couple power-commands, vim will be way better than your previous editor.",56,84,I've Converted :)!
,66,83,"Hey /r/vim, I've seen a lot of confusion with buffers vs tabs, so I've tried to explain it as simply as possible for other Vimmers."
,14,83,Using multiple cursors simultaneously with Vim
,17,82,"People often asked me why I use vim, so I wrote this as a response..."
,23,82,Forget easy-to-use design. Choose something hard instead
,9,81,"I'll have a single with cheese, large fries, and a frosty."
,6,82,ctrlsf.vim: update to v2.0 and support asynchronous searching
,9,83,Vim Macro Trickz
,10,82,[History Channel's Hunt for the Zodiac Killer] Solving the Zodiac cipher with Vim shortcuts
"http://www.typingstudy.com


I spent most of my life just using my index and middle finger to type. Doing the exercises above helped me learn proper form. I've found that my overall vim experience has improved as well, hence the post here.

",23,80,Want to learn proper typing form? This is my favorite website
,33,82,Turn out vim is quite popular in the Stack Overflow Survey 2017
,8,80,[Humour] Vimcryption
,7,78,Vim script cheatsheet
"Plugins are ""free"" when they don't ask anything from you. You don't have to set them up or make up new keyboard shortcuts, and they don't dramatically increase startup time. Great examples are basically all tpope plugins, especially `repeat` and `surround`.",52,80,"What are your favorite ""free"" plugins?"
,80,79,Vim Configuration From Scratch in 2016
,21,83,Let Vim do the typing
"Google is killing another product: http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html

Fingers crossed this means vim will be moving to Github.
I started a [thread on vim_dev mailing list](https://groups.google.com/forum/?fromgroups#!topic/vim_dev/ehzfCDccmek), we'll see what Bram says.",37,79,Google Code is shutting down. A possibility vim source code repo will be moving to Github?
"So lately a lot of people have been asking me about _Vim_ and what it is, what can it do. Why is it so different. So I thought I'd find something on YouTube to show them just how powerful this editor gets but I couldn't find anything appealing. It was mostly outdated videos of people struggling through macros.

Am by no means power user but I am proficient enough that I could make some sort of example video if I could find time. My voice is not all the pleasant to listen to, in fact I think goose farting in the fog would be more entertaining than me. My question is, do you guys have some video that shows how a real power user is working with Vim. I remember seeing few videos over at /r/vim_magic but those are now set as ""private"".

Thanks in advance!",31,79,Need a video of Vim power user.
,29,80,Ranger - the CLI file manager (X-post from /r/commandline)
"Hi vimmers!
I recently finished the next version of my colorscheme, which I now want to release into the wild in order to get some feedback from you. It contains a dark and a light scheme. The biggest improvement in this version is the full 256 color terminal support, for which feedback is welcomed the most.

Let me know what you think!

https://github.com/freeo/vim-kalisi",26,80,New dark & light & 256 colorscheme: kalisi
"Two years ago today, I purchased a copy of Sublime Text 2. I paid $70 for it and
could not have been happier. It was fast. It was pretty. It had tons of
extensions. It ran on every OS so I could use it at home on my Mac, at school on
Linux, and at work on Windows.

Fast forward to last week. I just started a new job and recieved a shiny new
MacBook. I promptly installed Sublime on it and got to reinstalling my plugins.
I was unable to get several of them to work which was frustrating. SublimeLinter
in particular was annoying. Development of the SublimeLinter plugin for ST2 had
stopped some time ago, and still had some obvious bugs in it, which were never
going to be fixed since the developers had already abandoned it for the new
SublimeLinter3.

The whole ecosystem for Sublime feels like it's falling apart. People have ditched
development for ST2 in favor of ST3 which is still in beta. Speaking of ST3, the
last dev build was way back in May, and apparently progress had been stagnating
even before then. Then theres a long period of silence until two weeks ago when
someone posts to /r/programming [""Proof Sublime Text is still
alive""](http://www.reddit.com/r/programming/comments/2bhczt/proof_sublime_text_is_still_alive/).
Still no details on when things will be picking back up. Plugin development is
hard because the API is not really well documented. It's also closed source
which doesn't help the rate of development.

People kept telling me how awesome Vim is so I thought ""what the hell, let's
give it a go"". I spent this weekend finding alternatives to the Sublime plugins
I use, setting up a good `.vimrc` and learning some basic commands. I thought it
would be hard remembering all the commands, but once I got started, I realized
that was a load of crap. Now that I started with an open mind and put some
effort and time into learning it, I think it makes MORE sense than common editor
keyboard shortcuts. Like, why the hell does EVERYTHING in Sublime live under Cmd
+ P?

Anyways, I'm going to try to spend this next week Sublime free. Wish me luck!
",45,79,Sublime Text - The Breakup
,6,82,Flat Design Vim Icon inspired by http://flaticns.com/
,6,79,"NeoVim - Clipboard integration, Python plugins"
,30,85,Vim.js: JavaScript port of Vim
"Now we'll take the almighty fan brush. I'll go over the colors one more time that we use: Titanium white, Thalo green, Prussian blue, Van Dyke brown, Alizarin crimson, Sap green, Cad yellow, and Permanent red. That's the way I look when I get home late; black and blue.

I'm going to mix up a little color. We’ll use Van Dyke Brown, Permanent Red, and a little bit of Prussian Blue. All kinds of happy little splashes. If there's two big trees invariably sooner or later there's gonna be a little tree. Life is too short to be alone, too precious. Share it with a friend. Everyone wants to enjoy the good parts - but you have to build the framework first. If it's not what you want - stop and change it. Don't just keep going and expect it will get better.",75,79,I remappped the caps lock and escape key on my keyboard. My life with vim has changed dramatically.
,24,81,Learn Vimscript the Hard Way
,23,82,TIL you don't need to use '/' as a delimiter in a replace command.
"Sometime ago, I wrote [vim-ghost](https://github.com/raghur/vim-ghost)- a neovim plugin that lets you edit browser text areas in vim.  This works on Windows & Linux and has been a lifesaver for editing markdown and code posts (which ends up being the majority of sites I'm on)

Till now it was a neovim only 'remote' plugin. Today, I finally got around to making it **vim compatible** - so it's worth spreading the goodness :)

Also, finally I get to remove one more `if has(""nvim"")`",22,76,vim-ghost - edit browser textareas in vim
"Personally, I use 3 marks per file, and set them to certain locations. 'i' is at the top of the imports, 'd' at the top of my data type declarations (I do haskell) and 'c' is at the current ""focus"" of my work.

I was wondering how you use them.",59,83,How do you use marks?
"With Microsoft buying GitHub there seems to be a big move towards GitLab now. I'm curious if any maintainers of plugin managers (specifically vim-plug since it's what I use) have said anything about supporting GitLab? For instance, `Plug 'user/repo'` will just look to GitHub. Is there any plan to include GitLab in the future?",30,79,Plugin manager support for GitLab?
"Post your favorite workflows (one per post please). Bonus internet points for linking to the other tools you use and posting screenshots and/or videos (tip: https://asciinema.org/ is awesome)!

This is very much in the vein of Unix As An IDE in which Vim is the editor component... Do you use watchers? Build tools? Kick stuff off with keypresses? Tmux? Tiling WM? Code coverage visualization? Plugins? Etc.
",56,76,Workflows That Work
,16,80,Why vim is useful for non-programmers (like data scientists) - would love some feedback!
,33,77,"Images of settings for cmd.exe based Vim with 256 color, mouse w/scrollwheel, backspace, dynamic cursor, etc in ConEmu (All thanks to Maximus5/ConEmu!!!)"
,10,80,I generally have to google for these so i created a list of Vim/Bash/Python/Perl/linux Guides/Tutorials and cheatsheets
,33,79,Vim ported to iOS
,8,77,"Just found out about r/vim, check out this Vim Esc key I ordered from a group buy!"
,2,77,Dictionary.com word of the day
"When 7.3 was approaching 7.3.1000 Bram [moved the release number to 7.4](https://groups.google.com/d/msg/vim_dev/ZWWgK9aXQ2Y/9G3vrii4qEAJ) to avoid any problems having 4 digits in the patch level.

Looks like this time it's full steam ahead, Bram posting [patch 7.4.1000](https://groups.google.com/d/msg/vim_dev/0bZTXVGCvio/uBQVGN__AAAJ).",25,77,Vim 7.4 passes patch number 1000
,50,77,Found in thoughtbot's vimrc
,14,79,limelight.vim - Hyperfocus-writing in Vim
,0,80,Cool and useful tricks with vim registers
,18,79,“Practical Vim: Edit Text at the Speed of Thought” now in beta
,10,80,Writing Vim Plugins
,19,79,Vmail - A Gmail client in Vim
"I've just discovered that \`g?\` executes ROT13 substitution cipher on a letter/word/etc.

What are other completely outworldly shortcuts you've discovered (and maybe using daily)?",52,78,More vim keybindgs for crazy things?
"Just found this out today and its amazing. I always felt like Ctrl-a was cumbersome and not as good as being able to use vim bindings. I found out that you can get vim bindings in bash and zsh! 

zsh: `bindkey -v`

bash: `set -o vi`

this has helped me so much!",33,81,You can get vim bindings in zsh and bash
,19,81,tiler.vim: a tiling window manager plugin
,9,78,"Vim sessions (new to me, never heard of it but am going to use it in the future)"
"So lately I have been learning and using Vim for my pure text job and I got used to hit ESC after entering all my text, to return to normal mode. Now I have to use excel for some job, and after I wrote a long remarks in a cell, my muscle memory told me to hit excel to finish to job, so I did. All the text are gone, and it happened very frequently. Anybody share the same experience? How do you handle this?
",67,76,[Off topic] Using Excel after get used to vim is a disaster
,9,75,Custom Vim Bindings in tmux 2.4
,39,76,A command-line fuzzy finder that makes command line much more fun.
"I started to learn vim about a two months ago (on the 3rd attempt). Today I had a moment where I was really glad I forced my self through the rough start. I needed to work through a lot of questions from my students to filter out the unique ones and generally rephrase them. So I decided to send the relevant questions at first to a buffer in a separat split (like ```:diffput```). To accomplish this I remapped <F5> in normal mode to:

    :nnoremap <F5> dd<c-w>lp<c-w>h

It's really simple but effective and it's one of those things I like about vim. 
Just wanted to share that with you.
",20,75,Vim saved me some time today
,54,78,Vim Movement Speed Challenge
,88,77,Dropping CtrlP and other Vim plugins
,14,80,"YSK you can edit files remotely via ssh with ""vim scp://remoteuser@server.tld//path/to/document"""
"I've been using (Neo)Vim for just under a year now, so I'm relatively new. At the moment, I'm loving it, and I can't see myself using anything else. However, I came across [video](https://www.youtube.com/watch?v=JWD1Fpdd4Pc), and it made me wonder if at some point I should consider giving Emacs an honest go.

I'm just wondering if there are more experienced Vim users here, who have properly tried Emacs? If so, what was your experience like?",108,76,AskReddit: Are there many Vim users that have given Emacs an honest go?
,11,77,Bram is actively asking for help with merging changes made in NeoVim
,43,78,VimR — Refined Vim Experience for OS X
"I am guessing that about 99.9% of Vim users are people who program, but I am curious to know if there are a faithful few who aren't hacking code all day.

EDIT: To clarify, what I really mean is how many people primarily use Vim for things other than writing code, e.g. writing, journaling, etc.",119,78,"Out of pure curiosity, is there anyone here who's not a programmer?"
,33,77,vim-multiple-cursors - True Sublime Text style multiple selection in Vim
,19,75,Live-browser coding using VIM
"    Regular Expressions

    http://xkcd.com/208/ {{{1
    |--------------------------|-------------------|-|--------------------------------------|
    | /----------------------\ |                   | |                                      |
    | | WHENEVER I LEARN A   | | OH NO! THE KILLER | | BUT TO FIND THEM WE'D HAVE TO SEARCH |
    | | NEW SKILL I CONCOCT  | | MUST HAVE FOLLOWED| | THROUGH 200 MB OF EMAILS LOOKING FOR |
    | | ELABORATE FANTASY    | | HER ON VACATION!  | | SOMETHING FORMATTED LIKE AN ADDRESS! |
    | | SCENARIOS WHERE IT   | |        |          | |        /                             |
    | | LETS ME SAVE THE DAY.| |       \O/  O      | | _     O   O - IT'S HOPELESS!         |
    | \----------------------/ |        |  /|\     | ||_@. -'|\ /|\                         |
    |                          |       / \ / \     | |====  / \ / \                         |
    |                          |                   | |' '                                   |
    |                          |-------------------| |--------------------------------------|
    |----------------------------------------------------| |--------------------------------|
    |               ,---------------------.      /       | |    ,--------------.       /    |
    |              | EVERYBODY STAND BACK. |__..'        | |   / I KNOW REGULAR \___..'     |
    |               `---------------------'              | |   \  EXPRESSIONS.  /           |
    |                                                    | |    `--------------'            |
    |                                                    | |                                |
    |         _     O   O                                | |     _     O   O                |
    |        |_@.  /|\ /|\                               | |    |_@.  /|\ /|\               |
    |        ====  / \ / \                               | |    ====  / \ / \               |
    |        ' '                                         | |    ' '                         |
    |----------------------------------------------------| |--------------------------------|
    |---------------|------------| |---------|-----------------| |----,---------------------|
    |               .      | /   | |         |                 | |   /                      |
    |                \     /`    | |         .                 | |\-'                       |
    |                 \-O-'      | |        /                  | |\O                        |
    |                  `-'-.     | |      _/                   | |  \__                     |
    |                            | |   L! \    /               | |   \                      |
    |    _           O   O       | |  R _  O--'--    /O\  O    | |    _  /        \O/  O/   |
    |   |_@.        /|\ /|\      | | E |_@./.        `|' /|\   | |   |_@.-         |  /|    |
    |   ====        / \ / \      | | P ====  `tap    / \ / \   | |   ====         / \ / \   |
    |   ' '                      | |   ' '    tap              | |   ' '                    |
    |----------------------------| |---------------------------| |--------------------------|",28,79,Giving a class (laptop+projector) at work on Wednesday about regular expressions. Wanted to show off XKCD #208 without leaving Vim.... (xpost from /r/xkcd)
,21,78,"Vim, you complete me"
,133,77,What are some simple yet mind-blowing tweaks to your vimrc?
"Hey /r/vim!

I have just finished writing my first vim plugin, and I think it came out pretty good.

Basically, It shows the bundle size for each `import` / `require` statement in your JavaScript/TypeScript files. The idea is heavily inspired by Wix's [import-cost](https://github.com/wix/import-cost) plugin for vscode. This plugin actually uses the ""import-cost"" package (also by Wix) for the calculation.

Any feedback is welcome!

[https://github.com/yardnsm/vim-import-cost](https://github.com/yardnsm/vim-import-cost)",10,80,vim-import-cost: My first Vim plugin!
"Please see `:h motion.txt`

I highly recommend reading this, at least up to the section titled `2. Left-right motions`

It is worth reading since it explains some of the intricacies of Vim's text editing model: operator + motion/text-object",8,78,Very useful section of the Vim reference manual
"When using Vim I often work in terms of small logical changes, for instance ""delete word"" (makes sense, right?) but these don't always have to correspond to a single Vim command.

For instance:

* `ea` to append to a word
* `xp` to swap characters
* `ddp` to swap two lines
* `gg=G` to indent the file
* `%cib` to change inside next parentheses block (if at beginning of line)
* `*cw`, followed by multiple `n.` to change occurences of word under character (imo much easier than `:%s/REGEX/g` as long as the word doesn't occur very often)
* `%%w` to land inside the next parentheses (if at beginning of line), followed by whatever. I usually do this to land inside the parameter definition of a method and follow it up with something like `dw.` if I want to delete the first parameter, `cW` if I want to change it etc.

You can commit these logical commands to muscle memory just like ordinary commands - when I ""wanna change that first argument"" I automatically do `%%wcw` without having to think. 

Hopefully this thread can help beginner-intermediate Vim users to discover some new functionality and hopefully I'll learn something new as well ;)",65,81,"What commands do you usually combine to form a new ""logical command""?"
,15,76,SC is a vimlike spreadsheet
,8,79,Vim Tips - Google Chrome Tab Replacement
,42,74,Text Editor Performance Comparison
,18,77,Vimfest photo featuring both Vim (Bram) and Neovim (Justin) current maintainers
,37,78,Qutebrowser crowdfunding for QtWebEngine support launched!
,16,80,Was checking out the help for | (pipe)
,22,75,Learning Vim in 2014: Copy And Paste The Vim Way
,27,79,fzf + vim + tmux
"OK, this might be old news for many of us but here it goes… 

During startup, Vim 7.4 looks for both the traditional `~/.vimrc` (or `$HOME\_vimrc` on Windows) but *also* for `~/.vim/vimrc` (or `$HOME\vimfiles\vimrc` on Windows).

Which means that we no longer need to use symlinks or `runtime vimrc` hacks. Our beautiful config is neatly contained in one repository and configuring a new environment is now *really* one command away:

    $ git clone git@bitbucket.org:user/repo.git .vim

or

    $ hg clone ssh://hg@bitbucket.org/user/repo .vim

or whatever.",48,79,Good news for all of us who keep their configs under version control.
,25,75,A foot pedal to toggle vim insert mode
,26,77,Why Vim uses hjkl as arrow keys
,12,75,Relative line numbers in Vim for super-fast movement
What are some of your favorite plugins and what are they for?,50,76,Favorite plugins?
,26,75,Vim and Git [Vimways 5/24]
,19,73,Colortemplate: The Toolkit for Vim Colorscheme Designers!
,14,75,[DYK] Folds can automatically open and close
,46,75,VimFx – Vim keyboard shortcuts for Firefox
,35,75,vim-tmux-navigator: seamless navigation between tmux panes and vim splits
,34,79,"As vim-airline got heavier, I switched to lightline+bufferline combo. Here's a screenshot!"
,30,78,:s::: is more useful than :s/// when replacing paths
,18,78,Vi/Vim - Area 51 - Stack Exchange
"I mean, does someone know if there are new features planned? Vim development is just an endless bugfixing loop? are there plans to fix performance issues (e.g syntax highlighting engine)? is there a roadmap or something similar? has NeoVim affected in some way official Vim development?
Just I'm curious. It'd be great to know where is Vim heading and if it'll keep improving over time, specially performance issues.",105,75,Where is official Vim heading?
"[Tim Pope](https://github.com/tpope) has indebted all of vim users with his great plugins!

Most notably there are pathogen, vim-rails, fugitive, unimpaired, but the list goes on to more than 40 vim plugins.

And all of the plugins are regularly maintained! I rarely wait for more than a day when I open an issue to for example a relatively obscure [vim-rsi](https://github.com/tpope/vim-rsi).

We could even get sentimental and say he's ""the father"" of [modern vimscript development](http://learnvimscriptthehardway.stevelosh.com/chapters/43.html) and [vim usage](http://vimcasts.org/blog/2014/02/follow-my-leader/).

Now, when you look at it, he can't really make any money off of making vim plugins. From what I know, he's a ruby/rails developer, and I'm not sure if his work on vim can even be seen as a ""reference"" or ""portfolio"".

Now my question is: what do you think inspires and motivates him for all that hard work, focus and (I'm sure) learning about vim?
Does he maybe get a lot of business / job leads via his vim fame?",41,79,What motivates Tim Pope?
,106,75,DAE hate it when they accidentally turn on caps lock and can't figure out why vim is acting all spaz?
,20,79,"From hjkl To a platform for plugins, Bram Moolenaar, VimConf Tokyo - November 2018"
"For those who make an effort to not use plugins unless absolutely necessary, what plugins do you use? I think I'm at a stage where I'm an intermediate user but am still hesitant to use any plugins because I'm afraid of the added complexity they generally come with (not necessarily in terms of code quality, but potential conflicts or quirks in behavior because it does not play nice with your configuration or other plugins), especially because there are lots of plugins out there which can be replicated by vim or vim offers decent alternatives.

I am also curious about coding-related plugins--at the moment, I don't even have tools to help with code substitution (via snippets?), automatic indentation (I am manually indenting on vim) or automatic closing parentheses/brackets creation, etc. Before I start trying out random plugins, I'm hoping to get a sense of what experienced vim users stick to--perhaps a few essential plugins that have no real alternatives by vanilla vim itself. 

People can also discover setups offered by vanilla vim as alternatives for plugins that they think are necessary but may not be.

P.S. 

I've briefly checked out ""guides"" on recommended plugins, but most appear to be written by users who picked up vim on a weekend and want to pimp it out without having decent understanding on more intermediate features provided by vim. Also, plugins and vim itself has evolved so much over time that some plugins are flat out redundant.
 ",92,73,"For those who make an effort to not use plugins unless absolutely necessary, what plugins do you use?"
,32,74,"CppCon 2016: Tommy Bennett “Algorithm Mnemonics: Increase your Productivity with STL Algorithms"""
"Like, in a .c file I'll see something like `/* vim:set sw=8 noet */` at the bottom of it. What is that called and where can I read up on how it works, what's allowed, which filetypes support it, etc?",7,76,"In some files, the author writes a comment to set some vim settings for the reader. What is this feature called so I can read more about it?"
,43,74,They're back! Laser-etched Vim mugs!
,45,74,Coding on the go....
"Since I have some free time to kill (aka I'm procrastinating), I've decided to write a quick introduction to vimrcs for beginners to Vim, in hopes that it will cause less frustration for those newer to the language. I find vimscript a very deeply flawed language, and there are many beginner traps that I once fell into. So instead of talking about what works, I'm going to talk about what doesn't work, aka what to look out for.

Note that this is a primer for vimrcs, not vimscripting. Strictly speaking there is no difference, but I find that in practice vimrcs use a much much smaller subset of vimscript, and generally vimrcs are mostly composed of simple syntactical structures.

Any suggestions will be greatly appreciated!

**Introduction: What is a vimrc?**

A vimrc is the configuration file for vim. When Vim starts up, it reads all configurations from the vimrc, so that you do not have to type them every single time. It is usually in the $HOME$ directory, and in Unix(-like) systems, it has the name '.vimrc' (without quotes), while in Windows systems, it has the name '_vimrc' (without quotes). 

The language for the vimrc is vimscript. While you could infect other languages into your vimrc through the ruby or python commands, it also depends on whether your version of Vim supports it or not. However, other languages in vimscripts are way beyond the scope of this post.

Vimscript is primarily composed of ex commands. They are the commands that you type when you type ':' on the keyboard to go to 'command line mode'. What this means is the examples below can also be entered into Vim by prefixing it with ':', and postfixing it with '<CR>' (carriage return, in modern keyboards it is the Enter key) to confirm. However, very few commands must be used in vimscripts, and is unavailable in command line mode, but we will not discuss them.

**The basics**

I find that generally, most vimrcs are composed almost entirely of 4 syntactical structures: comments, sets, maps, and lets. I find this behavior so common that when I completely refactored my vimrc a few months ago, I split the vimrc into multiple files, and there is one file exclusively for sets, and another file exclusively for maps.

To begin, we will talk about comments.

**Comments**  

Structure:

    "" Comment

The general format of a comment is a quotation mark(double), followed by the content of the comment. Like most languages, comments will not be run, and are there solely for annotations. Everything succeeded by the "" will be treated as a comment, *generally speaking*. 

While it may seem to be very simple, there are still many things that could go wrong. However, it is much harder to explain in this section. The general rule of thumb is:

*Always put comments on their own line.*

While it is still okay in many cases to put comments after vimscript commands, I generally recommend not doing so, due to many potential traps.

The second rule is:

*Never have another quotation mark(double) after the first quotation mark(double) for comments.*

Again, I will explain this in another section.

**sets**

In order to modify *options* in Vim, we have to use the set command. Note that set does **not** modify *variables*. They are very different concepts in Vim.

To query for the value of an option in Vim, you would use:

    set <optionname>?

as an ex command. For example, if you open Vim, and type:

   :set hlsearch?<CR>

It will show you the value of the option 'hlsearch'. Generally, there is no point in doing this within vimscripts.

I tend to think about options as having two categories: boolean options, and nonboolean options. They have very different syntax. You can use vimdoc to check the type of the option (:h '<optionname>').

**The easy case: boolean options**

To enable an option, 

Structure:

    set <optionname>

Easy peasy. For example, if you put:

    set hlsearch

in your vimrc, the option 'hlsearch' (highlight matching search) will be enabled by default.

If you find the 'hlsearch' option annoying like me, you can disable the option. It looks like,

Structure:

    set no<option>

For example, I have:

    set nohlsearch

in my vimrc. This disables 'hlsearch' on start.

What this implies is that for easier parsing, option names in Vim should not start with 'no'. This is, as far as I know, true (thankfully).

That's the good part. Now onto the bad part.

**The bad case: nonboolean options**

Unlike boolean options, nonboolean options always require a value. Hence, it looks like:

Structure:

    set <option>=<value> 

For example, in my vimrc, I have

    set winwidth=79

Which sets the window width to 79 by default.

Sometimes you might want to leave an option with no value, usually either to resort to its default behavior, or to some setting specified by vimdoc. For instance, in an older version of Vim (note that the newest version changed this behavior, that actually confused me when I'm writing this), I want to default 'K' to open vimdoc instead of manpages. Hence, I have:

    set manprg=

This leaves the option with no value. 

Now, onto the bad parts. The first gotcha is the 'Space' gotcha, which stumped me when I first modified my vimrc. If you have a C-style inclination, you may be tempted to write something like this:

    set winwidth = 79

Generally, Vim should throw out an error at this point (thankfully). 

*This does not work!*. To understand why, you need to know that set commands actually have a syntax more consistent to:

Structure:

    set <option1> <option2> ....

For example, I can,

    set splitbelow splitright

to set *both* 'splitbelow' and 'splitright', two boolean options.

Hence, if you do,

    set winwidth = 79

Vim parses it as: set the boolean options 'winwidth', '=', and '79'. For me, it throws out the error '79 option not found'. However, if you wrote something like

    set winwidth =

You may not be so fortunate... It doesn't do what you intended to do, and doesn't throw out an error.

The second most common gotcha is the 'string' gotcha. It is also a mistake when I made, due to knowing C. Suppose that you are setting an option of type string, say, the 'omnifunc' option:

    set omnifunc=syntaxcomplete#Complete

This is the correct syntax. If you write something like this:

    set omnifunc='syntaxcomplete#Complete'

Surprisingly, it works, but sometimes! I recall using a version that does not. Do not rely on that.

The worst case is something like this:

    set omnifunc=""syntaxcomplete#Complete""

with double quotes. Does it work? The answer is **sometimes** (in vimscript, maybe in command line mode). Never rely on this behavior! In some previous version, it correctly recognized the string. HOWEVER, "" also denotes the start of the comment. For this reason, never put comments on the same line on commands! The "" is a poor choice for a comment delimiter.

Hence, one important rule of thumb for sets is: *Always follow the exact format!*. Don't put unnecessary spaces, and no quotation marks.

**maps**

I find the syntax for maps even worse than sets, as it is way too hard to figure out what went wrong. I'm sure there are more gotchas for maps, and I'm only going to cover the basic ones. Leave a comment below if you know of others, and I'll put it up :-).

Map commands map certain keystrokes to another... the idea is simple. For clarity, I will denote a mapping from <keystrokes1> to <keystrokes2> as:

    <keystrokes1> --> <keystrokes2>

For example, if I have a mapping that when I press the z key on the keyboard, Vim executes the command for the x key instead, I would denote it as:

    z --> x

(Please don't actually do this).

The syntax *seems* very straightforward:

Structure:

    <maptype> <keystrokes1> <keystrokes2>

results in <keystrokes1> --> <keystrokes2> under <maptype>.

So what is a <maptype>? It is specifier for a type of mapping. Some mappings you only want to work on normal mode, while some mappings you want to work under, say, visual mode. For this reason, I highly recommend specifying exactly which maps work under which mode: odds are, you probably have most mappings work under normal and visual modes, and probably way less mappings under insert mode.

The second problem about mappings is which functionality do you want to use. For example, sometimes you want to swap the functionality of two keys, say, the 1 key and the ! key. So it would look something like this:

    1 --> !
    ! --> 1

The most obvious problem is: when I perform the second map, should ! take on the functionality of the ""remapped"" 1, or the functionality of the 1 key by Vim defaults? In this case, we want the default behavior of 1, not our remapped behavior. Hence, this is the problem of whether we want a ""recursive"" mapping (to what has already mapped) or not.

To address these two problems, here are the command names for <maptype>:

Structure:

    <mode><recursive?>map

<mode> is which mode you want the mapping to work in. They are all one character:

* n -- normal mode (most commonly seen)
* v -- visual mode (second most commonly seen)
* c -- command line mode
* i -- insert mode
* <none> (aka type nothing) -- all modes, you probably don't want that

<recursive?> is simply either nothing (omitted), or the characters 'nore'. If it is nothing (omitted), it triggers recursive mapping. If it has the characters 'nore', it triggers nonrecursive (default Vim behavior) mapping.

For example, I have:

    vnoremap <C-j> <C-n>

This triggers a nonrecursive (mapping to default Vim), mapping that works only under visual mode, <C-j> --> <C-n>. Hence, it maps <C-j> to the default behavior of <C-n>, which is ""next completion"". My mappings for <C-n> (if I have any), will not affect the mapping for <C-j>.

On the other hand, I have:

    nmap <leader>e :edit %%

This triggers a recursive (mapping to my own mapping) mapping that works only under normal mode, <leader>e --> :edit %%. The reason that in this case I want a recursive mapping, is that I have another cnoremap from %%, that uses some register = magic to provide the path to the directory of the current path. Hence, I do want %% to expand to my current path, which is convenient.

Another way to think about it is that recursive mappings, like that one above, basically types out the mapping literally. Hence, when I type <leader>e, Vim literally helps me type out :edit %%. When it is typing out %%, it realises that %% has another mapping that expands the current filepath, and hence it triggers the functionality of %% too.

One thing to note is that I highly recommend checking if your mapping *intends* to map to Vim's default behavior or not. If that is the case, always put 'nore', so you will never have to worry about other mappings breaking this previous mapping.

And now, onto the bad parts of maps.

As stated above, the map command takes the form of:

    <maptype> <keystrokes1> <keystrokes2>

The parts of the command is delimited by a single space. In retrospect, this may not seem like a great idea. Consider this:

    nnoremap <leader>  <C-^>
            ^        ^^
The most obvious question to ask here is: which one is the second space? This is syntatic ambiguity. 

Am I mapping:

    <leader> --> <Space><C-^>

or,

    <leader><Space> --> <C-^>

It is not at all obvious! I'm not exactly sure how it behaves (I believe it maps <leader> --> <Space><C-^>, correct me if I'm wrong). Either way, *never* rely on this behavior! When you are writing maps that involves spaces, *always* explicitly specify them. For example:

    nnoremap <leader><Space> <C-^>

to map:

    <leader><Space> --> <C-^>

However, one behavior that appears to be consistent, is that after reading the second space, all spaces after that will be treated as a single literal <Space>. Hence I can write:

    nmap <leader>e :edit %%

which maps:

    <leader>e --> :edit<Space>%%

Always do this with caution!.

This brings us to the second trap: the comment trap. This is the most deadly trap in vimrcs, since oftentimes, even though the syntax is incorrect for the intention, it still works! To illustrate this, consider what the example above implies. A moment's realisation should be that putting a Space after the keystrokes for the target mapping, doesn't make you safe!

Consider this:

    nmap <leader>e :edit %% "" Quickly open current directory files

I have put what appears to be a comment after the nmap. However, notice that since the Space after "":edit"" is treated as a literal <Space>, the space after the ""%%"" should be treated as the literal <Space> as well! Hence, the mapping doesn't end there. Vim will still type all of the subsequent characters out.

This is one of the luckier examples, since if you put this in your vimrc and give it a run, you'll notice immediately that there are way too many characters. However, consider another example:

    nnoremap <C-j> o<Esc>S<Esc>k "" Insert empty line after

The million dollar question is: will this work as expected? The answer is, unfortunately, **yes**, but for all the wrong reasons.

So why will this work? Shouldn't Vim continue to type the rest of the characters out for you? 

Answer is: *Yes*, that is exactly what it does. However, consider what happens when you type out '"" '. "" is the specify register command. Hence, '"" ' specifies the register <Space>, a register that does not exist in Vim! At this point, Vim resorts to its what I like to call *default termination behavior* (I call it that primarily because this behavior is very often abused in macros, to control macro termination). *default termination behavior* is that in the event that you are *running* a *series* of keystrokes by a *nonexplicit call* (through maps or macros or :norm, generally), whenever Vim encouters an error, it will halt the run of the current keystrokes immediately. What this means is that since '"" ' encounters an error, it will *not* continue to run the keystrokes after that, namely 'Insert empty line after'.

This is the *main* reason why a lot of bad vimrcs out there can put what appears to be comments after a map, and still get away with it! However, the syntax is still incorrect according to intention. Hence the rule:

*Never put comments on the same line as a map.*

Or generally:

*Always put comments on its own line*

That's the fool-proof way.

**lets**

(will write this when I have more time, let me know what you think! :) )
",40,78,Original Post: A vimrc Primer
,24,76,slow-vim.
,18,74,"Tim Pope just uploaded a new plugin: Haystack. ""Haystack provides a fuzzy matching algorithm for use by other Vim plugins."""
,17,72,"I'm no beginner, but there's so much I still don't know. I found a really great helpfile which guides the user, novice or advanced, through all the things you need to fully understand to call yourself a proficient Vim user."
,5,76,Vim Text Objects: The Definitive Guide 
,16,72,Gundo - my little undo tree visualization plugin for Vim
,38,73,One Vim: managing multiple files with ease [Vimways 4/24]
,9,78,I made an up-to-date GitHub colorscheme : cormacrelf/vim-colors-github
"Hey all, with assistance from Hammerspoon and some Lua code I wrote, I added a basic Vim normal mode to OS X. This might have been done before, but I wanted to make the library as easy to clone and drop in as possible. I also found some packages that supported motions, but didn't support operators combined with motions for efficient editing. Not all motions/operators are supported, but I'm open to extending it. The Github project link below has the quick instructions if you want to give it a try. You can bind \`jk\`, \`jj\`, etc, or choose some other arbitrary key combo (\`ctrl+;\`) to enter normal mode. I'd appreciate any feedback regarding how it feels to use, or what features you feel are severely missing!

[https://github.com/dbalatero/VimMode.spoon](https://github.com/dbalatero/VimMode.spoon)",30,73,Added a basic Vim normal mode to system-wide OS X inputs
,19,71,"""Pythonsense"": Vim text objects and motions for Python classes, methods, functions, and doc strings"
,27,76,Beat Sublime Text's multiple cursors in ~500 bytes of Vimscript!
"Figured this out today, it's a handy alternative to patch committing with Git where you split up the diff into little chunks and manually choose what you want added.

Just stick the line(s) in front like you would anything else:

`:1w`

>1L, 16C written

`:15,19w`

>5L, 71C written",14,74,You can write specific lines instead of the whole file
"I love vim but, I hate this page vim.wikia.com. The amount of bullshit that loads makes the page slow, clanky, and damned near unusable. 

It's not remotely in step with the editor we love.",44,73,Vim wikia sux...
,7,76,Inspecting and manipulating .tar.gz archives using Vim
"I just finished writing my first plugin, I think it's really helpful if you use Vim for writing.

Here it goes: https://github.com/danielbmarques/vim-ditto

It highlights the most frequent words in each sentence, paragraph or file.",13,70,Plugin to highlight overused words
,6,72,Vimdeck: Vim as a presentation tool
"I see that this is not the most compelling point for vim for most people, but I must thank the developers, the community, I must thank vim for enabling me to quickly search and edit in _huge_ files (multiple gigabyte). I do this regularly and it would be borderline impossible with less efficient file handling or with worse (say, non-regex) search features. I also couldn't always trust sed to not accidently overwrite some part of a file just because it looks like the part I want to actually edit. So, thank you!",22,75,"Thank you, vim!"
,18,75,Improving Vim Speed
,12,75,Call for Code Reviewers in Neovim
,5,74,"Early Christmas gift, can't wait to hang it in my cube."
"I finally found out why Vim is sometimes slow to (especially for ins-completion) in large files: `foldmethod=syntax`

From :help todo:

>  - Slow combination of folding and PHP syntax highlighting.  Script to
>    reproduce it.  Caused by ""syntax sync fromstart"" in combination with patch
>    7.2.274.  (Christian Brabandt, 2010 May 27) Generally, folding with
>    'foldmethod' set to ""syntax"" is slow.  Do profiling to find out why.

The [FastFold plugin](https://github.com/Konfekt/FastFold) makes it so folds are only recalculated on save (so you're always using `foldmethod=manual` -- but the folds are calculated with `foldmethod=syntax` or whatever you had set before).

This solved the problem for me. Now I can use compl-whole-line completion in my 5000 line C++ file and it's instant and snappy instead of taking minutes and unresponsive.
",18,78,My Vim was slow because of `foldmethod=syntax` and FastFold fixed it
,47,73,I wrote a little website to show off my .vimrc with a live instance of vim
,29,75,"I now understand that VIM is just so vast, that I'll never come to a point were it ceases to amaze me. Here's the source for my most recent mind blowing revelation."
,53,72,dwm.vim - Tiled Window Management for Vim
,41,76,The vim learning curve is a myth
"So, about a week ago I asked this subreddit if it was possible to emulate notepad++'s behavior for html tag highlighting. The general consensus was that matchit and the like were the closest thing to that behavior.

I took it upon myself to ask stackoverflow the same question, and the question quickly gained traction. Greg Sexton recognized the usefulness of such a feature, and was kind enough to implement a ftplugin that provides this feature. [The HTML tag highlighting plugin is available here](http://www.vim.org/scripts/script.php?script_id=3818).

Enjoy!

EDIT: [The stackoverflow question is here](http://stackoverflow.com/questions/8168320/can-vim-highlight-matching-html-tags-like-notepad).",19,73,HTML tag highlighting in vim like Notepad++ (update)
"Hello.

My question is, where do you people use Vim?

Do you simply run it through your terminal and use Vim? If you do, I'd like to hear other programs that you integrate and use alongside Vim like tmux, etc.

Or do you rather use a Vim extension to an existing IDE or code editor like VSCode?  
Thanks a lot! Let me know.",206,74,Where do you Vim?
"So, I started off using Vim solely for natural language processing. I kinda hate configuration files, and the autocomplete options looked a bit complicated, so I figured I'd stick with VSCode for programming.

A month passed, and I found that I don't really enjoy writing text outside of Vim anymore. It just seems so... lifeless. So I downloaded the Vim-for-VSCode extension, which promised to give you the full Vim experience, except in VSCode. 

Except, it's not quite. For example, I don't like using the escape key. In Vim, I can always Ctrl-C out of anything. In VSCode, all my fiddling around with the (vile) configuration files couldn't make that possible. Another example. I don't like scrollbars. I don't see why they exist in the days of two-finger-scroll. Plus, I have shitty eyesight, so I'm really stingy about screenspace. But, you can't get rid of them in VSCode. There are loads of tiny examples like that.

So VSCode for Vim is good, but for any number of small reasons, it just doesn't feel right. You can't hop around buffers. You can't set it up so you have fuzzy search for everything. Whatever you do to it, VSCode just doesn't have that special feel.

So I started trying to get Vim to behave like an IDE. I got YouCompleteMe, and Syntastic, and Ultisnips, and I spent about a day dickering around with various settings to get them halfway working - and well, I've started coding in Vim.

Except, the problem is, YouCompleteMe, while good, isn't nearly as nice as VSCode's default auto-completion. Equally, Syntastic is really nice - but it's not as good as VSCode's system.  Is there any way to set up Vim so you get the modern IDE experience? ",86,72,Leaving Vim
,21,71,GitHub - lifepillar/vim-mucomplete: Chained completion that works the way you want!
"DuckDuckGo's focus is to become the best search engine for programmers, and we'd love your help improving our open-source vim Instant Answers. There's currently a VimL cheat sheet [here](https://duckduckgo.com/?q=viml+cheat+sheet&ia=cheatsheet).   We want to get some great feedback from the Reddit community for the developer, phora.


If interested in helping us improve, please check out the following:


* Visit the [VimL IA's page here](https://duck.co/ia/view/viml_cheat_sheet)
* Click on the ""Example Queries"" to see the IA in action. 
* Perform other test queries that you expect would be or should be covered by the Instant Answer
* Create an issue via Github for bug or suggestions with the ""Create Issue"" button on the IA page.

[Our docs have a checklist](http://docs.duckduckhack.com/maintaining/feedback.html)
of things the community looks for with every new Instant Answer.


thanks!

-Bill",22,73,Help improve DuckDuckGo's vim-related searches
"About a month ago, /u/captaincrisp posted [this thread](https://www.reddit.com/r/vim/comments/39qhox/one_of_us_at_kroger/), showing a car with a rather ingenious sticker: "":w saves"". I asked if anyone here would be interested if I made some of those for sale, and the response was uniformly positive.

I waited a while to see if anyone might find them for sale or jump up, and no one else has - so here we go!

I'm offering these decals in sheets of three - one large (suitable for a car rear window), and two small (suitable for a laptop) - for $5. Two sheets can be had for $8, or three sheets for $10.

Example of the decal sheet, as shipped: [Imgur](http://i.imgur.com/bFkZCXj.jpg)

Examples of a small-sized decal on my 11"" MacBook Air: [Imgur](http://i.imgur.com/aqaY2SU.jpg)

Payments may be made via Bitcoin, PayPal, or whatever other method you might prefer. Please send PayPal to my email (lyndsy@lyndsysimon.com). For Bitcoin, email, PM me, or reply to this post and I'll respond with a destination address.

Available colors: white, red, lime green, yellow, blue, purple, pink, silver (pictured above), gold, tan, and mint. Pick one color per sheet.",59,73,"By request - "":w saves"" decals"
,63,74,The curse of vim
,31,71,I love getting these email updates. It reminds me of how much more powerful I am now in Vim.
,30,70,"Show r/vim: VimGenius, a flashcard-style learning app for Vim"
,7,71,Replacing All The Things with Unite.vim
,21,75,removes stains better then emacs
,8,74,"Clippy the Annoying Paperclip, in Vim"
,31,73,Solarized color scheme
"My son is 8 y.o. and got an mbot for Xmas. I started to introduce him to programming with `scratch` and we are having fun together. I started thinking though, would it be wise to introduce him to vim at this age? I thought that not having any expectation from an editor he might pick it up right away. Moreover the are some sources and games online that help you to get the necessary muscle memory and are fun to  use. 

What is your opinion on this? Any experience?",87,72,Should I introduce vim to my kid
,26,70,Turn Vim Into Excel: Tips for Editing Tabular Data
,22,72,"""Can you grab or delete between parentheses in vi/vim?"""
"Sometimes you feel like showing off your vim setup -- here is your chance, for the next month post your screenshots here.",108,73,screenshot showcase
,57,72,Do you browse the web using vim bindings?
"How do YOU edit multiple files? I'm trying to establish an efficient workflow. Because I'm not really understanding or utilizing buffers properly, I've been using `cat` on a file so I can right-click and copy and paste its contents on the terminal to other instances of vim (or other applications) ROFL.

So I think I need to use tabs, panes, etc. for a single instance of vim to edit multiple files more efficiently where their buffers are shared. I've also seen people using tmux, but I'm not sure if it's because their workflow already benefited from tmux or if tmux is actually useful with vim even tmux is used just for vim.

P.S. If I open multiple files to edit via `vim <file1> <file2> <file3>`, I can use `:next` and `:previous` to navigate between these files. It's kind of clunky though--there's not even an indication to show which files are in the buffer(?) so I have to remember which order I opened the files in to navigate properly. How can I improve this? Make use of tabs?

",104,72,How do YOU edit multiple files?
"When my wife is out of town I send our modem with her so that I don't stay up all night on the internet. Somehow I managed to stay up late anyway, poking around at bsd-games when minecraft refused to start up. I came across `quiz`, which led me to `quiz function ed-command`, which led to everything in my life changing. I spent the next couple hours editing files using ex and imagining generations of programmers before me doing the same. I finally understood that weird Q command in Vim, because Ex mode used to be the normal mode. I guess the essence of the revelation is that Ex is all you NEED; the text above (or below) the : prompt is just an optimization. Now I'm on the hunt for times when I can pull out a `:g/^/m0` (reverse the whole file) or a `/foo/;/if (/,/}/t /bar/` (find `foo`, then find the next `if`, then copy until the next `}` to the line under the next `bar`). It's only a matter of time until I need just that.",16,72,Today I Met Ed
,35,73,TIL when you print from (G)Vim it includes syntax highlighting.
,15,75,This guy had a vim presentation and he brought something to illustrate his point
,51,73,Forget Vim tabs – now you can have buffer tabs
,3,76,Learning Vim in 2014 Collection
,16,74,12 Vim Tips
,55,71,"cVim, now with more features!"
,103,75,A short survey about vim
,45,74,"Yes I know I'm twenty years late to the party, but I just found out today how awesome it is to run your buffer through external filters like sort, grep etc. ""%! command"" and "":r !command"" are my new best friends."
,18,73,Vim 7.3.1000 Released into the wild :)
,32,71,"YouCompleteMe, a Fast, As-You-Type, Fuzzy-Search Code Completion Engine for Vim"
,15,72,Writing Prose with Vim ←a few tips on using Vim as a word processor
"I just discovered `:b#` (which seems to be undocumented?), it lets you alternate between the current buffer and the one you were previously editing (not to be confused with `:bp`).

What's yours?",132,72,What's the latest useful thing you found out in Vim?
"Here the things I'd love to have in a single device

1. a comfortable keyboard 
2. a e-ink monitor
3. a very light Linux distribution especially designed for the purpose 
   with just enough to run 
   - vim 
   - ssh 
   - rsync 
   - other shell built-in like to file-system navigation like ls, cd, ..
4.  easy to transport 

I see lot of very interesting project that usually address some of 
the points above but not all of them..

If you know of project addressing the 4 please tell me ..
Otherwise would be nice to know how many could be interested 
in having such a device...
If the interest is shared may be could make sense crowd-fund such a project.
Also I'm interested in knowing if you think could be other options to added
to the machine ... For example a particular keyboard layout optimized
for the use of vim, or just some extra buttons.


EDIT: 4 Jen 2019

I create a repo on github for gather the references, integrate with more and later try to do a  synthesis. I will probably repost on reddit once there will be more but if you want contribute 
also there you can find at https://github.com/ilmucio/vim-machine


",104,70,Vim Machine
,12,71,SimpleSnippets.vim - fast snippet manager built on only vim native functional
"I'm not asking if vim is right for me or anything like that. I'm not a professional developer \(yet\) but I've been using vi/vim for years, even before I had interest in programming.  I'm simply curious to know how popular/unpopular vim is in this industry.

I've seen a few screencasts \(youtube, pluralsight, udemy\) and I don't think I've ever seen anyone use vim. The languages that I've seen screencasts for are mostly C# \(where VS is obviously preferred\), Go, Javascript/Node, and Python. Screencasts are generally catered for beginner\-intermediate developers so the instructors might prefer to teach with VSCode/Atom/Sublime because they are more approachable. I've also noticed that many instructors make screencasts for a living so it makes sense to cater to the largest audience.

I'm just wondering if it is common/uncommon to use vim in web development \(front, back, devops, whatever\) or does the majority really use VSCode/Atom/Sublime? Is Vim more common in certain industries or languages?",87,68,How common is vim in web development?
,18,71,Nine months with Vim
"Hi,

I'm a student. Right now I do mainly webdev (I want to build web apps later) with HTML/CSS, Javascript and PHP. I also do C and I'll do Java quite soon. But I *really* want to do web development.

Since Vim is a little ""old school"" and really unusual these days (compared to other editors like Atom, phpStorm, ...), I'd like to know : is it really worth learning/using ?

I tried learning how to use it a few years ago but I abandoned after a few weeks. I think also one of the main problems is that I probably spent more time learning the commands by heart rather than practicing.

So being someone who's used to phpStorm and these sorts of editors, do you think it's worth it to start learning how to use Vim ? And is it *really* worth it once I know how to use it ?

Thanks.",98,71,Is Vim really worth learning for Webdev ?
"For me it's [vim-eunuch](https://github.com/tpope/vim-eunuch) for super-easy renaming of open buffers, and [cosco](https://github.com/lfilho/cosco.vim) for smoother [semi]colon insertion.",101,75,Favorite lesser-known but useful Vim plugins?
,19,72,I created a cheat sheet to help myself with Vim's most common commands.
,12,71,[plugin] A nice popup menu for vim
,59,68,Vimperator: a Vim-like Firefox
"What are typical bad habits that beginners develop when using vim and how do you fix them? I think the classic one is using arrow keys instead of hjkl, which can be fixed by disabling the arrow keys. What other ones should we watch for?",100,73,What are bad habits to watch out for?
,3,70,Bram Forgot to change that..lol
,33,71,Rainbow parentheses - A great way to visualize nested parentheses
,11,73,Vim annoyances
"First off, you're not reading this in lynx,  elinks, etc. Nobody's that big of a masochist. Everyone needs a Chrome or Firefox window open at pretty much all times to stay sane.

That being said, tmux and screen are wonderful tools, and I'm pretty convinced that a competent programmer with a strong desire to use command-line tools can get by with a web browser and a single console window, with little to no need to touch the mouse.

Are you one of these people? Do you approximate this, and what are your hangups? Do you agree with my premise that GUI tools almost always promote inefficiencies?",155,71,Do you live on the console?
,27,75,A vim Primer
,10,69,Vim: revisited
,12,73,Debugging your Vim Config [Vimways 12/24]
,25,67,wtf??
,4,69,How To Learn Vim: A Four Week Plan
,7,69,"vim-nano: transform your vim into mighty ""nano"" (wrote this for a parody hackathon)"
"// iSelected<esc><Fix> -> //Selected

Definitely made me smile.",17,73,"Accidentally double pressed i when inserting some text, so I 'Fix'ed it"
,27,70,Background Builds with Vim 8
,22,70,"Beta Testers needed: ThemeCreator, create themes for Vim, Emacs, Textmate, Atom and IntelliJ"
,31,67,I wrote post about my transition from Sublime Text to Vim
,57,72,Vim as IDE
"The help system is fantastic if you know how to navigate it.

Most of the information below (along with more beginner info) can be found in `:help help-summary`.

----

Vim's help is accessible through the built-in command `:help` (and can be searched with `:helpgrep`).

Tab completion with the right prefixes makes it pretty quick to find what you're looking for if you already know something about the command:

* `:` is used for cmdline/Ex-mode commands (`:help :help`) 
* `'` is used for options (`:help 'incsearch'`)
* No prefix for normal mode commands (`:help CTRL-]`)
* `i_` for insert mode (`:help i_CTRL-[`)
* `v_` for visual mode (`:help v_CTRL-]`)

When editing vimscript, you can use `K` to look up help for the keyword under the cursor. tpope's [vim-scriptease](https://github.com/tpope/vim-scriptease) has an improved `K` that figures out the type of command from the context (to differentiate `:call` from `call()`).

See also this [StackOverflow question and answer](http://stackoverflow.com/questions/25474313/how-do-i-find-out-what-a-vim-command-does).",12,72,How to find vimdoc help
,25,70,Flat vim icon with Solarized colours
"I have known vim for 10+ years, though I can say that only for past 7-8 years I had been using it on a regular day-to-day basis. It has been an interesting time, I've learned a lot and still am learning (this is something that never ends with Vim). My .vimrc and .vim/ has evolved the whole time. All seemed fine and I have been mostly productive (or at least I thought I was being productive) and satisfied with my editor of choice. Until some time ago I tired a conventional editor (it was SciTE, the conventional CUA bindings etc.) for some extended time of approximately a month. It was lacking in many areas compared to vim, not even close to power of vim, but there was one thing that made me think (and doubt) after this experience.
When I think about the actual editing in Vim I find myself constantly struggling. After all these years my brain has not been rewired and I can not say that I can perform all those wonderful and powerful Vim chords without thinking. I find myself constantly switching from primary mental task of coding to mental tasks of thinking about Vim commands I am going to perform (this is true for anything more complicated than hjkl). I actually have to stop and think for a moment what and how I am going to do. This mental effort actually is a pain and distraction from my primary task that I ma actually doing in editor. During my time with SciTE editor I actually felt that I was more concentrated on the actual coding/editing and not text surgery as it is with Vim. You can argue that what a simple editor provides in regards to movement and shortcuts is far less compared to Vim power, but at the same time it required far less mental effort, at least in my case.
Anyway, I was wondering if someone out there has had a similar experience? I suspect this might be highly subjective thing and that it is simply my ""incompatibility"".",106,67,Vim confession after almost 10 years of using
,9,67,"Marvelous Ad placement... Vim well played, well played indeed..."
,21,74,"Did you know about ci"" ?"
,11,67,List of all VimWikiTips in one page
,6,72,"Change your terminal’s background color dynamically, using escape sequences, to match Vim's colors"
,9,68,Vim plugin that shows keybindings in popup
,20,69,Papal Apathy: when you don't care about enough to bother with creating a proper plugin
,12,67,Sierra - adjustable colorscheme for terminals or GUI
,25,69,"My new Vim color scheme inspired by Atom's ""One Dark"""
,7,69,Snake: Full Python Scripting in Vim
,32,69,neovim removing ex mode?
,12,72,Vim easter eggs
,56,70,Vim as IDE. Are you getting the wrong parts?
,53,69,How I feel going from Vim to Emacs
"There was[ a thread](http://www.reddit.com/r/vim/comments/rjydi/intro_to_write_code_faster_expertlevel_vim_video/) a few days ago wherein I bitched that no one ever did workflow videos so I made a quick screencast going over the absolute basics of mine. As noted in the video I hope someone does this more in depth using different tools (tmux/zsh/etc.)

http://shawnbiddle.com/devblog/archive/my-vim-gnu-screen-workflow

If you have any questions about my plugins or want more details let me know. I plan on making more in-depth videos but I've no idea unless y'all give me input.",62,69,My Vim / GNU Screen Workflow
,12,71,moonfly - A dark color scheme for Vim
,14,72,VimConf 2017 will be held on 11/4 in Tokyo
"
`:help ft-man-plugin`

You can even set vim as your MANPAGER :)

`:help manpager.vim`",20,70,TIL: Vim has a manpage viewer plugin
,16,66,TIL Vim has Branching Undo
"EDIT: sorry I'm not a native English speaker, so I didn't make myself clear, from one reply I figured out that what I'm looking for is not ""combo"" but ""idioms"", of cause VIM is a language of editing text,  it has full of combos but there are some combos that are not very obvious but still very useful. Like one I have just learnt from this thread that >} is an idiom for indent lines from current line to the next empty line. Usually I just do Vjjjj> which is less effective. I hope this example can make this thread more focus on idioms, not just listing text objects like caw or yib. Thank you.  :EDIT DONE 

I've used vim a few years, on the very first day I already learnt `ddp` is the combination for swap two lines, but after many months of using vim, I eventually learnt from one's blog that `xp` is actually a short phrase for swapping two characters. I was shocked by the fact that such a simple but useful combination was not discovered by myself in the first few weeks. Now I would like to collect some really simple, concise, but life changing commands. These commands must be very simple, and can solve a common editing (programming) task like swapping characters.

I would start from my collection:

* **xp**, swap two characters.

* **vaBV**, if your cursor is in a {} block and you want to effectively select the block including the whole line before the {. Only works if your coding style does not put the left { in a new line.

* **V$%**, if your cursor is on the function name, and want to effectively select the whole function. I like this one is because $ and % are next to each other and all three need to hold Shift key, very easy to press. Again, if you put the left { in a new line, then you need to use Vj% which is harder to press, because you need to hold the shift, release it, then hold it again.

* This one does not qualify my request, as it needs key bindings and plugin to work, but I use it so many times a day, worth to mention here. 

    nmap zz yygccp
    
    vmap zz V&amp;lt;Esc>gvygvgc`>p

Above two lines map **zz** to quick refactor, it duplicates your current line, and marks the first line as comment so that you can quick do some tests without losing your work. This mapping needs support from [tpope/vim-commentary](https://github.com/tpope/vim-commentary) as it gives you **gcc** to comment out current line.

Do you have any short key combination you use daily and really solve your editing tasks? Please share, I will be appreciate.",78,70,Collecting life changing key combinations
,5,67,Vim patch 7.4.754 adds Visual Mode Increment
It just seems like that would be a great way to get me out of bad habits that I might not even know I have. Also I probably sound really nerdy for saying this but I could watch something like that for entertainment alone.,18,67,Is there a series of videos where I can watch a vim guru doing everyday editing tasks?
"Wanted to make a slightly nerdy shirt for a friend.

Teespring is cheaper for me if I can get some other folks to buy too, so thought I'd take a flyer and put this here too:

http://teespring.com/vimwq

",45,67,:wq shirt
"Doing some searching around, it's looks like it's been at least a few months since a thread like this.

Some people keep theirs short and simple for a more out-of-the-box experience, and others practically turn Vim into an IDE. Most people are probably somewhere in between the extremes, but who knows for sure.

Here's some good ones I've found to start things off: 

* [**Tim Pope's vim-sensible**](https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim) - ""Defaults everyone can agree on"" you can install it as a plugin, or copy what you like from the source code into your vimrc

* [**Steve Losh's vimrc**](https://bitbucket.org/sjl/dotfiles/src/141b96496989091fce4aa5165946f94d31c2374f/vim/vimrc) - Being the author of [*Learn Vimscript the Hard Way*](http://learnvimscriptthehardway.stevelosh.com/), he has quite the understanding of vim/vimscript, and his massive vimrc partially shows it

* [**Derek Wyatt's vimrc**](https://github.com/derekwyatt/vim-config/blob/master/vimrc) - see his Vimcasts in the sidebar, he's a cool dude to learn from

* [**Netherdrake's vimrc**](https://github.com/Netherdrake/Dotfiles/blob/master/.vimrc) - original creator of the [MinuteVimTricks](https://www.youtube.com/user/MinuteVimTricks) YouTube channel

* and last but not least, **[here's my vimrc](https://github.com/AssailantLF/vimrc/blob/master/.vimrc)**, which is almost entirely pieced together from other people's setups and ideas. If anyone has any suggestions or notices any inconsistencies, let me know. I'm constantly tweaking it.

Share away!",58,68,Share your vimrc for the start of 2015!
,38,68,Vim as Python code editor
,81,69,Vim isn't about speed. 
,4,64,Formatting lists with Vim [Vimways 6/24]
"Hello community,

Decided to share a colorscheme  I've been using for a few years: *sacredforest*. Here is the link: [https://github.com/KKPMW/sacredforest-vim](https://github.com/KKPMW/sacredforest-vim)

It is quite dark, low contrast and uses few colors. The interactive/important elements like TODO items, search highlights, visual selections and diffs are made to stand-out nicely from the rest of the text. For me it served as a happy-middle ground between colorful and minimal schemes.

`cterm` version is available but `set termguicolors` is recommended.

Hope somebody finds this useful. Any comments welcome.",25,65,Sharing a colorscheme: sacredforest-vim
"I came across this gem in someone else's [dotfiles](https://github.com/nicknisi/dotfiles/tree/master/config/nvim) and I wanted to share. It basically allows you to navigate windows with the Control key and a direction \(h, j, k, l\). Standard stuff actually. The cool part, however, is that if you don't already have a window there, it'll auto\-create one for you! It feels great.

    map <silent> <C-h> :call functions#WinMove('h')<cr>
    map <silent> <C-j> :call functions#WinMove('j')<cr>
    map <silent> <C-k> :call functions#WinMove('k')<cr>
    map <silent> <C-l> :call functions#WinMove('l')<cr>

The function it references is in the autoload directory as follows:

    function! functions#WinMove(key)
        let t:curwin = winnr()
        exec ""wincmd "".a:key
        if (t:curwin == winnr())
            if (match(a:key,'[jk]'))
                wincmd v
            else
                wincmd s
            endif
            exec ""wincmd "".a:key
        endif
    endfunction",11,68,Awesome way to navigate windows and auto-create windows
,5,67,Graphical log with vim-fugitive
,16,69,vim-barbaric: Switch input methods automatically when leaving Insert mode
"I have been maintaining the [vim faq](https://github.com/chrisbra/vim_faq) for quite some time now. However I feel I cannot keep it maintained and keep up with Vim development. So if anybody likes to contribute, I'd very much appreciate it. ",18,70,Call for help: Vim FAQ
,42,66,Roamer: The Plain Text File Manager
,60,65,Crosspost from r/emacs: how would you do this in Vim?
,12,65,Fuzzy completion in Vim
,14,69,Vim Survival Guide: share it with friends/coworkers thinking to start using Vim
"Welcome to the fifteenth weekly Vim tips and tricks thread! Here's a link to the previous thread: [#14](https://www.reddit.com/r/vim/comments/4nrhya/weekly_vim_tips_and_tricks_thread_14)

Thanks to everyone who participated in the last thread! The top three comments were posted by /u/tux68, /u/nerdlogic, and /u/Spikey8D.

Here are the suggested guidelines:

* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, please explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",60,69,Weekly Vim tips and tricks thread! #15
,11,66,Just discovered this sub. Wanted to share an old vim exercises page I made :)
"    Patch 7.4.1005
    Problem:    Vim users are not always happy.
    Solution:   Make them happy.

^ I LOL'd.",19,69,Vim users are not always happy.
,12,66,Taking Advantage of Sessions in Vim
,42,69,"If any of you use pentadactyl or friends, they're at risk of dying because Mozilla is deprecating XUL and XPCOM. Vote here to show demand."
,12,69,"If ""you're fine with a basic vi imitation designed by a bunch of Emacs users"" you won't need athame"
,28,68,Spacegray - An elegant new dark colorscheme for Vim.
,12,70,The VIM presentation
,24,64,What's he using to make spaces or tabs looks like that?
,27,67,TIL about Vimium: Feel browsing in Firefox like using Vim
,10,68,"I wanted to create a short Vim script that could evaluate a line of code (JS or Python) for quick calculations, then place the result in a comment. Turns out it's pretty simple, if kind of ineloquent."
"yes.   ^(longing this for) ~~^(years)~~  ~~^(decades)~~ ^(centuries)

and seems not many scripts there,  so I made a simple script for easy use

[https://github.com/gu-fan/simpleterm.vim](https://github.com/gu-fan/simpleterm.vim)

includes:

1. exec cmds /  lines /  files in a simple terminal window
2. background  jobs

thanks to `+terminal`, all async, without losing focus or sanity

enjoy

    "" execute commands (async in terminal window
    Sexe git clone https://github.com/gu-fan/simpleterm.vim.git
    
    "" run background jobs (and show me when finished
    Srun git pull 
    
    "" cd to a dir
    Scd simpleterm.vim
    
    "" execute current line in buffer
    Sline
    
    "" source target file
    Sfile  ~/test.sh
    
    "" show another window with test
    Sadd test",25,65,vim 8.1+ terminal is great
"Time and again, I am surprised at the mappings that people come up with, and how they simply never occurred to me.

For example, from the other thread about vim mappings: 

    nnoremap ,<space> :nohlsearch<cr>

I like it, dumped it into my .vimrc right away.

---

UPDATE: Wow, there are some truly great ones there! I'll definitely save this thread for future reference.",90,66,What are your best mappings?
,19,66,Use vim to edit text anywhere
,19,66,"A new vim color scheme, light and dark version, low contrast, support 24bit true color."
,14,67,Pushing built-in features beyond their limits (by /u/-romainl-)
,48,66,My slow transition from Sublime to Vim (I finally stuck with it)
"So I have been using vim for about 3-4 months now and I'm really enjoying the experience. However, lately I find myself constantly feeling I'm doing things the 'wrong way'. For example: ""This required too many key strokes"" or ""There must be a more efficient way to paste this block of code in the right place"" etc.

I'm using this reddit as a source of information and some tips you guys gave me in previous posts change the way I vim (like ""start moving around with 'search' more often instead of thinking lines"").

I do prefer not to horde the reddit with questions though. I'm looking for some guidelines which are less technical (as answer for those I can find in Google) and talk more about the 'flow' mechanics. I tried to search for some Youtube videos about it - as I always find I learn new things just by watching veteran navigate or edit a file using Vim, but I couldn't find something specific. Any resources you guys can recommend that that teach you how to properly chain everything vim has to offer instead of just explain what each key or command does?",23,66,How to Think 'Vim'
"I love vim. It makes me way more productive and is my go to editor any time I need to type something up. Hell, even I'm even typing this post in VIM and will copy/paste it when I'm done.

But when I need to do a find and replace, my mind goes into a little bit of a panic. 
*Oh shit, what do I need to escape?* 

I need to change all <'s into \&lt;'s - I'm almost positive I'm going to get it wrong on the first try. Something as fundamental as find/replace should be easy and take no thought. And the regex - it's not the same regex I'm used to. The rules are different.

If I have to do several replacements, I'll usually open the file up in Atom and do it there. I feel like I really need to get over this.

TL;DR: I'm scared of vim's find/replace. Any recommendation on how to get over this and master it once and for all?  ",69,68,"I love Vim, but..."
"I just saw this thread about the [set paste option](http://www.reddit.com/r/vim/comments/3a9vji/if_vim_keeps_screwing_up_your_indentation_when/) and the countless solutions for correctly pasting stuff in vim. Since nobody mentioned ""set clipboard"" and it does not only help with pasting I figured I should make this post.

What

    :set clipboard^=unnamed ""adds unnamed to existing values

does is that the register you use for yanking and pasting when you don't specify one becomes the system clipboard '*'. So when you need to paste something into vim you just select it, switch to vim, press p, done, no indentation mess either. But it also works the other way round, you can yank something and paste with middle click in your system. You can also set it to unnamedplus instead which will use the '+' register (On Linux this would be the Ctrl+C/V instead of select/middleclick then). unnamedplus needs X11 support of course. I never tried this but you can also set both, which should yank to both clipboards from vim and paste from the clipboard that was used last in the system.

The downside of this is of course that maybe you do not want vim to override your system clipboard, but I don't mind it. Also i find it very useful that you can now yank something in vim and paste it in another vim that is running in a different terminal or even a in an ssh session.

I just thought I would share this since it's a lot simpler than every other option that uses the registers. If you are on a server and you can't forward your clipboard this won't work of course but the other register solutions won't either and you'll have to use :set paste anyway.",31,68,PSA: set clipboard=unnamed
,14,65,"Now, vim-multiple-cursors supports pasting properly!"
,33,68,neovim/neovim PR: Moonscript support dropped in favor of standard Lua
,35,65,UltiSnips 3.0 has just been released!
,112,64,"Straw Poll: Do you use vim in your terminal emulator, or a GUI?"
,6,67,"Vroom: a tool for testing Vim plugins, by Google"
,17,67,"A quick demonstration of how to use vim, tmux, vimux, and turbux to edit code and run tests"
,11,63,Insert the first 100 prime numbers - a study in 43 keystrokes
,20,64,A new color scheme I've been working on for a while: Bad Wolf
,5,66,Github mirror of *all* vim plugins: awesome for Pathogen etc
,11,65,For Mappings And A Tutorial [Vimways 8/24]
"Hello,

Just found out this tip in a tpope's podcast. Basically you can edit any command in vim with the following default binding in bash:

`<Ctrl-x><Ctrl-e>` *then you edit the command, save and quit, you're back to the prompt with the edited command*

If you happen to use zsh like I do, you need to add the following lines to your zshrc for it to work :

    autoload -U edit-command-line
    zle -N edit-command-line 
    bindkey -M vicmd v edit-command-line

I find it very useful, especially with long commands, hope this helps anyone.",47,64,Edit any command line in vim
"In a modern context, it would make more sense to use semicolon, but I'm assuming the keyboard it was developed for didn't require a modifier key to get the colon?

edit: found \[this\]([http://xahlee.info/kbd/keyboard\_hardware\_and\_key\_choices.html](http://xahlee.info/kbd/keyboard_hardware_and_key_choices.html))",48,65,Why did vi use colons to preface commands?
"I used to use gvim. Had these mappings set up for pretty standard copy/paste:

`vmap` `<C-c> ""+ygv`

`vmap <C-x> ""+c`

`vmap <C-v> c<ESC>""+p`

`imap <C-v> <ESC>""+pa`

I could just hist C-c or C-v and be happy.

Then I decided to switch to terminal based workflow (GNOME terminal 3.24.2). All good except C-c and C-v don't do anything as far as copy/paste go. I also use [vim-system-copy](https://github.com/christoomey/vim-system-copy) with xsel installed, if I use this to copy text (from terminal vim or gvim) whatever it's doing, it's certainly not letting my paste it via C-v in other applications...

And now I'm starting to use tmux, and all hell breaks loose. I just want to copy text from vim with C-c and be able to paste it with C-v in e.g. Chrome, and vice versa.

Can some kind soul please share their config/snippet/advice for how you conveniently copy/paste with gvim, vim, and tmux-ed vim?",30,65,"Vim+Tmux+Linux users... Before I lose my mind, how do I COPY/PASTE conveniently?"
,10,66,rhysd/committia.vim - A Vim plugin for more pleasant editing on commit messages
,0,67,vim-markdown-composer: an asynchronous markdown preview plugin for Vim and Neovim (newly-added Vim 8 support!)
,85,65,"Vim users of reddit, what's your favorite autocompletion plugin?"
,21,63,Select mode
,12,65,Vim Color Schemes
,8,63,"RNB, a Vim colorscheme template"
,15,62,Effective spelling in Vim
,36,68,When you hit escape but it doesn't register
,12,67,Vim Cheat Ball (fundamentals) for desktop
,13,67,YSK about fzf: blazing fast fuzzy finder for shell/vim in the unix spirit.
,5,65,YBlog - Learn Vim Progressively
,11,64,Proposed MacVim icon for Yosemite
,33,69,"Hey Guys, check out this colorscheme Luna, and tell me your opinions ! :)"
"Typing something in gmail chat, finish my sentence. I automatically hit esc, and my chat window closes, killing what I just typed. I can't even think of how many times I've done this. It's the worst when I'm actively developing. Not that losing those few lines takes long, but man...",72,68,I just canceled my chat again...
"I'm aware that this isn't the first time something like this has been written/posted but I figure I would share my configuration for those who want to squeeze a little more out of Vim as their Python editor of choice. Hopefully some people here will get something out of it.

http://unlogic.co.uk/posts/vim-python-ide.html",54,69,Vim as a Python IDE
,116,65,What is your .vimrc and why do you like it?
,46,65,"""Holding down 'j' is a vim anti-pattern."" Better ways to jump long distances"
,6,69,VimConf - Virtual conference for Vim lovers all over
"For me, it's clearly Visual Block Mode. I have a hard time watching people e.g. uncommenting multiple lines line by line when they could do it in a single operation.",97,66,Which one is your favorite Vim feature that more people should now about?
"I recently started using YouCompleteMe. I like it, but it is rather heavy for what I do with it. What do people use for autocompletion? I don't mean C-x, C-p etc but ""real"" autocomplete with a popup list.",54,67,What's your favourite autocomplete solution?
,8,62,Make your setup truly cross-platform [Vimways 7/24]
"This is really nice and it's the first time after setting up a mac I haven't needed to then recompile a new version of Vim. 

&#x200B;

\`\`\`  
**VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Aug 17 2018 15:22:29)**

**Included patches: 1-503, 505-680, 682-1283**

**Compiled by root@apple.com**

**Normal version without GUI.** **Features included (+) or not (-):**  
\`\`\`",36,66,PSA - macOS Mojave (The latest release) comes with VIM 8.0 pre-compiled
"I'm just a newbie in Vim, still learning and decided to write this https://medium.com/@brunojorge11/vim-as-php-ide-83310dddbf03 In order to help this fun process of learning how to handle Vim. So, please be gentle with your critics",12,64,Learning vim for a month or so this is the story of my learning path so far. Let me know what do you think. Thank you.
"So, today I had to remove vim&vi temporarily since I'm afraid I have a corrupt version of the package, I googled around and couldn't find much on the issue.

I had a text file (python code, maybe 100 lines) open for a few days and afterwards delete it (and, at some point, closed the vim terminal holding it).

Lo and behold, a few days later I run out of space and track down the issue to ~/.vim/file.py.swap eating up a whopping 298GBs of disk

I was running vim v8.0.1542

The binary seemed fine (md5sum matched the one of the repo). Any ideas what may be causing these types of bugs ? Have I had the misfortune of owning a broken version ?

I did install nvim at some point, so maybe that has caused issues.

I am quite curios why this would happen.",13,62,Cause of 300GB Swap file o.o
"I've been told by a couple of folks over at r/mechanicalkeyboards that if I like typing, I should learn vim. I'm interested, but I'm struggling to see exactly where I'd start.

I'm a writer by trade (using mostly Word and Scrivener) and I've just started learning to code. Would learning vim be useful for a writer/noob coder?

Thanks!

**Edit:** Man you guys are helpful! Thanks for all the responses, I'm definitely going to try some of these suggestions. Already loving Vim Vixen :)",92,64,Should I learn vim?
"This is what I have been using for my todo list. If you use it, you should adjust the highlighting. This works for me using ConEmu on Windows 10 (linux subsystem).

* Leader-n makes a new checkbox on next line
* Leader-x marks line complete
* Leader-X marks line incomplete. 

* Beginnings of lines with capitals are headings
* Anything between the checkbox and a | are dates
* If a line contains ! it is highlighted as important

* When you close it, it saves a ps version

[Mock todo list](https://i.imgur.com/Sd3NaWy.png)

[Relevant .vimrc lines](https://i.imgur.com/PdKMXsC.png)",22,62,My todo list
"Hey guys,

I'm currently in the process of writing a book (25 pages in) and I'm seeking a simpler, distraction free writing environment. I bought a raspberry pi and am planning on setting it up to boot directly into the command line + using VIM to write.  

I've run through VIM tutor twice and have a basic grasp of the commands but it seems to function differently when writing in a plain text file. Mainly that it treats what I write as one long single line so I can't skip up or down the file.

How would it be possible to set VIM up to function as a very, very simple word processor? Any ideas how I would set up my .vimrc to make it function that way? I don't need anything fancy, in fact the simpler the better. No wordcount, spellcheck, or other tools would be needed. I just want to focus on getting the first draft done. From there I'll be transferring the text to Word for editing.  




Thanks",42,65,Setting up Vim to write a book?
,14,65,A more than diminutive vim statusline non-plugin [x-post from /r/vimplugins]
"it just clicked that you can use yank on text motions, eg yi"". up to this point I was using visual mode to select from start "" to end "" EVERY TIME. I knew about d and c as text motion operators, and didn't think about y in that context till just now UGGGH so much wasted previously",39,66,holy shit
,10,64,vim-easymotion v3.0 supports moving cursor over/across windows!
,23,65,Emacs running in Neovim
"So I've been using vim maybe 3 years now and just discovered the ""!"" command, which lets you run bash commands and then immediately return to the file you were working on in vim. 

For example:

:set autoread 

! cat /etc/issue >> /your/current/file.txt

No more closing out of vim to grab text in the terminal. I'd say this should be ""Vim 101,"" but haven't actually seen it mentioned in beginner tutorials and took an accidental discovery to realize it can do this. 
",39,60,"With a simple ""!"", things get a whole lot easier."
,8,64,Online ColorScheme Editor for Vim [ViVify]
,31,61,New Vim plugin: Text-object for word-based columns
,22,62,Actually using ed
,2,65,My Vim Reference Manual
,15,65,The power of g
,3,61,"25 Vim Tutorials, Screencasts, and Resources "
,5,64,"Sly Emacs burn - set up, baited, and executed. Repost from /r/bestof."
"No activity in this reddit for a long time, so decided I'd post something. 

This tip is how to speed up editing of your complex ex commands or / searches. 

If you are in normal mode hit q: to get the history window of the commands you have recently typed. Now you can navigate the command window using regular vim commands, edit a command line using normal vim editing commands. When you are done hit enter to run the current command line (the line you are on).

q/ does the same for / searches. So if you entered long complicated regular expression, you can now edit it faster using all vim's might :D.

CTRL+c gets you out of the search or command line history window (if you change your mind and don't want to re-run the command or search after all).

By the way q? also works if you are wondering (for opposite direction search history).",13,68,Editing your command line in VIM
"Ive always been annoyed but worked around the fact that pasting with \`v\` and \`p\` seems to overwrite what is in the register. lets say I have three parentheses and I want to copy what is inside the first one and paste it in the others

&#x200B;

`(stuff in 1)`

`(stuff in 2)`

`(3)` 

&#x200B;

normally, I would go to the first one and then hit 

&#x200B;

\`vi(y\` then go down a line and hit \`vi(p\` which pastes the register into the second line, but now I have \`stuff in 2\` in the register so I have to re-yank the stuff to get it back and paste it into the third line. Is there a quick way to no lose what is in the register when I do \`vi(p\` ",26,63,How to paste without losing the text in the register?
"I use vim for everything: C#, Python, Go, HTML/CSS, basic note taking, etc. 

I was applying for jobs and the C# shops that I interviewed with thought it was weird that I don't use VisualStudio. They felt that I was resistant to IDEs but I assured them that that wasn't the case. The truth is I've never felt the need to change my workflow.

Anyways, I accepted a position at a mid-size tech company with a polyglot stack. They use Java, Ruby, Python, PHP (unfortunately) and a few other languages. I'm not entirely sure which languages I'll be working with (most likely Java and Ruby at the very least) but is vim a ""good"" editor for Java?

I would naturally use vim with Java if I needed to write code right now but I'm not sure if I'm better off opting for an IDE. This is my first software engineering position so I'm not really sure what everyone uses in the industry.

EDIT: Just for clarity. I have a pretty extensive vimrc and tmux configs. I use ale (linting), neocomplete (autocomplete), and a bunch of plugins and linux utilities. I also use i3+Tmux so I can search and run files pretty quickly. My Vim+i3+Tmux setup is IDE-like, I guess. I know vim is just an editor but it feels like an IDE with my current setup.",79,63,Do you use vim for Java?
,20,63,vim-diffconflicts - A better Vimdiff Git mergetool
"The other day I stumbled across ""easy mode"". start vim with a '-y' argument. You are put in insert mode automatically, and escape does not get you out. So ironically easy mode is even harder to quit than normal. I had to force kill it the first time, then after some googling, discovered ctrl-l gets you into normal mode. 

There is very little info about this mode or why it exists. The help section is just a short paragraph. It seems useless because you still need normal mode to save or anything. My best guess is it's intended to be used with a gui. I tried it with macvim, and there I'm able to save, undo, with command-w and z, like a more modern editor. 

Anyways, I just thought it was strange and interesting feature that I will certainly never use.",11,63,easy mode exists I guess
,8,64,Intro to undo branches in Vim
,195,63,ELI5 - why vim instead of a modern editor (sublime/atom)? I did use vim in university but what makes it so popular/diehard?
,16,63,"Everything I Missed in ""Vim After 11 Years"""
Vim: always leaning something new with it.,12,65,TIL: guu & gUU -- makes an entire line lowercase and uppercase
,27,61,SolidOak - The first Neovim based IDE! (for Rust)
,29,63,Vim is a game
,24,65,Vim Is Not a Black Box
"[http://www.kornerstoane.com/2014/06/why-i-cant-stop-using-vim/](http://www.kornerstoane.com/2014/06/why-i-cant-stop-using-vim/)

Something I've been wanting to write for a while, now. If you follow the link to my blog post, you might be the first non-family to visit the site!",34,61,Why I can't stop using Vim
,21,61,Neovim's Plugin UI architecture (as of 21 hours ago)
"I just found out about [Evil](http://gitorious.org/evil/pages/Home). They just reached [version 1.0](http://permalink.gmane.org/gmane.emacs.vim-emulation/1765).

Evil emulates the main features of Vim in Emacs. It also has some really good [ports of vim plugins](http://emacswiki.org/emacs/Evil#toc5).

So… has the vim/emacs debate been cancelled out? Or do we need an implementation of emacs in vim?",52,65,Evil: a nearly complete vim implementation in Emacs
,8,62,Slow down Vim to get faster
,16,64,"New website that ""showcases the best plugins, extensions & tips for making the most of Vim"""
,8,64,"Functional Programming in Vimscript (alternate title: ""Oh God What Is This I Don't Even"")"
,11,63,Turning vim into a modern python IDE
"I stumbled upon this [asciinema video](https://asciinema.org/a/ZpaTYQa5IDrwreD6iVk8XhCCF), but I don't really understand what's going on. They seem to be running commands from inside the buffer, but I'm not sure how and I'd like to learn more about it. Is there anyone who could explain how this works, specifically the `map`, `+kt`, and `'t+` parts? Or maybe point me to the right help pages?",28,59,How does this work?
,20,62,"vim-zen: a barebones vim plugin manager that does 3 things, installs, removes & updates plugin(s) and does them well. It's easy to setup and use."
"Started to learn VIM a couple times and I failed every time. Googled guides a good amount of times, but again I always failed.  Right now I'm at a point when I want to learn it again, but I've tried most of the guides. 

Do you have any tips for me to learn it and finally switch? My main language is nodejs right now. ",75,66,Learning Vim and switching to it
,12,59,This plugin is used for displaying thin vertical lines at each indentation level for code indented with spaces.
,3,61,I've written a tutorial on creating a (simple) Deoplete source
,5,62,Vim's 25th anniversary and the release of Vim 8 (LWN)
"Hi 

What are some of the great plugins to use vim 8 async features?

I found 

https://github.com/ramele/agrep

https://github.com/skywind3000/asyncrun.vim

Any other plugins ?",24,62,what are some of the best plugins to use vim 8 async feature?
"Hey /r/vim.
I was wondering if there's anyone out there that is doing all their work remotely using vim/ssh? If so, what's your workflow? I'm thinking large-ish apps in C#/Java(Maven?)/C++, and also python/haskell/c/obj-c/...

The reason I'm asking is that since my laptop has started to die I was thinking that, rather than replace it, I could host my projects on a server at my college. Then I can just ssh in from the various computers around campus and continue whenever in a tmux session.

My laptop weighs a tonne too (It's a 17"" behemoth from 2011), and carting it in and out every morning hasn't been super fun.

I wouldn't be able to install anything on the local college computers, since the user sessions are wiped as soon as you log out. Ssh/vim/tmux is about as good of a development environment I could get remotely(?). I can install whatever on the server however, and the terminals on the college computers are full colour (Osx..) so that's not an issue either.

Any tips/ ideas/ thoughts? Maybe I should just bite the bullet and invest in a new laptop, but doing everything remotely could be so handy. I haven't heard much of anyone doing heaver Java/C# stuff in vim at all though (Possibly because of the pretty strong Visual Studio/ Intellij vim emulation plugins), so I'm not sure it's possible to have a setup ~~in vim~~ in terminal that can rival an IDE right now...

Thanks!

Moose.

Edit: In vim -> In terminal.",60,61,Is anyone doing all their development on a server with vim via ssh?
"Welcome to the fourth weekly Vim tips and tricks thread! Here's a link to the previous thread: [#3](https://www.reddit.com/r/vim/comments/4c62l3/weekly_vim_tips_and_tricks_thread_3)

Thanks to everyone who participated in the last thread! The top three comments were posted by /u/cmonletsdance, /u/aerobug, and /u/bookercodes.

Here are the suggested guidelines:

* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, please explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",53,60,Weekly Vim tips and tricks thread! #4
,29,65,VIM and Python - a match made in heaven
,7,61,Floobits Now Supports Neovim
,30,65,Semantic-Highlight.vim - Each variable in its own color
,51,64,Tim Pope is Flirting with the Dark Side
,33,65,Vim Is Better — Let me count only a few of the ways in which Vim trounces many other text editors.
"Since the dawn of the editor wars we have always prided ourselves in the notion that vim is a smaller and faster program than emacs but in reality our program is bigger
https://www.ohloh.net/p/emacs/analyses/latest/languages_summary
https://www.ohloh.net/p/vim/analyses/latest/languages_summary

and when comparing average user setups the file system size is a wash and memory usage is largely in the unimportant range.

Then given the large collection of customizations being done, would it not be wise for us to admit Emacs did get one thing right: the need for the users to quickly customize the software to fit their current needs.
Skipping the whole mode/modeless debate; Vimscript is the question.
For if we were to ignore it as a useless feature, we would logically have to compare against mg https://en.wikipedia.org/wiki/Mg_%28editor%29 which is emacs without elisp. 
Should we consider vimscript essential to improve productivity, should we not improve it to enhance productivity and functionality in general scripting?",79,60,Has Vim gone too far or not far enough?
,24,62,easy-align: an alignment plugin
,20,64,"If you use the Solarized color scheme, add this to your .vimrc to automatically use Solarized Light during the day and Solarized Dark at night!"
,10,62,Original Vi Platform AMD3A Terminal on Docotor Who
,51,66,"Vim: Making those Arrow Keys Work With You (or Why the Anti-Arrow-Key Propoganda is Wrong, but Right)"
"I can think of season 2 episode 5 of Mr Robot, where vi was being used.",40,63,"VIM vs EMACS fun: What are some TV shows or movies, etc that have a character using either of the editors?"
"I often find on larger files (4-5k of php...yes I know...) that Vim seems to be a bit sluggish. I know that the main culprit for me is Ale but I'd be curious to see what people have to make their vim perform better (if anything).

These are mine


    ""Performance improvements
    set synmaxcol=200 ""Don't bother highlighting anything over 200 chars
    let did_install_default_menus = 1 ""No point loading gvim menu stuff
    let loaded_matchparen = 1 ""highlighting matching pairs so slow

I've also manually pruned the `HereDoc` and `NowDoc` syntax group from the `php.vim` syntax file because they are extremely slow.

",24,62,What performance related things do you have in your vimrc?
,33,60,do you guys ever forget you're not using vim?:wq
,17,61,Subset Park: Digital Minimalism for the Working Hacker
"Hello Everyone !

I have some question and I need your wisdom. I've started to learn to code 12 weeks ago (love it). Right now I focus on web developpement but at some point I want to learn other languages.

I like to think ahead and I'm thinking to learn Vim. I aleardy use tmux and combine the two seem awesome !

The thing is, has I'm already currently learning some language, so maybe it is not the best idea to learn Vim on the top. Or is it ? I mean the faster I learn it the better ?

My second problem is that I'm using an AZERTY keyboard and it's suck. So I was planning to either switch to qwerty (easy solution) or learn the dvorak layout (or maybe Bepo, if any french is reading).

Witch one will do a nice combinaison with Vim ?

Thank for your time
",59,62,New to programming. Should I learn Vim right away ?
"Hi there,

Here's a 70s-inspired theme for gvim/24-bit terminal I've been playing with lately: [Far Out](https://github.com/fcpg/vim-farout)

Link to screenshot: https://raw.githubusercontent.com/fcpg/vim-farout/master/img/farout_vim.png

Link to theme: https://github.com/fcpg/vim-farout

For once I departed from the black background, so if this is a dealbreaker for you (or if you don't have a 24-bit terminal), check out [Fahrenheit](https://github.com/fcpg/vim-fahrenheit).

",10,63,"New Retro Theme: ""Far Out"""
"Which of these are best for omnicomplete for different languages and contexts?

Like showing ""href"" for an ""a"" tag but not a ""div""",38,64,Neocomplete vs YCM vs VimCompletesMe?
"Hi, I do my development on a remote VPS, and currently I run Vim on the server inside an SSH session.

I was wondering if there would be a significant benefit to using Vim (gvim) locally on my Windows machine(s) and using its netrw plugin to read and write files on the dev server.

I'm thinking the benefits might include easier copy/paste, lower latency, anything else?

And drawbacks - I would not know how to do things like run Git or build commands on the server - I'm assuming a local Vim can't run shell commands on a server over netrw and I'd need a separate SSH session?",41,61,Vim over ssh vs. running Vim locally and editing remote files with netrw
,14,61,Nice physics-based smooth scrolling to the Vim world!
,2,62,An Intro to Vim Macros
"https://github.com/AlessandroYorba/Despacio

Inspired by Moonshine, Railscasts, and Zenburn",19,60,Despacio - a warm minimal Colorscheme
"I am a screenwriter. I write my drafts on a typewriter. A bulky draft is now ready to go digital. I am using Scrivener to collate, arrange and organise text for a first draft.

Before going manual I invested months toying with almost all text editors/processors, including emacs. Yes, I did compare it with Vim, and also Sublime Text.

I quit emacs not only because of the learning curve but also because I wasn't able to configure it to my use(learning curve infinite loop). I am writing here because I use Vimium for Chrome. Having hovered over Vim features today, I find them if not easy, at least simple.

I am not a programmer. I do plan to learn, considering I find a platform to work on and build my configuration:

* Spell-check: I write a second language in roman script. I'd like to be able to build a spell-checker based on a roman dictionary of my second language. 

* Auto-completion: Ability to train and add personal keywords. Such as t+space is always the. th+space is always that. Merge auto-completion with personal spell-checker. 

* Dictionary: Access multiple dictionaries at once. Oxford, Cambridge, American Oxford and so on. Build personal dictionary. Rhyming dictionary too. 

* Thesaurus: Same as dictionary. Add multiple sources. If one doesn't exist, I'd like to build one up from ground up. If Roget's isn't available I'd want to be able to configure it myself. 

* Word List: Lets take Verbs. Screenwriting is verb writing. One is bound to obsess over verbs. Say you have a master files of all verbs in the dictionary. I'd like to tag and build this library into say dynamic verbs, sense verbs and so on.  

* Grammar: Ability to highlight parts of speech. Ability to configure sentence structures and add rules around them. I'd like to add [such](http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/) codes to the configuration.   

* Master List: I am always collecting words, phrases, sentences, anything and everything. So far I have failed to collate them. Referring to them is like learning emacs. I'd want to be able to maintain a file, a very large file for this purpose and break the contents down into sub-file with the ability to change text in one and also have it reflect in the master file. 

* Version: The typewriter excels at informing me where I began and where I am going. I can check the birth of a paragraph and its growth over sentences. I want the document to always tell me what this sentence was built on. I am not sure if I am being clear. 

* Files and Organisation: Emacs gave me nightmares over file management. I am still now sure how I'd like to structure my work. 

* Durability: The above and much more is meant to be worked on over many years. I want each keystroke to be in one place. 

Thank you for your time. ",67,63,A writer in search of an editor that lasts a lifetime.
"I am currently using `<C-a>` but it get's in the way more and more. In vim it overlaps with increment of numbers, in terminal it interferes with moving the cursor to the beginning of the line.

Any good alternatives?",116,61,vim + tmux - what tmux prefix do you use?
"I've been using vim for 8 years now and I can feel my text editing skills are at a plateau in the solidly upper-intermediate range. Someone new to advanced editors will think I'm a wizard of the highest caliber, but to other programmers I'm just a guy who knows vim a little too well. I want to feel like a wizard to all, so I'm going to start taking 1/2 hour a day to read help pages and sharpen the axe a bit... How did you guys enter the upper echelon of editing? I mostly edit bash, clojure, and javascript/html source.
",22,63,What vim ideas & help pages took you from intermediate to advanced?
,13,60,/u/shaungeorge_ explains why we really choose Vim over an IDE
,69,60,"This is what my (Mac)Vim workflow looks like, what does yours look like? Let's give tips pointers and make eachother more productive!"
"I've always been surprised by the number of GUI vim users... so let's have an impromptu vote.

Upvote and/or comment on the version you you use more often.",176,62,Vim Poll: Do you use the terminal version or the GUI version of Vim more often?
"So, I've been using vim as my primary text editor for the past 6 months or so. Over the time I did few minor changes that incredibly sped up my workflow.

What I did:

* remapped caps lock to escape (huge difference)
* remapped ; to : (my hands no longer hurt, yay)
* set , as my leader key (,p is much more convenient than c-p) 

What are your simple tricks that sped up your workflow?",99,57,Simple things that sped up your vim workflow
,32,61,"I accidentally found this command history menu, but what did I press?"
,6,61,Vim for Python development
,21,65,Seamlessly working between Chrome Inspector and Vim with new Brolink.vim feature
,18,62,fizzbuzz done in vim
"\# searches backwards for the word under the cursor and * searches forward for it. It just occurred to me that they're both on the middle finger.

Not a huge deal but since I still don't have these characters fully in touch-typing memory (well * is ok, I stop a bit for #), realizing that makes it easier to find them quickly.

I also tend to use # or * to activate the search and then 'n' and 'N' to go back and forth. The fact that they're on the same finger makes it a tiny bit easier to stop using 'n' and 'N' and instead # and *. Kind of like putting myself in position for search with both middle fingers on the top row.

So, I thought I'd share :)

edit: it's very true on my matrix-layout US keyboard. I realize now that it might not be as obvious or useful if you have a regular keyboard or a non-US one. But you should get a better keyboard ;-)",27,57,Small epiphany: # and * are both on the middle finger of each hand
,8,63,Vim's Undo List Isn't A List. It's A Tree.
,11,60,Non blocking job-control for vim (a new patch by Thiago Arruda).
"I've been using terminal vim for about a year now, and I understand that many users of this subreddit use gVim. I don't understand what advantages it has. Thanks for any and all answers!",104,64,What's the advantage of gVim over terminal vim?
,27,62,Mind map of Vim commands - Suggestions for improvement?
How can I commit changes and see diffs without going out of the editor? is there any simple plugin?,52,61,Git workflow with VIM
"A while ago I asked on askprogramming if there was a way to have vim navigation everywhere on my OS - Windows. I received no pertinent answers. Today though I was setting up a text editor that didn't have Vim Plugins or Emulators. After some googling I found the ultimate solution:







An AHK script. So far I played with 3 versions made by various users. The best and most complete is [this one](https://github.com/MarcWeber/autohotkey_viper). By default CAPS LOCK is set to switch to Normal mode. You can replace it with a key of your choice - it's in the Kommand.ahk file. I'm still browsing through the ahk files to see all the commands available but so far it has: HJKL, W and B, %num% COMMAND (for repeat commands), dd.





You can check the others on [this thread](https://autohotkey.com/board/topic/41206-modal-vim/)





It works everywhere. Word, Firefox, Wndows Explorer (it's very nice to navigate the folders up and down with K and J). Just make sure to run autohotkey.exe as an Administrator so that it will work across all programs.






Finally.",16,61,VIM Everywhere on Windows. Finally.
,22,63,"vimb: the vim-like browser, based on WebKit and GTK"
,18,59,Now it's possible to port neovim plugin to vim 8
"[Check this out](https://github.com/llvm-mirror/llvm/blob/4d5536b1011d488ce9bff62fa76ff87aa04158cf/utils/vim/vimrc#L102), ~150 lines of Vimscript that uses your regular old Clang binary, along with some flags I didn't even know existed, to provide semantic completion for the C languages. I tried it, briefly, and it seems to work well. This could potentially be adapted into an awesome plugin.",2,58,Found this in LLVM's source - Lightweight Clang based omni completion for the C languages
,9,59,ಠ_ಠ Vim plugin to disapprove deeply indented code. ಠ_ಠ
,15,62,Mouse usage with vimperator
,16,59,Optimizing your workflow with Vim | 8th Light
"Hello dear readers, yesterday i read about a (for me) new modal editor, which takes vim as a starting point and uses it to create a new ""more thoughtout"" experience.
For example x and d are merged into one key: d and the most important thing i read so far, you don't start your actions with a verb and end it with a noun
(e.g. dw to delete a word, dp to delete a paragraph), but you start with the positioning and execute the action on that noun (e.g. wd and pd).
The last notable change is the merge of the normal-/ and visualmode we all know from vim into one mode, which is always giving feedback about your actions.
This is all i read/heard about kakoune before i started my journey

Part 1: Installation.

As i am using an OSX machine, i prefer to start with the brew installation guide, provided on https://github.com/mawww/kakoune#2-getting-started.
While i was waiting for the installation to finish, i looked at some screenshots, which show kakoune in action and noted a few differences to vim already.
1)CLIPPY IS BACK!: The small helper, older people might remember from Windows XP is celebrating its comeback on kakoune. You will see it, whenever you need some help.
2)It looks like there is some kind of semantic autocompletion available out of the box, which would be awesome, as it is one of vims major flaws, because you have to
either rely on the heavyweight Plugin ""YouCompleteMe"" or pray to not shoot yourself in the leg while trying to configure deoplete and tab movements.

Part 2: First steps with editing:
     After Installing kakoune, you can start it with ""kak"". While this does not sound as neat as ""vim"" you are greeted with a blank screen.
     The first i will do is try writing a simple prime-number program in c, which prints all primenumbers between 1 and 1000, the point of this is to compare kakoune after
     writing the same code in vim.
     After writing the code in vim, the first thing i notice, is that neither '0' nor '$' work to move to the beginning/end of a line.
     To move to the end/beginning of a line you have to use gh or gl, for consistency you can also use gj/gk to go to the top/bottom of the file.
     I read about the multiselection and wanted to give it a shot. To use a simple example i wanted to copy a line a few times and use the multiselection on those.
     Sadly you cant just use yy to yank a line and press p a few times anymore.
     After looking shortly into the manual i read the following line : ""x: select line on which selection end lies (or next line when end lies on an end-of-line)"".
     If you free a key, you can use that key for something else. Curiously i pressed x and the whole line got selected and the cursor moved to the end of the line.
     Now i pressed 'ypppp' and could copy/paste that line a few times.
     As soon as i was able to yank/copy a few lines i gave the multiselection a shot.
     As far as i know the vim equivalent to the multiselection would be the ""Visual Block Mode"" (Ctrl-V), which allows you to select a few lines and work in parallel on them.
     Kakoune takes this multiselection a whole layer further.
     By pressing '%' the whole file is selected, when you press 's' you can enter a regular expression and everything in the file, that matches said expression will be selected.
     If you press now <CR>, you have a cursor on every occurance and from there you can do your editing commands.
     To test this feature i wanted to replace all 'int' with 'double'.
     I entered '%sint<CR>' and saw, that not only every int was selected, but also every printf call. That was not the intendet result, as i don't want to have a prlongf call
     every now and then :D
     The regex for a whitespace is \h and so i entered '%sint\h<CR>' and now i got my result.
     Granted, it may seem counterintuitive replacing every int with a long, especially if you can do it in vim with a simple search/replace.
     Still i believe that this feature is better than just plain search/replace, as you can see highlighted which items will be replaced and you can make changes on your
     expression on the fly without pressing 'u' and going up in the commandhistory to change something.
     The next thing i wanted to try out is about jumping in a line.
     In vim you can jump with w to the beginning of the next word and with f or t to the next occurence of a following character.
     As i mentioned before Kakoune takes a different approach on that. You don't exactly ""move"" to a special place, you select everything in this movement and the cursor
     is placed on the last, by this movement effected, character.
     As soon as i press 'w' my cursor is resting after the end of the word. Now i have three options. Either i can extend/shorten the selection by pressing 'W' or 'B'.
     Also i am able to press 'w' again to start a new selection, while unselecting the previous word.
     The third option would be an action i can perform on the selected area. By pressing 'WWWWWd' (i could also use 'w' on the first movement).
     As i wanted to complain about the missing 'W' key to select a whole WORD (In vim a WORD is a sequence of characters, seperated by a whitespace. A word is kinda more complex
     to explain, but e.g. to jump over 'foo.bar()' you have to press w four times, as it is seperated by a . and a ( ), i read about <alt> commands.
     Sadly none of the <alt> commands seem to work on my mac (yeah i know, get a real computer hurrdurr). Pressing '<alt>w' should jump to the next WORD, but it just seems to do
     nothing, maybe a bug, maybe i forgot to toggle something :D .
     To conclude the getting started part, i seem to like kakounes approach, as it seems more fluently and more thought out at some points (although i feel a strong repulsion
     every time i have to use 'gh' to move to the beginning of a line, this just feels so wrong and misplaced, as i have to use two hands for that :D )
     If the alt key starts working i can give more feedback but for now some things are just missing, like searching backwards for a character.

Part 3: Customization and Plugins
     Let's be honest: vim without any plugins is a very, uhm, puristic experience.
     We all love vim because of all the available customizations. With a few steps we can use git, navigate between files and use every colorscheme known to man.
     Heck we can show some answers on stackoverflow to a given input text in a new buffer.
     On this topic there isn't much i can say about kakoune. I couldn't find any Plugins.
     I guess that is a problem you might encounter if you are not in the game for 40 years and rather less is found, if you search for something about kakoune.
     If I could wish something, it would be a vim-editor, which supports python3 as a scripting language.
     Back to the topic: I have tried to do some things, which are important to me and my workflow. I would like to have line numbers on the left side of the screen.
     The line i am currently on is the absolute number, all others are relatively numbered.
     In order to show the absolute line number, you have to add 'hook global WinCreate .* %{addhl number_lines}' to your kakrc (which is located relatively to your kakoune binary
     file, maybe someday there will be support for a .kakrc in your home directory).
     Relative numbering is something i couldn't find.
     Git seems to be available by default, as you can execute e.g. ':git add' from kakoune, without leaving it.
     The last thing i would like to take a look at is the code-completion.
     As we all don't like to write much we would love to just press '<tab>' and get everything written automatically.
     The default completion from kakoune is able to complete keywords from the language you write in and recognizes already written code and you can complete that too.
     Semantic completion seems to not being available for kakoune yet, so there is not much left to say.
     I hope some cool person is writing on a semantic completion plugin while i am writing this text, as this is just an awesome feature :D

Part 4: Final Words
     I guess i didn't cover everything there is to say about Kacoune, please don't be sad if i didn't cover e.g. buffers (they work), marks (haven't seen them)
     Macros (q replays the @ macro, Q records a Macro to the @ register, ""<character>Q records a macro to a different register and ""<character>q plays that macro.
     This has pros and cons, essentially if you use only one macro, you save some strokes, if you use more macros, you need some more strokes. No more vim-golf)
     I would love to see kakoune become a thing, especially as it is really nice and behaves more friendly to new users (CLIPPY). Also i can learn some new things
     as i read the recommendations from clippy.
It is a really nice experience and i can recommend this to all of you. I had much fun and i hope i can help the one or the other with this text.
Please don't hate me for my inexperience at writing, it is late from where i come from and English is my second language :D




     
",14,62,A vim users comparisation between kakoune and vim.
,23,58,IntelliJ completion plugin for NeoVim
"Since Vundle is no longer being maintained I figured it was time to make the switch. I had a bunch of plugins inside .vim/bundle which I simply renamed .vim/plugged 

The code for vim-plug is more lightweight than Vundle as well and with parallel updates I couldn't be happier. 

Just thought I shared in case anyone else was still using Vundle or was looking for another plugin manager.",53,61,Just Switched to Vim-Plug from Vundle
"Hello everyone! In few days it will be exactly 2 years, from when I created my first vimrc and
a dotfiles repo. Since that day I was constantly looking to improve my workflow.
I am pretty visual person so next to functionality I looked for visual appealing as well.

So, after 2 years of fiddling with my config files, browsing through hundreds of other people dotfiles,
various blogposts, tips and tricks, etc. I polished and documented everything
and thought about to give the community back, so somebody like me 2 years ago will have
another place to inspire himself.

Feel free to comment what You do and don't like, but in the end, it's just my config so it will be opiniated :)
Anyway, Here You go -> [martin-svk/dot-files](https://github.com/martin-svk/dot-files)

TL;DR

Well documented, terminal centric web developer's dot files. 
Included configs -> Vim/Neovim, Zsh, Tmux, Git, etc.

Here You go -> [martin-svk/dot-files](https://github.com/martin-svk/dot-files)",50,57,"Well documented, terminal centric web developer's dot files. Vim/Neovim, Zsh, Tmux, Git included."
,41,61,Moving to Neovim from Vim
"I'm trying to figure out what a programmer's screen would have actually looked like as they worked, what text editor features they relied on the most, or anything someone might not now about what programming was like. The period I'm most interested in is around when it was decided for ex to default into visual mode, and be installed as 'vi' in BSD in 1979.

In particular, a full vimrc or exrc or other configuration files from the 70-80's would be awesome.

Or if anyone here remembers writing code back then and wouldn't mind answering a few questions that would be great too. :D

Thanks for reading folks",23,60,"What was popular in vimrc (or exrc) in the 70's, 80's?"
"I went to see the new movie 'Chappie' last night and there was a scene where the robot sits down to program and he uses Vi. 

I know programming is notorious for being inaccurately portrayed in the media but I was wondering if vim/vi has been spotted in any other major movies or TV shows. ",15,60,Vim in Movies/TV
,53,63,Neovim Fundraiser - 5 More Days To Reach Stretch Goals!
"It's been in Vim since patch [7.3.787](https://groups.google.com/forum/#!topic/vim_dev/vMX1-KYOB9M), thanks to /u/nandryshak , but I just discovered if you turn on `relativenumber` and `number`, you get a nice amalgamation of the two which shows the line you're on, and the others as relative, as seen [here](http://jeffkreeftmeijer.com/images/hybridnumber.png).",20,60,Fun fact: Hybrid lines
,5,57,The commandline window - use the full power of Vim when editing search queries and commands
,0,61,Vim tips: stuff I wish I knew when I first started
"Right now I'm using function keys but it's really awkward. Ideally I want something a little more natural, I've tried to get alt+arrow but zero luck.

edit: That escalated quickly.",64,56,How do you guys work with tabs?
,42,58,You (probably) don't need Vimwiki
,35,62,Vim as a first code editor? Good idea for the future?
"1. What's your current colorscheme? 
2. Did you create the colorscheme you currently use?
3. What's your favorite colorscheme, especially if different from the one you use?
4. What popular colorscheme do you wish you could like, but still don't?",100,59,Let's talk about colorschemes
,5,61,Use full-blown vim commands instead of sed for unix pipeline editing
"Take the question as broadly as you will. If you don't know anything about blender, it's a modal program (edit mode, object mode, UV mode) where you do everything through simple keyboard shortcuts (there's a GUI for most stuff, but most people don't even know how do stuff without keyboard shortcuts) known for being very pleasant to work with, but with a steep learning curve.",110,59,I just realised that Blender is the Vim of 3D Modelling. What's the Vim of other stuff?
,5,58,Trending Vim on GitHub this Month!
"Welcome to the eigteenth weekly Vim tips and tricks thread! Here's a link to the previous thread: [#17](https://www.reddit.com/r/vim/comments/4r3d3e/weekly_vim_tips_and_tricks_thread_17)

Thanks to everyone who participated in the last thread! The top three comments were posted by /u/taejavu, /u/8Mad, and /u/Syath.

Here are the suggested guidelines:

* Try to keep each top-level comment focused on a single tip/trick (avoid posting whole sections of your ~/.vimrc unless it relates to a single tip/trick)
* Try to avoid reposting tips/tricks that were posted within the last 1-2 threads
* Feel free to post multiple top-level comments if you have more than one tip/trick to share
* If you're suggesting a plugin, please explain why you prefer it to its alternatives (including native solutions)

Any others suggestions to keep the content informative, fresh, and easily digestible?",59,56,Weekly Vim tips and tricks thread! #18
,13,59,QQ.vim (like postman in vim)
,28,59,Sweater - Light color scheme for Vim
,14,62,Time traveling in vim
,41,61,Look what arrived in the post today!
"A few months ago I decided I wanted vim to be my development environment.  Against the advice of /r/vim, I went with one of those bundled plugin packs.

Some of the stuff it did was cool but some of it didn't work the way I wanted to and I didn't have the time to spend trying to figure out the mass of config files that came with it.  

A few days ago I decided to start from scratch and just add things to my vimrc as I realized I needed them.  Today, for whatever reason I decided to start using buffers instead of windows this lead me to the internet.

6 hours later I didn't get any work done but I think I will now make up for it with all of the knowledge I have now.  

TL:DR  Today I finally started using buffers, macros, the built-in file explorer and autocomplete and I love vim even more than I did yesterday.

",48,55,"I've been using vim for about 5 months now and just had a ""holy shit, I just increased my productivity 10-fold"" day."
,19,62,"Surely this is a joke, right?"
,34,58,My Vim/Tmux config after 3 years of use
,7,61,A tiny translate-shell wrapper for Vim
If you haven't hear of it before it's [a new Vim editing model inspired text editor](https://github.com/mawww/kakoune). Just wondering if people have tried it or have any thoughts on it.,37,57,What do you guys think about Kakoune?
,4,58,Vim plugin to boost productivity of people with grapheme/color synesthesia.
"Add to your vimrc:

    :packadd! editexisting

Now every time you try to edit file which is already open in another instance of Vim, Vim will just focus that instance instead of showing a warning. 

You need to have `swapfile` enabled for this to work.",10,59,TIL: editexisting.vim
"Here's my progression.

**Day 1:** Okay, I've heard good things, looked at some tutorials, ran through Vim tutor, can see some potential

**Day 2:** Some of these design decisions make no sense, but it's customisable so whatever, scripting language is the ugliest thing I've ever seen, why won't Python work, (a half-hour later) okay Python works, why won't Python commands work

**Day 3:** Hey customisation is pretty easy, got a nice colour scheme going, looked up some vimrc tricks online, it's better now, but maybe other editors are still better

**Me right now:** "":put= py3eval()"" holy shit I don't need to write Notepad++ scripts anymore! GLORY TO VIM! VIM FOREVER!

With these two powers combined, I don't know where this will end, but I'm sold.

<edit>

What would be cool if there was some way to write short python scripts right inside Vim, I tried Ex mode but that still fires each command separately.

If anybody knows some way of doing something like a **for each** statement inside Vim, let me know please, that would be really cool without having to create the script in a separate file. Although I'm thinking you could probably create a temporary buffer and put the script in there, which is close enough I suppose, not sure how to run a python script inside a buffer yet though, if anybody knows the commands please let me know that too! Cheers.",39,54,Started playing around with Vim 3 days ago
,28,58,"Vim: So long Pathogen, hello native package loading"
"The new [default vimrc file](https://github.com/vim/vim/blob/master/runtime/defaults.vim) has been included since vim 8 (7.4.21111 to be exact), with some very sensible defaults. However it is *not* enabled by default if you have a .vimrc file already.

From `:help defaults`

>If you create your own .vimrc, it is recommended to add this line somewhere near the top:

	unlet! skip_defaults_vim
	source $VIMRUNTIME/defaults.vim

Some great defaults in this file, and including it will let your keep your run commands up to date as vim is updated.",15,58,[PSA] defaults.vim not on by default
,26,60,Supercharge Vim with Fzf and Ripgrep
,22,57,Sensible Horizontal Scrolling: HOWTO Make Vim scroll like everything else.
"One example I see a lot is using `:e **/*` instead of Ctrl-P (which to me isn't as nice because it's not a real-time search, but to each their own). What other tricks do y'all use to stick to vanilla (or at least minimally configured) vim?",112,58,What tricks do you use instead of popular plugins?
,24,55,Demo of Neovim mode for Atom (connected to a real Neovim session)
"Just got a webdev job. I've been forcing myself to use vim throughout college, and after spending a couple of weeks in this webdev role, I've found myself pushed from Eclipse (my IDE of choice) to Netbeans because of how quickly Netbeans allowed me to get started with web apps.  
Now however, since I'm starting to settle in a little, I've decided to try use Vim where ever possible.  

What tips/plugins/advice do you have with regard to setting up Vim for webdev? 

Right now I'm working with the usual, HTML, CSS, Javascript, also AngularJS. Not 100% sure about the backend yet, considering Node, but could end up with .Net or Java, it's really quite up in the air.   

It's looking like my focus may end up something like 70/30 or 80/20 front-end/back-end.  

I'm in no way a super-user of vim, but I can find my way around a file and edit bits and pieces in the way you should with Vim. I understand the difference between buffers and tabs, and how buffers should be used.   

I've been using Vim on and off in college for two years, so I've got a few plugins installed already.
After a week or so of trying to install the YouCompleteMe in Vim on Windows 8 (and partial mental breakdown) I've given up on the hopes of using that particular plugin and I'm looking for alternatives instead. 

Plugins I've installed and am comfortable with include: Vundle, Ctrl-P, Nerdtree, LightLine, Surround, EasyMotion, Emmet, Indent Guides, DeLimitMate, MatchTagAlways and CloseTag. 

Is it possible/advisable to do all my webdev in Vim?  
Got any tips or tricks to help me on my way?? 

Happy New Year!! :-)  

Edit: also fully intend on using the awesome [ctrl-space](https://github.com/szw/vim-ctrlspace) plugin and possibly screen too.

Edit 2: Clarification that I'm not struggling with Vim itself. ",108,56,Do you use Vim for webdev?
,36,56,Vim-Plug - A minimalist Vim plugin manager
"Hi Reddit,

I wrote my first vim plugin and thought I'd share it with you, in case anyone else finds it useful. It will automatically switch colorschemes at configurable day/night times so your vim colorscheme can be light during the day, but dark at night. [Here it is.](https://github.com/jonstoler/werewolf.vim)

I couldn't find an existing plugin that does this, so I wrote my own instead! Hope you guys like it! Feel free to comment with feedback/thoughts/questions/etc.

*Edit: forgot link, derp derp*",27,56,werewolf.vim - change colorscheme depending on time of day
,17,59,I just realized a vim macro is a series of characters in a register
,36,58,Can anyone identify this colorscheme?
,15,56,Vimpusher - A social vim plugin list for everyone who has their vimrc's online
,38,60,Don't be proud of an empty vimrc
,21,60,Steve Losh has started writing Learn VimScript the hard way - looks promising
,8,59,LaTeX in (g)Vim with live update-as-you-type PDF preview
,25,58,This is Your Brain on Vim
,26,55,Colder quickfix lists [Vimways 11/24]
"Not strictly vim-related but I use this very often while I'm in vim, and it boosts my productivity quite a lot. 

&#x200B;

I often press `CTRL-Z` to put vim in a background job (without closing it) and type a command. Then when I want to get back to vim I type `fg`. Actually often the command that I want to run after putting vim in background is actually in history so I just press `CTRL-P`.

&#x200B;

Problem is if you type `fg` to get back to vim, when you press `CTRL-P` your last command will be `fg`, which is annoying and often not the command you wanted to run. So I have this snippet in my **\~/.zshrc** that allows me to put something in background and bring it to the foreground with a single keybinding (without polluting command history with fg) : 

    # Allow Ctrl-z to toggle between suspend and resume 
    function Resume {  
        fg
        zle push-input 
        BUFFER=""""
        zle accept-line
    } 
    zle -N Resume
    bindkey ""^Z"" Resume
    

&#x200B;

**TL:DR:**

One binding (`CTRL-Z`) to put any command in **background** and bring it to **foreground** with **same binding**

&#x200B;

Thought I'd share this for people who use `CTRL-Z` binding.",24,59,Ctrl-Z binding
"Hey everyone,

I'm a long time vim user and am recently started customizing my .vimrc again to fix a few issues I had. I came across Spacevim today and have been trying it out. There a quite a few things that I like, such as the flygrep as you search, the menu that pops up when you press Space, built in auto-completion for most programming languages that I use and . The thing that I don't like about it is that it probably has a lot of features and things that I'll never use, I don't love vimfiler compared to NerdTree and it seems to be quite a bit slower than my previous .vimrc setup (which had a lot of plugins already).

Has anyone given Spacevim a real run? If so, how was your experience? ",84,58,What's your honest opinion of Spacevim
"Do you want to reliably recover or see the change history for any file you edit in your filesystem? Even for files that you have accidentally deleted? Do you find Vim's built-in backup functionality awkward?

This is a perfect job for Git, and you can hook it to Vim with a small autocmd function.

- Screenshot of the end result: https://i.imgur.com/ab3GA06.png.

    Vim on the left, `git log --patch` on the right.

- Vim code (Neovim `jobstart` syntax, same idea for Vim 8):

        augroup custom_backup
          autocmd!
          autocmd BufWritePost * call BackupCurrentFile()
        augroup end

        let s:custom_backup_dir='~/.vim_custom_backups'
        function! BackupCurrentFile()
          if !isdirectory(expand(s:custom_backup_dir))
            let cmd = 'mkdir -p ' . s:custom_backup_dir . ';'
            let cmd .= 'cd ' . s:custom_backup_dir . ';'
            let cmd .= 'git init;'
            call system(cmd)
          endif
          let file = expand('%:p')
          if file =~ fnamemodify(s:custom_backup_dir, ':t') | return | endif
          let file_dir = s:custom_backup_dir . expand('%:p:h')
          let backup_file = s:custom_backup_dir . file
          let cmd = ''
          if !isdirectory(expand(file_dir))
            let cmd .= 'mkdir -p ' . file_dir . ';'
          endif
          let cmd .= 'cp ' . file . ' ' . backup_file . ';'
          let cmd .= 'cd ' . s:custom_backup_dir . ';'
          let cmd .= 'git add ' . backup_file . ';'
          let cmd .= 'git commit -m ""Backup - `date`"";'
          call jobstart(cmd)
        endfunction




That's it! All your files (even those that are not in any version control) are now reliably backed up to `~/.vim_custom_backups` whenever you save. I have been using this for years and it has worked wonders.

----------

Bonus: if you use tmux, here's a little helper function to open the backup history for the current file by pressing `<leader>obk` (as in ""open backup""):

    noremap <silent> <leader>obk :call OpenCurrentFileBackupHistory()<cr>

    function! OpenCurrentFileBackupHistory()
      let backup_dir = expand(s:custom_backup_dir . expand('%:p:h'))
      let cmd = 'tmux split-window -h -c ""' . backup_dir . '""\; '
      let cmd .= 'send-keys ""git log --patch --since=\""1 month ago\"" ' . expand('%:t') . '"" C-m'
      call system(cmd)
    endfunction

PS: if you like what you see you can check out my [vimrc](https://github.com/jeromedalbert/dotfiles/blob/master/.vim/init.vim) for other similar vim tidbits.",26,55,"Top-notch VIM file backup & history with no plugins, just Git"
,28,57,Taskell: a vim inspired task management app
,5,55,Your vimrc is yours... No one else's...
,9,59,"Can I move the command line up, so Airline and Tmux are together?"
"Hello fellow VIM enthusiasts.

At place of my work, Cyber recently instituted an application white-listing software, and now they're targeting softwares that they deem ""insecure"". To that end I got a notice today that I should uninstall VIM on my machine. When I pushed back, I've been asked to provide ""business justification"" for it.

I know why I use VI, but has anyone gone through the exercise of wrapping the goodness that is VIM in a ""business justification"" case?

Any help appreciated.",63,57,Help with business justification for VIM
,9,59,Use Vimdiff as Git mergetool
,10,56,"I accidentally created a bunch of ""~"" signs - how do I delete them? - X-Post from /r/bash"
,12,55,Instant Markdown previews from VIM
,13,59,Vim Refactoring Patterns · Deliberate Software [xpost r/linux]
"This is weird, but I may be ""oh, I will learn programming because everyone is doing it and it looks fun"" type of guy.

So, I'm not a programmer. I am learning because I like it, and it keeps me busy. However, I was looking for a text editor and I found vim. It is fast, it looks cool and I really like it. So much so, that I became obsessed with it. I like learning new tricks, reading this subreddit, books and tutorials, all about vim. And yet it feels like I'm waisting my time learning a text editor instead of a real language that it could actually be useful to me in the future.

Am I really wasting my time? Would like to hear some opinions about it. I've been doing this for two months.

This sub is great. Thanks for all the help!",26,58,My vim story.
,4,55,Tmux allows custom backgrounds for focused / unfocused panes
,12,58,"Get your free upgrade to Practical Vim, 2nd Edition"
,18,56,I created a colorscheme based on colors from Wes Anderson films
,18,57,Perform Vim Normal Mode moves using the Command Line
"Mine:

- Mapping <Leader> to space made things significantly easier for me. There is a all time top post on this subreddit labeled ""12 vim tips"" or something and it really helped me. My leader is <Space>. Now I can do things like <Space>w to save file, <Space>q to quit, <Space>ev to edit vimrc, <Space>h/j/k/l to move between vim splits. It's like when you play WoW and you transition from clicking to hotkeys.

- Vundle. I won't get into any arguments between Vundle or Pathogen, but I will say that I personally had a much better time with Vundle. My vimrc is cleaner, my .vim is cleaner. Moving between my arch box and my Macbook Air is so easy with Vundle - all I have to do is git pull my vimrc and run :PluginInstall. No more git wrangling - just commit your vimrc and you're done. I've also heard of a new 'Vundle' clone by Junegunn so I will definitely check that out sometime.

- ciw. Delete word on cursor and enter insert mode. This is one of my favorite native vim hotkeys and I use it so much.

- o and O. Enter new line below/above current line and enter insert mode. Coding life got much better after learning about these hotkeys.

- NERDTree and mapping it to <F3>. I love it that NERDTree works right out of the box. I can't really describe it, it just works and it works well.

- Learning vim window splitting. Ok I was on the tmux train for a while but in the end it was a pain in the ass. With Tmux I had a whole host of new hotkeys that clashed with vim, the support for Vim colors is horrendous, and setting it up can be a pain. I seriously had hand pains juggling between Vim and Tmux hotkeys. Vim window splitting was a much better solution. I usually have NERDTree on the left side, and split vim on the right. It just works seamlessly. I also map my Leader to various window movement hotkeys so it's very painless now. edit: comment mentioned tmux navigator might have to try that out",148,55,Which plugins/keybinds/etc significantly changed your vim life?
,26,55,/r/vim hits 20K subscribers
"Every once in awhile I take a look at what I can do to improve my coding environment. One of my latest improvements I didn't know was possible was getting a 24 bit color scheme in vim within a terminal. This is awesome for obvious reasons, and thought I'd share how I got it going since I couldn't find proper instructions.

Get the nightly iTerm2 [here](http://iterm2.com/downloads.html) that supports 24 bit color.

Clone ZyX's vim fork

        hg clone ssh://hg@bitbucket.org/ZyX_I/vim

cd into it and run

        hg bookmark 24-bit-xterm

Run configure, including ""--enable-termtruecolor""

I ran this:

        ./configure --with-features=huge --enable-rubyinterp --enable-termtruecolor
        make && sudo make install

Include this in your .vimrc

        let &t_8f=""\e[38;2;%ld;%ld;%ldm""
        let &t_8b=""\e[48;2;%ld;%ld;%ldm""
        set guicolors

Vim should now support 24 bit color.

        vim --version should include +termtruecolor


I use tmux and had to use this to install a new tmux that supported 24bit color

The source for the project is here: https://github.com/choppsv1/homebrew-term24

but just run these commands:

        brew uninstall tmux
        brew tap choppsv1/term24
        brew install choppsv1/term24/tmux

Pretty sure that was all I needed. Hopefully this will help someone!",28,57,24 bit VIM in OSX iTerm2 a reality!
"For emacs it's very popular to run only one instance as ""server"" and send all
files one wants to edit to it. The main reason for this is, as far as
I understand, that emacs take a bit to start up, like one second or so.

It's possible to do this with vim as well, using the `--server` option. However,
I'm running my vim in tmux, one vim per session, one session per project. I've
configured my vim instance to be the server for the current tmux session, by
using the tmux session variable.

Yet, I find myself often to just override this setup and start a quick vim
instance for editing a config file or so. Since vim starts up instantly, it
would take me longer to switch to the tmux window where my session vim is
running, which is most often for developing.

Is anybody here using in a real server fashion?  
Like, only one vim instance on the whole system and sending all files to it?  
How does this approach benefit you?
",69,57,Do you use vim as a server or as a single instance?
,21,55,vim double-shot keycap to replace my <ESC> key x-post from r/MechanicalKeyboards
,23,55,The compositional nature of vim
"I've fallen in love with Vim to the point where it's weird not using the hjkl to scroll in other apps. What other apps/plugins for existing apps are available out there that are ""vim-like""? I have Vimium for Chrome. I'm looking for an e-mail client and a PDF reader in particular.

BTW I'm on OS X",115,56,"What other apps are ""Vim-like""?"
,28,55,Using vim as C/C++ IDE | Alexey Shmalko's personal blog
,26,56,A Good Vimrc
"At OSCon Damian Conway convinced me to map `<Space>` to `:w!` and it's my new favorite feature. Saving my buffer is the thing I do the most so it makes sense to map `<Space>` to that. 

What do other people map their spacebar too?",119,57,"<Space> is a big key, what do you map it to?"
,22,56,"lion.vim - Align text by a character. It defines proper operators, so you can use it on any {motion} (e.g. text objects)"
"I've been using vim (with a few plugins) for note-taking/organization and todo lists at work for a few months now. The main plugin I use is [vimoutliner](https://github.com/vimoutliner/vimoutliner), which has some nice features for outline-based notes. I've since modified it with some custom code to create hyperlinks (similar to the link functionality in [vimwiki](https://github.com/vim-scripts/vimwiki)) to either URLs, other text files (with the ability to specify lines with marks), or pdfs.

For my Todo list, I use a ""GTD-ish"" list, with ""Next actions"", ""Project plans"", ""Agenda"" and ""Waiting for"" for various contexts. Vimoutliner makes it very easy to add checkboxes, which I use. I move completed items under a ""DONE"" heading, then I have a perl script to ""clean out"" the file (moves all completed items into an archive file, preserving headings).

Since I use multiple computers (with different OS's) often, I have my entire notes directory controlled with git on a central server, so I can push/pull whenever I need to (plus that takes care of backup). I used to use Dropbox for that, which was a little more straightforward, but I moved off because of security concerns.

Anyway, that's more or less my system, and I've spent a lot of time getting it set up just the way I like. Anyone else have similar setups to share?",39,55,vim as note-taking/organization software... anyone else do this? Share your method!
,44,58,Dark Vim GUI for OS X
,20,53,How to (not) traverse text in Insert mode
,20,55,I never knew UltiSnips could do so much
"Just found out about these today. In insert mode, type Ctrl+k, then enter 2 characters to insert a character not usually found on a keyboard. For example, enter 12 to get ½, AE to get Æ, or o: to get ö. I have Ubuntu set up for similar functionality via the [Compose Key](https://help.ubuntu.com/community/ComposeKey) settings, but I also use gvim at work, and vim provides far more mappings than Ubuntu seems to. You can get a list of digraphs with the :dig command.",32,56,digraphs
"I'm just now getting into this... and I see the insane fucking potential of JUST the movement keys alone...

obvious basics like: jkl; w W b B e E zz J M L $ 0 gg G ^ etc etc

And then the little more complicated ones.

I'd love to see someone shred some code in Vim like Yngwie Malmsteen. I've seen Derek Wyatt and hes fucking awesome but he's doing a lot of explaining, and also a lot of regular expressions which i find major impressive but definitely I'm not there yet...

I'd just love to see a video of someone in the zone writing code without much complicated command line function and just owning at the million different movement keys.

Does anyone have a link, or might care to record one? :D",72,54,can i see someone be a showoff with masterful vim usage?
,19,56,Vundle 0.9 got awesome installer
,2,59,gitk for Vim
,6,61,My 10 favourite Vim tips [anim. gifs]
"I was browsing our beloved Reddit yesterday and noticed a desktop screenshot thread, So I thought I'd slap up a topic here so we can all show off our respective vim setups.

[My Baby](http://imgur.com/atC5Y.png)

My setup uses a modified Wombat theme, with the colors brightened to aid reading.

I have the Tag list plugin running, and have CSApprox going to let me use GViM themes.

Font is Bitstream Vera Sans Mono",34,54,Vim: Show off your setup.
,16,55,TIL: vim = energy; enthusiasm
"TL;DR: Get wow'd by [remarkjs.com](https://remarkjs.com/) and then make your own in vim with [vim-remarkjs](https://github.com/idbrii/vim-remarkjs).

I've don't post plugins here often (ever?), but I was irrationally excited about [remark.js](https://github.com/gnab/remark) as a simple way to write presentations in markdown that export as a single html page.
(Found via an unexpected source of Javascript praise: Bitsquid dev Niklas Frykholm's old [Javascript Hot Reloading](https://github.com/niklasfrykholm/blog/blob/394cf141bc77a6ab815944a87abcf730684f60f1/2016/javascript-hot-reloading.md) post.)

It's pretty slick: try going to [remarkjs.com](https://remarkjs.com/), press C (clone view) and P (presenter view), put the original view on your projector, and you're ready to present. It's all in one html file so it's easy to distribute. (For important presentations, you may want to point to a local copy of remark-latest.min.js.)

Since remark is a single html, you have to write your markdown inside of it. I use markdown to avoid even thinking about html, so I looked around for a vim plugin to let me write in markdown and generate the html. I only found a ruby-based plugin ([remark.vim](https://github.com/mauromorales/vim-remark/blob/master/plugin/remark.vim)) that uses a template engine and seemed over complicated. So I wrote a simple vimscript version: [vim-remarkjs](https://github.com/idbrii/vim-remarkjs).

Now I just need something to write a presentation about.",10,56,Turn Markdown into self-contained html slideshows: vim-remark.js
"Howdy,
I'm using vim for several years now and I try to use it for everything. I pipe find results to vim, replaced the less command with vim and I stopped using grep (in simple cases). 
Since vim8.1 supports native terminal support,I was thinking about using vim as login shell spawning zsh/bash/whatever in split view per default. 
What do you think about it, advantages, disadvantages, raising problems...",23,58,/usr/bin/vim as login shell?
"I was crawling the web and found an old article: http://timetobleed.com/a-closer-look-at-a-recent-privilege-escalation-bug-in-linux-cve-2013-2094. It's code color scheme seems attractive to me and reminds sparks of a camp fire in a warm and peaceful night. So, I decided to implement this scheme for Vim. It looks good on both FreeBSD and macOS!

You may find it on GitHub: https://github.com/dsalychev/firesparks

MacVim: https://raw.githubusercontent.com/dsalychev/firesparks/master/preview/macvim.png

GVim (FreeBSD, Mate 1.18.0): https://raw.githubusercontent.com/dsalychev/firesparks/master/preview/gvim-freebsd.png",8,52,Firesparks color scheme
,35,55,"Start using vim with tmux and zsh, build a repository for future reference."
"I really like using vim-fugitive, but it doesn't seem to fit my style, so I resort to opening another terminal window to interact with git. I like the idea of using vim only. My workflow is:

1. Make code changes
2. :Gstatus
3. go to first file in list
4. type: `-`
5. (do the patch add for that file)
6. Find another file and repeat 4 and 5
7. :Gcommit
8. :GPush origin my-branch-name

what is your vim-fugitive workflow?",38,57,vim-fugitive workflow
,0,54,A million Euro raised for Uganda
"I really liked watching the youtube videos from the Boston Vimm meetup, so I
looked up other Vim meetups on meetup.com and found videos links.  Hope that's
useful to others.

Baltimore Vim - Baltimore, MD
https://www.youtube.com/channel/UCscReg0a3A8QJNY0-RAfFbw

The Boston Vim Meetup - Boston, MA
https://www.youtube.com/playlist?list=PL8tzorAO7s0jy7DQ3Q0FwF3BnXGQnDirs

The New York City Vim Meetup - New York, NY•
https://www.youtube.com/playlist?list=PL8tzorAO7s0jy7DQ3Q0FwF3BnXGQnDirs

Vim Chicago - Chicago, IL
https://www.youtube.com/channel/UC6qDqV0L4jayUh-KEWfJ1qA

Vim London - London, United Kingdom
https://vimeo.com/vimlondon
",3,54,Vim meetup videos on the internet
"I am a developer with 10 yrs experience and the concept of vim & tmux is like unicorns (Impractical & Utopian) for me. Since all the vim people are here, I am here to ask for guidance.

Just a background about me, I was an asp.net developer having only used windows. Since about a year, I have moved to a mac and working on rails. I have attempted to use Linux, but I usually get stuck even before I start. I once attempted to setup Arch Linux. I just formatted the machine and moved on after a week of kicking around in the dark. Not sure what I exactly did.

In my current workplace, everyone uses mac+sublime text+iterm+chrome. All three open is the same screen is how everyone work and that's what I am also doing.

I was really surprised when I found that tmux can be hosted on a different machine. I understand that these things seem normal to all you people & you guys approach development from a different way. I am interested in understanding it.

Is any developer using vim & tmux for working on rails? Do you load the browser into the tmux view? Most videos I found on youtube just assumes that the viewer knows a lot and usually I am left with more questions than answers. Is there vim & tmux tutorials for clueless newbies? I would really love to see a video tutorial that shows how to built a basic rails app using vim & tmux.

Since I am learning something new, I want to learn the right way. And I just wanted the people to know it's very tough to learn vim.",79,58,What type of development workflow is vim & tmux used in?
,10,57,A theme that I made some time ago that maybe some of you would like
"There's stuff like the sentence motion, like `cis` for 'change inside sentence', and `set spell` then `z=` for correcting errors, but are there some for repeating the last letter or word or something?

Not sure what there would be, but that's sort of how vim's cool, it's got stuff you didn't even know you needed.

edit: Specifically for writing and editing prose, like comments and docstrings, instead of what you'd typically use vim for, like editing code. ",55,55,What sort of vim tricks are there for editing text?
,14,57,targets.vim improves quote text objects (more info in comments)
,13,56,"Yank without Jank, how to keep prevent the cursor from moving after a yank operation."
,2,59,Collection of 80+ Vim resources
,13,56,VimL wins for the language with the angriest commit messages on github
,14,58,A Simpler Vim Statusline
,27,57,Athame (full vim-mode for your shell) now supports zsh
